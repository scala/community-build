#!/usr/bin/env sbt -Dsbt.version=1.3.5 -Dsbt.main.class=sbt.ScriptMain -Dsbt.supershell=false -error

// to narrow projs.conf to just one project and its dependencies:
//   % ./narrow scalacheck
// or several
//   % ./narrow scalacheck scalatest specs2

// dependencies.txt is the source of truth for what dependencies to use

/***
scalaVersion := "2.13.1"
onLoadMessage := ""
scalacOptions ++= Seq(
 "-deprecation", "-unchecked", "-feature", "-Xfatal-warnings")
libraryDependencies ++= Seq(
  "com.github.pathikrit" %% "better-files" % "3.8.0",
)
*/

import better.files._

// read dependency information
val tree: Map[String, Set[String]] = {
  val deps = File("dependencies.txt")
  val Regex1 = """\[info\] Project (\S+)""".r
  val Regex2 = """\[info\]   depends on: (.*)""".r
  deps.lines.toSeq.grouped(2).map{
    case Seq(Regex1(proj), Regex2(deps)) =>
      proj -> deps.split(", ").toSet
  }.toMap
}

// build list of targets
val targets: Set[String] =
  (args.toSet
    ++ args.flatMap(tree)
    -- Set("scala", "cloc-plugin"))

// write results
val projs = File("projs.conf")
projs.clear()
projs.append(
  """|build += {
     |  space: scala.main
     |  check-missing: [ true, false ]
     |  cross-version: [ disabled, standard ]
     |  extraction-version: ${vars.scala-version}
     |  sbt-version: ${vars.sbt-version}
     |  projects: [
     |
     |""".stripMargin)
projs.printLines(
  targets.toSeq.sorted.iterator.map(
    p => "  ${vars.proj." + p + "}"))
projs.append("\n]}\n")
