// Note: the Typesafe Config library is a bit picky with suffixes;
// the common files included via the "include" directive should
// have a ".conf" suffix.

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
//
// Note however that += won't work inside vars.base.
// It's https://github.com/typesafehub/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

///////////////////////////////////////////////////////////////////////

//
// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
//
//
// This is the Typesafe development build file for the Scala 2.11.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.11.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: list the projects we're building, if not all of them
vars: {
  scala-ref                    : "scala/scala.git#2.11.x"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "retronym/browse.git#topic/2.11-compat"
  lift-framework-ref           : "lift/framework.git#3.0-M2-release"
  spray-ref                    : "spray/spray.git#v1.3.3"
  // only building project twirl-api, fixed sha from master branch that has Scala 2.11 compatibility patches merged
  spray-twirl-ref              : "spray/twirl.git#102978cb508684aee0cfa09d71027965cdcd77b4"
  // - fix for matching scalaBinaryVersion that causes issues in dbuild
  // - That has been merged, but master is now unusable in Java 6 due to
  //   the use of typesafe-config 1.3.0
  //   https://github.com/playframework/interplay/commit/73f7c9b434be180c27611aebb089d55f6445bcf5#commitcomment-11275807
  play-twirl-ref               : "playframework/twirl.git#pull/45/head"
  spray-json-ref               : "spray/spray-json.git"
  // fixed sha from 2.10.x branch that has Scala 2.11 compatibility patches merged
  scala-io-ref                 : "adriaanm/scala-io.git#community-build"
  json4s-ref                   : "json4s/json4s.git#v3.2.10_2.11"
  // 2.4.x requires JDK 8, so here we stay on 2.3.x
  playframework-ref            : "playframework/playframework.git#2.3.x"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // This pull request supports the fully-cross-versioned continuations plugin, shipped with 2.11+
  scala-arm-ref                : "jsuereth/scala-arm.git#pull/31/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // There's no suitable release yet, so we depend on this commit. Upgrade to the next tagged version once released
  scala-refactoring-ref        : "scala-ide/scala-refactoring.git#44dca8b74808528693f884cfd3c5c9d3ed13e519"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.6"
  scalatest-ref                : "scalatest/scalatest.git#2.2.3-and-greater"
  // zeromq-scala-binding's master includes this fix (and others), which break akka-zeromq (?):
  // https://github.com/valotrading/zeromq-scala-binding/commit/c2a8a87673a1a3468486d1af9a6460bfed25c7a2
  // therefore (which has a broken libdep of scalatest, however (cross full)):
  zeromq-scala-binding-ref     : "valotrading/zeromq-scala-binding.git#062e9438e322ec29d75b9649cb2aafa6ba3198a6"
  // fixed sha/tag (a compromise), the sha points at master that supports Scala 2.11
  spire-ref                    : "non/spire.git#3d2a41e91a1f6946fac63660f6157d4a6e4a281d"
  shapeless-ref                : "milessabin/shapeless.git"
  scoverage-ref                : "scoverage/scalac-scoverage-plugin.git#1.0.2"
  // change from https://github.com/sbt/sbt/pull/1509 broke building sbt with Scala 2.11
  // this problem is tracked in https://github.com/sbt/sbt/issues/1523
  // for now, we stick to fixed sha1 of sbt right before the merge of #1509
  sbt-ref                      : "sbt/sbt.git#0b2f2ae5a8ab2b082b6e15b196d671a4c18cc9f2"
  // this is commit corresponding to 1.3.0 release, unfortunely pimpathon doesn't tag its releases
  pimpathon-ref                : "stacycurl/pimpathon.git#d2354dd92f5481610f4610edba3574880b07263e"
  sbt-testng-interface-ref     : "SethTisue/sbt-testng-interface.git#no-bintray"
  utest-ref                    : "lihaoyi/utest.git"
  breeze-ref                    : "scalanlp/breeze.git#releases/v0.12"

  // tracking upstream (the ideal)
  akka-ref                     : "akka/akka.git#release-2.3"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-xml-ref                : "scala/scala-xml.git"
  scala-swing-ref              : "scala/scala-swing.git#1.0.x"
  scala-records-ref            : "scala-records/scala-records.git"
  macro-paradise-ref           : "scalamacros/paradise.git#2.11.x"
  macro-compat-ref             : "milessabin/macro-compat.git"

  // TODO move back to master after adding scalaz-stream to the community build.
  // the fork was necessary because Specs 2.4 uses Shapeless 2.0.0 but we want
  // to be on 2.2.x, and we hit a small source incompatibility.
  specs2-ref                   : "SethTisue/specs2.git#specs-24-compat-w-shapeless-22"

  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "harrah/sbinary.git"
  sbt-republish-ref            : "typesafehub/sbt-republish.git"
  scalaz-ref                   : "scalaz/scalaz.git#series/7.1.x"
  discipline-ref               : "typelevel/discipline.git#v0.2"
  scala-js-ref                 : "scala-js/scala-js.git"
  slick-ref                    : "slick/slick.git#3.1"   // stay here; master wants Java 8
  scalamock-ref                : "paulbutcher/scalamock.git"
  scalariform-ref              : "daniel-trinh/scalariform.git"

  // master depends on Akka HTTP and Akka Stream, which are tricky to depend on
  // (they are built only a special branch). so freeze right over the dependency was added.
  ensime-ref                   : "ensime/ensime-server.git#f4de40f6ce93afa75fd5bbe153c5f1df73035b1a"

  // master uses Shapeless 2.3 only features, so at this time it doesn't make sense to
  // track. there is no other branch we can track, so we use a version tag.  at time of
  // writing (Oct 2015) 1.1.0 is both the latest released version and the version that
  // Ensime depends on.  and Ensime is the main reason we're adding this at all
  spray-json-shapeless-ref     : "fommil/spray-json-shapeless.git#v1.1.0"

  scala-gopher-ref             : "rssh/scala-gopher.git#community-build"

  // version settings
  sbt-version-override         : "0.13.10-M1"
}

vars {
  scalac-opts                  : ""
  scalac-opts                  : ${?scalac_opts}   // allows additional compiler options using the scalac_opts environment
  default-commands             : []
}

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val projectScope = Load.projectScope(currentRef)
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(fn))
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

vars.ivyPat: ", [organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  01: "local"
  02: "maven-cache: https://scala-ci.typesafe.com/artifactory/central/"
  03: "typesafe-ivy-releases: https://repo.typesafe.com/typesafe/ivy-releases/, [organisation]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly"
  04: "sbt-plugin-releases: https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/"${vars.ivyPat}
  05: "old-sbt-plugins: https://repo.typesafe.com/typesafe/ivy-releases/"${vars.ivyPat} // e.g. sbteclipse-plugin 2.x
  09: "dbuild-snapshots: http://repo.typesafe.com/typesafe/temp-distributed-build-snapshots"${vars.ivyPat}
  10: "maven-central"
  11: "old-typesafe-maven-releases: https://repo.typesafe.com/typesafe/maven-releases" // for play 2.3.9's netty-http-pipelining 1.1.2

  // temporary, enables the fix of https://github.com/sbt/sbt-web/pull/107/files
  // discussion here: https://github.com/sbt/sbt-web/pull/107#issuecomment-94004046
  13: "bintray-eed3si9n-sbt-plugins: https://dl.bintray.com/eed3si9n/sbt-plugins"${vars.ivyPat}

  // for Ensime's netbeans dependency
  14: "netbeans: http://bits.netbeans.org/nexus/content/groups/netbeans"

}

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: [ default ]
  space.to: default
  extraction-version: "2.11.7"
  sbt-version: ${vars.sbt-version-override}

  projects: [
  ${vars.base} {
    name: "parboiled",
    uri: "https://github.com/"${vars.parboiled-ref},
    extra: ${vars.base.extra} {
      projects: ["parboiled-scala"]
      // tests do not compile due to source incompatible change in scalatest
      // TestNGSuite became a class but was a trait
      run-tests: false
    }
  }

  ${vars.base} {
    name: "json4s",
    uri: "https://github.com/"${vars.json4s-ref}
    extra.projects: ["json4s-native", "json4s-jackson"]
  }

  ${vars.base} {
    name: "lift-json",
    uri: "https://github.com/"${vars.lift-framework-ref}
    extra.projects: ["lift-json"]
    // test failure:
    //[info] [info] ! Either can't be deserialized with type hints
    //[info] [error]  ClassNotFoundException: : scala.util.Left  (Formats.scala:223)
    // !!!: probably we should investigate
    extra.run-tests: false
  }

  ${vars.base} {
    name: "spray-twirl",
    uri: "https://github.com/"${vars.spray-twirl-ref}
    extra.projects: ["twirl-api"]
  }

  ${vars.base} {
    name: "play-twirl",
    uri: "https://github.com/"${vars.play-twirl-ref}
  }

  ${vars.base} {
    name: "spray-json",
    uri: "https://github.com/"${vars.spray-json-ref}
  }

  ${vars.base} {
    name: "spray",
    uri: "https://github.com/"${vars.spray-ref},
    extra: ${vars.base.extra} {
      // skip tests for now; see https://github.com/scala/community-builds/issues/110
      run-tests: false
      // disable subprojects depending on shapeless 1
      exclude: ["spray-routing", "spray-routing-tests"]
      // disable running sphinx, it would be great if dbuild
      // offered a mechanism for excluding particular project (e.g. docs)
      commands: ${vars.default-commands} [
        "set SphinxSupport.sphinxCompile in docs := Seq.empty"
      ]
      // disable parallel execution of tests as a work around for non-deterministic
      // failures, see: https://github.com/scala/community-builds/pull/69#issuecomment-63324597
      settings: ["parallelExecution in GlobalScope in Test := false"]
    }
  }


  ${vars.base} {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    extra: ${vars.base.extra} {
      projects: ["Play"]
      directory: "framework"
      run-tests: false
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
      commands: ${vars.default-commands} [
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
      ]
    }
  }

  ${vars.base} {
    name: "scala-io"
    uri: "https://github.com/"${vars.scala-io-ref}
    extra: ${vars.base.extra} {
      projects: ["core", "file"]
      // one of the tests fail for some reason
      run-tests: false
    }
  }

  ${vars.base} {
    name: "scala-arm"
    uri: "https://github.com/"${vars.scala-arm-ref}
  }

  ${vars.base} {
    name: "scala-partest-interface",
    uri: "https://github.com/"${vars.scala-partest-interface-ref}
  }

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}

  }

  ${vars.base} {
    name: specs2
    uri: "https://github.com/"${vars.specs2-ref}
    extra.run-tests: false // at least SnippetsTest is failing.
  }

  ${vars.base} {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
  }

  ${vars.base} {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
  }

  ${vars.base} {
    name: "scala-records"
    uri: "https://github.com/"${vars.scala-records-ref}
    extra.exclude: ["coreJS"]
  }

  ${vars.base} {
    name: "zeromq-scala-binding"
    uri: "https://github.com/"${vars.zeromq-scala-binding-ref}
    extra: ${vars.base.extra} { run-tests: false }
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: ${vars.base.extra} {
      projects: ["scalatest"]
      commands: ${vars.default-commands} [
        "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
      ]
      run-tests: false
    }
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/"${vars.discipline-ref}
  }

  ${vars.base} {
    name: "spire"
    uri: "https://github.com/"${vars.spire-ref}
    // tests crash with:
    // [info] [error] Could not run test spire.laws.LawTests:
    // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
    extra.run-tests: false
  }

  ${vars.base} {
    name: "breeze"
    uri: "https://github.com/"${vars.breeze-ref}
  }

  ${vars.base} {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
  }

  ${vars.base} {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: ${vars.base.extra} {
      projects: ["tests","javaOut"]
      run-tests: false
    }
  }

  ${vars.base} {
    name:"akka"
    uri:    "https://github.com/"${vars.akka-ref}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=true", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-scala-nightly"]
      run-tests: false
    }
  }

  ${vars.base} {
    name:   "scala-refactoring",
    uri:    "https://github.com/"${vars.scala-refactoring-ref},
    extra: ${vars.base.extra} {
      directory: "org.scala-refactoring.library"
    }
  }

  //
  // Typesafe-developed projects: development branches / master / unstable releases
  //
  ${vars.base} {
    name: "async"
    uri: "https://github.com/"${vars.async-ref}
    extra.run-tests: false // ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  ${vars.base} {
    name: "slick"
    uri:  "https://github.com/"${vars.slick-ref}
    // without this dbuild doesn't pick up that one of the subprojects has this dependency.
    // it doesn't even make sense; it seems to me that testNGSettings should not be adding
    // a dependency of the plugin to the libraryDependencies of the test code.
    // the line in question is:
    //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
    // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
    deps.inject: ["de.johoop#sbt-testng-interface"]
    // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
    extra.exclude: ["osgitests"]
  }

  ${vars.base} {
    name: "sbt-testng-interface",
    uri: "https://github.com/"${vars.sbt-testng-interface-ref}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
  }

  ${vars.base} {
    name:   "browse",
    uri:    "https://github.com/"${vars.browse-ref}
    extra.commands: ${vars.default-commands} [
      "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
    ]
    extra.exclude: ["test", "testLink"]
  }

  ${vars.base} {
    name:   "sbt",
    uri:    "https://github.com/"${vars.sbt-ref}
    extra: ${vars.base.extra} {
      run-tests: false
      exclude: ["root","launch-test"]
    }
  }

  ${vars.base} {
    name:   "ensime",
    uri:    "https://github.com/"${vars.ensime-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // scaladoc fails with
    // [ensime] [info] Compiling 73 Scala sources to .../target/scala-2.11/classes...
    // [ensime] [info] Main Scala API documentation to .../target/scala-2.11/api...
    // [ensime] [error] .../src/main/scala/org/ensime/indexer/SourceResolver.scala:55: value toMultiMap is not a member of scala.collection.immutable.Set[(org.ensime.indexer.PackageName, org.apache.commons.vfs2.FileObject)]
    // [ensime] [error] possible cause: maybe a semicolon is missing before `value toMultiMap'?
    // [ensime] [error]   }.toMultiMap[Set]
    extra.commands: ${vars.default-commands} [
      "set every sources in doc in Compile := List()"
    ]
  }

  ${vars.base} {
    name:   "pimpathon",
    uri:    "https://github.com/"${vars.pimpathon-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name:   "scalariform",
    uri:    "https://github.com/"${vars.scalariform-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // avoid building misc subproject that depends on Swing (and is not needed by any other project)
    extra.projects: ["scalariform"]
  }

  ${vars.base} {
    name:   "scalamock",
    uri:    "https://github.com/"${vars.scalamock-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name:   "spray-json-shapeless",
    uri:    "https://github.com/"${vars.spray-json-shapeless-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/"${vars.scoverage-ref}
    extra: ${vars.base.extra} {
      run-tests: false // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

// scala-logging-slf4j is used by scoverage, but:
// - scala-logging-slf4j v2.1.2 won't compile (not found: value LoggerMacro)
// - and v3.0.0 changed the artifacts, so we grab v2.1.2 via Ivy instead.
//  ${vars.base} {
//    name: "scala-logging"
//    uri:  "https://github.com/typesafehub/scala-logging.git#v2.1.2"
//  }

  {
    name:   "scala-logging-slf4j"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2"
  }

  {
    name:   "scala-logging-api"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2"
  }

  ${vars.base} {
    name:   "zinc",
    uri:    "https://github.com/"${vars.zinc-ref}
    // with 0.13.9 I got
    // project/Scriptit.scala:56: method distinctParser in object Defaults cannot be accessed in object sbt.Defaults
    extra.sbt-version: "0.13.8"
  }

  ${vars.base} {
    name:   "sbt-republish",
    uri:    "http://github.com/"${vars.sbt-republish-ref}
    space: default // We don't compile plugins, for 0.12/2.9.x
  }

  ${vars.base} {
    name:   "scala-js",
    uri:    "http://github.com/"${vars.scala-js-ref}
    extra: ${vars.base.extra} {
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      // e.g. https://scala-ci.typesafe.com/job/scala-2.11.x-jdk8-integrate-community-build/111/consoleFull
      options: ["-Xmx2048m"]
      projects: [ tools, testSuite, stubs ]
      commands: ${vars.default-commands} [
        // - Disable compiler/test because it is very fragile.
        "set test in (Build.compiler, Test) := {}",
        // - Disable fatal Scaladoc warnings, also fragile
        "removeScalacOptions -Xfatal-warnings"
      ]
    }
  }

  ${vars.base} {
    name:   "utest",
    uri:    "http://github.com/"${vars.utest-ref}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name:   "macro-paradise",
    uri:    "http://github.com/"${vars.macro-paradise-ref}
  }

  ${vars.base} {
    name:   "macro-compat",
    uri:    "http://github.com/"${vars.macro-compat-ref}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
     name:  "scala-gopher",
     uri:    "http://github.com/"${vars.scala-gopher-ref}
  }

]
}
