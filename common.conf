// Note: the Typesafe Config library is a bit picky with suffixes;
// the common files included via the "include" directive should
// have a ".conf" suffix.
//
// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
//
// If you use extra.options or commands in a project, or extend
// its "extra" description in other ways, please use the form:
//
//      extra.options += "opt1"
//      extra.options += "opt2"
//      extra.options += "opt3"
//      ...(one at a time)...
//
//  = or = the form:
//
//     extra: ${vars.base.extra} {
//       options += "opt1"
//       options += "opt2"
//       options += "opt3"
//      ...(one at a time)...
//     }
//
// so that any "extra" definitions that may come from vars.base are prepended.
// It is necessary to add the options one at a time due to a
// limitation of the Typesafe Config library.
//
///////////////////////////////////////////////////////////////////////

//
// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
//
//
// This is the Typesafe development build file for the Scala 2.11.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.11.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: submit PRs to upstream where possible to avoid forks (grep for adriaanm/)
// TODO: update to latest where possible
vars: {
  scala-ref                    : "scala/scala.git#2.12.x"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "retronym/browse.git#topic/2.11-compat"
  lift-framework-ref           : "lift/framework.git#3.0-M2-release"
  spray-ref                    : "spray/spray.git#v1.3.3"
  // only building project twirl-api, fixed sha from master branch that has Scala 2.11 compatiblity patches merged
  spray-twirl-ref              : "spray/twirl.git#102978cb508684aee0cfa09d71027965cdcd77b4"
  // - fix for matching scalaBinaryVersion that causes issues in dbuild
  // - That has been merged, but master is now unusable in Java 6 due to
  //   the use of typesafe-config 1.3.0
  //   https://github.com/playframework/interplay/commit/73f7c9b434be180c27611aebb089d55f6445bcf5#commitcomment-11275807
  play-twirl-ref               : "playframework/twirl.git"
  spray-json-ref               : "spray/spray-json.git"
  // fixed sha from 2.10.x branch that has Scala 2.11 compatiblity patches merged
  scala-io-ref                 : "adriaanm/scala-io.git#community-build"
  json4s-ref                   : "json4s/json4s.git#v3.2.10_2.11"
  // TODO unfork: it replaces sys.error for unused dependency by println...
  playframework-ref            : "adriaanm/playframework.git#2.4.x"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // This pull request supports the fully-cross-versioned continuations plugin, shipped with 2.11+
  scala-arm-ref                : "jsuereth/scala-arm.git#pull/31/head"
  // fixed sha/tag (a compromise)
  slick-ref                    : "slick/slick.git#pull/686/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // There's no suitable release yet, so we depend on this commit. Upgrade to the next tagged version once released
  scala-refactoring-ref        : "scala-ide/scala-refactoring.git#44dca8b74808528693f884cfd3c5c9d3ed13e519"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.6"
  scalatest-ref                : "scalatest/scalatest.git#scala-2.11-M8"
  // zeromq-scala-binding's master includes this fix (and others), which break akka-zeromq (?):
  // https://github.com/valotrading/zeromq-scala-binding/commit/c2a8a87673a1a3468486d1af9a6460bfed25c7a2
  // therefore (which has a broken libdep of scalatest, however (cross full)):
  zeromq-scala-binding-ref     : "valotrading/zeromq-scala-binding.git#062e9438e322ec29d75b9649cb2aafa6ba3198a6"
  // fixed sha/tag (a compromise), the sha points at master that supports Scala 2.11
  spire-ref                    : "non/spire.git#3d2a41e91a1f6946fac63660f6157d4a6e4a281d"
  shapeless-ref                : "adriaanm/shapeless.git#community-build"
  scoverage-ref                : "scoverage/scalac-scoverage-plugin.git#1.0.2"
  sbt-ref                      : "adriaanm/sbt.git#community-build" // 0.13.7-M2 + drop ListBuffer.readOnly (after 0.13.7-M2, new dependencies were added --> TODO: add them here as welll )
  // ensime uses a rolling release to simplify distribution and launching from emacs
  ensime-ref                   : "ensime/ensime-server.git" //"#d73a6212e12d2f82c9daca3e5c60f8f9c4f31899"
  // this is commit corresponding to 1.3.0 release, unfortunely pimpathon doesn't tag its releases
  pimpathon-ref                : "stacycurl/pimpathon.git#d2354dd92f5481610f4610edba3574880b07263e"
  scalariform-ref              : "adriaanm/scalariform.git#community-build"
  scalamock-ref                : "adriaanm/scalamock.git#community-build"

  // tracking upstream (the ideal)
  akka-ref                     : "adriaanm/akka.git#community-build-2.12"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-xml-ref                : "scala/scala-xml.git"
  scala-swing-ref              : "scala/scala-swing.git#2.0.x"
  scala-records-ref            : "scala-records/scala-records.git"

  specs2-3-ref                 : "adriaanm/specs2.git#community-build-3.6" // "etorreborre/specs2.git#SPECS2-3.6.2"
  specs2-2-ref                 : "adriaanm/specs2.git#community-build-2.4" // "etorreborre/specs2.git#SPECS2-2.4.17"

  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "harrah/sbinary.git"
  sbt-republish-ref            : "typesafehub/sbt-republish.git"
  scalaz-ref                   : "scalaz/scalaz.git#series/7.1.x"
  scalaz-stream-ref            : "adriaanm/scalaz-stream.git#no-bintray" //"scalaz/scalaz-stream.git#release/0.7.1a"
  scodec-bits-ref              : "adriaanm/scodec-bits.git"
  discipline-ref               : "typelevel/discipline.git#v0.2"
  scala-js-ref                 : "scala-js/scala-js.git#v0.6.4"

  // version settings
  sbt-version-override         : "0.13.8"
}

vars {
  scalac-opts                  : ""
  scalac-opts                  : ${?scalac_opts}   // allows additional compiler options using the scala_ref environment
}

// NB: vars.base and vars.base.extra need to be defined using +=, in order to include the
// definitions in community-2.xx.x.dbuild
// The appendScalacOptions command is needed as a workaround for https://github.com/typesafehub/dbuild/issues/144
vars.base.extra.commands += "set commands += {\n  def appendScalacOptions(s: State, args: Seq[String]): State = {\n    val extracted = Project extract s\n    def appendDistinct[A](x: Seq[A], y: Seq[A]) = x.filterNot(y.contains) ++ y\n    import extracted._\n    val r = Project.relation(extracted.structure, true)\n    val allDefs = r._1s.toSeq\n    val projectScope = Load.projectScope(currentRef)\n    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct\n    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(orig => appendDistinct(orig, args)))\n    val session = extracted.session.appendRaw(redefined)\n    BuiltinCommands.reapply(session, structure, s)  \n  }\n  Command.args(\"appendScalacOptions\", \"<option>\")(appendScalacOptions)\n}"
vars.base.extra.commands += "appendScalacOptions "${vars.scalac-opts}

vars.ivyPat: ", [organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  01: "local"
  02: "maven-cache: https://scala-ci.typesafe.com/artifactory/central/"
  03: "typesafe-ivy-releases: https://dl.bintray.com/typesafe/ivy-releases/, [organisation]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly"
  04: "sbt-plugin-releases: https://dl.bintray.com/sbt/sbt-plugin-releases/"${vars.ivyPat}
  09: "dbuild-snapshots: http://typesafe.artifactoryonline.com/typesafe/temp-distributed-build-snapshots"${vars.ivyPat}
  10: "maven-central"
  11: "old-typesafe-maven-releases: https://dl.bintray.com/typesafe/maven-releases" // for play 2.3.9's netty-http-pipelining 1.1.2
  12: "ambiata-oss: https://ambiata-oss.s3.amazonaws.com/"${vars.ivyPat} // specs2's project plugins
  14: "Era7 maven releases: http://releases.era7.com.s3.amazonaws.com" // specs2's project plugins
  15: "Sonatype Public: https://oss.sonatype.org/content/groups/public/" // scodec-bits

  // temporary, enables the fix of https://github.com/sbt/sbt-web/pull/107/files
  // discussion here: https://github.com/sbt/sbt-web/pull/107#issuecomment-94004046
  13: "bintray-eed3si9n-sbt-plugins: https://dl.bintray.com/eed3si9n/sbt-plugins"${vars.ivyPat}
  17: "dbuild-plugins: http://dl.bintray.com/typesafe/temp-distributed-build-snapshots" // for genjavadoc
}

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 48
    failure: 72
  }
  build: {
    success: 48
    failure: 72
  }
}

// Topological sort of projects:
// No deps: browse, slick, genjavadoc-plugin, scala-js, scala-swing, scala-partest-interface, async, scalacheck, shapeless
//
// *depends* on scalacheck: scalaz, sbinary, scala-partest, scalatest
// *depends* on scalatest: scodec-bits, zeromq-scala-binding, scala-records, genjavadoc, scala-stm
//
// scalaz-stream depends on: scalacheck, scalatest, scalaz, scodec-bits

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: default
  space.to: [ default, specs2_36, specs2_24 ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [

  ${vars.base} {
    name: "scala-partest-interface",
    uri: "https://github.com/"${vars.scala-partest-interface-ref}
  }

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false // TODO enable tests
    // 0.13.8 chockes on the build definition, see https://github.com/nbronson/scala-stm/pull/45
    extra.sbt-version: "0.13.7"
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}
  }

  ${vars.base} {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
    // [scalaz] [error] Could not run test scalaz.NeedTest: java.lang.AssertionError: false !== true
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: scalaz-stream
    uri: "https://github.com/"${vars.scalaz-stream-ref}
    extra.run-tests: false // TODO enable tests
    // seems to get stuck after [info] + toInputStream.after close read should return -1: OK, proved property.
    // The stack dump looks like this for minutes on end:
    // ```
    // at scalaz.stream.AsyncTopicSpec$$$Lambda$370/1411106347.apply(Unknown Source)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$8(Process.scala:61)
    // at scalaz.stream.Process$class$$Lambda$205/214494001.apply(Unknown Source)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$13(Process.scala:115)
    // at scalaz.stream.Process$class$$Lambda$240/283752252.apply(Unknown Source)
    // at scalaz.stream.Util$.Try(Util.scala:38)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$12(Process.scala:115)
    // at scalaz.stream.Process$class$$Lambda$239/1861849028.apply(Unknown Source)
    // at scalaz.Trampoline$.scalaz$Trampoline$$$anonfun$28(Free.scala:234)
    // at scalaz.Trampoline$$$Lambda$230/516810462.apply(Unknown Source)
    // at scalaz.Free.scalaz$Free$$$anonfun$15(Free.scala:172)
    // at scalaz.Free$$Lambda$221/2004765452.apply(Unknown Source)
    // at scalaz.Free.go2$1(Free.scala:119)
    // at scalaz.Free.go(Free.scala:122)
    // at scalaz.Free.run(Free.scala:172)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$9(Process.scala:84)
    // at scalaz.stream.Process$class$$Lambda$237/879163424.apply(Unknown Source)
    // at scalaz.stream.Util$.Try(Util.scala:38)
    // ```
  }

  ${vars.base} {
    name: scodec-bits
    uri: "https://github.com/"${vars.scodec-bits-ref}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"] // TODO: preemptive
      commands += "set scalacOptions in coreJVM := Seq(\"-Yopt:l:classpath\", \"-deprecation\", \"-encoding\", \"UTF-8\", \"-feature\", \"-unchecked\", \"-Xlint\", \"-Yno-adapted-args\", \"-Ywarn-dead-code\", \"-Ywarn-numeric-widen\", \"-Ywarn-value-discard\", \"-Xfuture\", \"-Ywarn-unused-import\")"
      run-tests: false   // TODO: preemptive
    }
  }

  ${vars.base} {
    name: "scala-records"
    uri: "https://github.com/"${vars.scala-records-ref}
    extra.exclude: ["coreJS", "benchmarks"]
  }

  ${vars.base} {
    name: "zeromq-scala-binding"
    uri: "https://github.com/"${vars.zeromq-scala-binding-ref}
    extra: ${vars.base.extra} { run-tests: false }
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: ${vars.base.extra} {
      projects: ["scalatest"]
      commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
      run-tests: false // TODO enable tests
    }
  }

  ${vars.base} {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
  }

  ${vars.base} {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: ${vars.base.extra} {
      projects: ["tests","javaOut"]
      run-tests: false // TODO enable tests
    }
  }

  // TODO
  // akka-actor has errors in documentation task
  // akka-stream-experimental can't find akka-actor??
  // zeromq fails on 2.12 as well
  ${vars.base} {
   name: "akka"
   uri:  "https://github.com/"${vars.akka-ref}
   extra: ${vars.base.extra} {
     options: ["-Dakka.genjavadoc.enabled=true", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
     projects: [ "akka-actor", "akka-osgi", "akka-testkit", "akka-actor-tests", "akka-remote", "akka-mailboxes-common", "akka-file-mailbox", "akka-durable-mailboxes", "akka-multi-node-testkit", "akka-remote-tests", "akka-slf4j", "akka-camel", "akka-cluster", "akka-persistence-experimental", "akka-contrib", "akka-kernel" ] //  , "akka-stream-experimental", "akka-scala-nightly"
     run-tests: false // TODO enable tests
   }
  }

  ${vars.base} {
    name:   "scala-refactoring",
    uri:    "https://github.com/"${vars.scala-refactoring-ref},
    extra: ${vars.base.extra} {
      directory: "org.scala-refactoring.library"
      run-tests: false // TODO enable tests
    }
  }

  // TODO
  // broken -- does not compile due to source incompat lang change??
  // ${vars.base} {
  //   name:   "scalariform",
  //   uri:    "https://github.com/"${vars.scalariform-ref}
  //   extra.sbt-version: ${vars.sbt-version-override}
  //   // avoid building misc subproject that depends on Swing (and is not needed by any other project)
  //   extra.projects: ["scalariform"]
  //   extra.run-tests: false
  // }

  //
  // Typesafe-developed projects: degvelopment branches / master / unstable releases
  //
  ${vars.base} {
    name: "async"
    uri: "https://github.com/"${vars.async-ref}
    extra.run-tests: false // TODO: ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  ${vars.base} {
    name: "slick"
    uri:  "https://github.com/"${vars.slick-ref}
  }

  ${vars.base} {
    name:   "browse",
    uri:    "https://github.com/"${vars.browse-ref}
    extra.commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
    extra.exclude: ["test", "testLink"]
  }

  ${vars.base} {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
  }


  ${vars.base} {
    name:   "scala-js",
    uri:    "http://github.com/"${vars.scala-js-ref}
    extra: {
      projects: [ tools, testSuite ]
      // - Disable compiler/test because it is very fragile.
      commands: ["set test in (Build.compiler, Test) := {}"]
    }
  }
]
}

// no deps: scala-logging-api
// scala-logging-slf4j depends on: scala-logging-api
// scoverage depends on: scala-logging-slf4j, scalacheck, scalatest
// specs2 depends on: scalacheck, scalatest, scalaz, scalaz-stream, scodec-bits, shapeless, scoverage
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_24
  space.to: [ specs2_24 ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [

  ${vars.base} {
    name: specs2_24
    uri: "https://github.com/"${vars.specs2-2-ref}
    extra.projects: ["specs2"] // so that it actually publishes org.specs2 % specs2? -- needed to put some random artifacts in the jar: https://github.com/typesafehub/dbuild/issues/173
    extra.run-tests: false // TODO: at least SnippetsTest is failing.
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/"${vars.discipline-ref}
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/"${vars.scoverage-ref}
    extra: ${vars.base.extra} {
      run-tests: false // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }


// scala-logging-slf4j is used by scoverage, but:
// - scala-logging-slf4j v2.1.2 won't compile (not found: value LoggerMacro)
// - and v3.0.0 changed the artifacts, so we grab v2.1.2 via Ivy instead.
//  ${vars.base} {
//    name: "scala-logging"
//    uri:  "https://github.com/typesafehub/scala-logging.git#v2.1.2"
//  }

  {
    name:   "scala-logging-slf4j"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2"
  }

  {
    name:   "scala-logging-api"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2"
  }
]}


build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_36
  space.to: [ specs2_36 ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [
  ${vars.base} {
    name: specs2_36
    uri: "https://github.com/"${vars.specs2-3-ref}
    extra.projects: ["specs2"] // so that it actually publishes org.specs2 % specs2? -- needed to put some random artifacts in the jar: https://github.com/typesafehub/dbuild/issues/173
    extra.run-tests: false // TODO: at least SnippetsTest is failing.
  }
]}


//
// sbt depends on: browse, sbinary, specs2
// sbt-republish depends on: sbt
//
// play-twirl depends on: sbt
// Play2-core depends on: akka, play-twirl, scala-stm, specs2 (3.6)
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_36
  space.to: [ play, specs2_36 ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [

// TODO upgrade to latest
// stuck on 0.13.7-M2 because we'll need to add more dependencies to upgrade
// [sbt] [error] **** Missing dependency: the library org.scala-sbt#serialization is not provided (in space "default") by any project in this configuration file.
// [sbt] [error] In order to control which version is used, please add the corresponding project to the build file
// [sbt] [error] (or use "check-missing:false" to ignore (not recommended)).
  ${vars.base} {
   name:   "sbt",
   uri:    "https://github.com/"${vars.sbt-ref}
   extra: ${vars.base.extra} {
     run-tests: false // TODO enable tests
     commands += "set every javaVersionPrefix in javaVersionCheck := Some(\"1.8\")"
     exclude: ["root","launch-test"]
   }
  }

// TODO: update to current sbt version?? what is it for anyway? (IDE?)
// ${vars.base} {
//   name:   "sbt-republish",
//   uri:    "http://github.com/"${vars.sbt-republish-ref}
//   space: default // We don't compile plugins, for 0.12/2.9.x
// }

  ${vars.base} {
    name:   "zinc",
    uri:    "https://github.com/"${vars.zinc-ref}
  }

  ${vars.base} {
    name: "play-twirl",
    extra.exclude: [ "plugin" ]
    uri: "https://github.com/"${vars.play-twirl-ref}
  }

// TODO: fix genbcode crash
// [Play2-core] [error] Error while emitting Binding.scala
// java.lang.AssertionError: assertion failed: Invalid interfaces in Lplay/inject/NamedImpl;: List(Ljavax/inject/Named;, Ljava/io/Serializable;)
// 	at scala.Predef$.assert(Predef.scala:165)
// 	at scala.tools.nsc.backend.jvm.BTypes$ClassBType.checkInfoConsistency(BTypes.scala:850)
// 	at scala.tools.nsc.backend.jvm.BTypes$ClassBType.info_$eq(BTypes.scala:827)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols.scala$tools$nsc$backend$jvm$BTypesFromSymbols$$setClassInfo(BTypesFromSymbols.scala:344)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols$$anonfun$classBTypeFromSymbol$4.apply(BTypesFromSymbols.scala:120)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols$$anonfun$classBTypeFromSymbol$4.apply(BTypesFromSymbols.scala:112)
// 	at scala.collection.MapLike$class.getOrElse(MapLike.scala:128)
// 	at scala.collection.concurrent.TrieMap.getOrElse(TrieMap.scala:633)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols.classBTypeFromSymbol(BTypesFromSymbols.scala:112)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols$$anonfun$primitiveOrClassToBType$1$2.apply(BTypesFromSymbols.scala:153)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols$$anonfun$primitiveOrClassToBType$1$2.apply(BTypesFromSymbols.scala:153)
// 	at scala.collection.MapLike$class.getOrElse(MapLike.scala:128)
// 	at scala.collection.AbstractMap.getOrElse(Map.scala:59)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols.primitiveOrClassToBType$1(BTypesFromSymbols.scala:153)
// 	at scala.tools.nsc.backend.jvm.BTypesFromSymbols.typeToBType(BTypesFromSymbols.scala:168)
// 	at scala.tools.nsc.backend.jvm.BCodeHelpers$BCInnerClassGen$class.toTypeKind(BCodeHelpers.scala:355)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.toTypeKind(BCodeSkelBuilder.scala:50)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.tpeTK(BCodeSkelBuilder.scala:85)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genApply(BCodeBodyBuilder.scala:599)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genLoad(BCodeBodyBuilder.scala:312)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder$$anonfun$genLoadArguments$1.apply(BCodeBodyBuilder.scala:918)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder$$anonfun$genLoadArguments$1.apply(BCodeBodyBuilder.scala:918)
// 	at scala.collection.immutable.List.foreach(List.scala:381)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genLoadArguments(BCodeBodyBuilder.scala:918)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genNormalMethodCall$1(BCodeBodyBuilder.scala:676)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genApply(BCodeBodyBuilder.scala:712)
// 	at scala.tools.nsc.backend.jvm.BCodeBodyBuilder$PlainBodyBuilder.genLoad(BCodeBodyBuilder.scala:312)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.emitNormalMethodBody$1(BCodeSkelBuilder.scala:621)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.genDefDef(BCodeSkelBuilder.scala:655)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.gen(BCodeSkelBuilder.scala:525)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder$$anonfun$gen$1.apply(BCodeSkelBuilder.scala:527)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder$$anonfun$gen$1.apply(BCodeSkelBuilder.scala:527)
// 	at scala.collection.immutable.List.foreach(List.scala:381)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.gen(BCodeSkelBuilder.scala:527)
// 	at scala.tools.nsc.backend.jvm.BCodeSkelBuilder$PlainSkelBuilder.genPlainClass(BCodeSkelBuilder.scala:125)
// 	at scala.tools.nsc.backend.jvm.GenBCode$BCodePhase$Worker1.visit(GenBCode.scala:183)
// 	at scala.tools.nsc.backend.jvm.GenBCode$BCodePhase$Worker1$$anonfun$run$1.apply$mcV$sp(GenBCode.scala:137)
// 	at scala.tools.nsc.Global$GlobalPhase.withCurrentUnit(Global.scala:431)

  ${vars.base} {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    extra: ${vars.base.extra} {
      projects: ["Play"]
      directory: "framework"
      run-tests: false // TODO enable tests
      // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
      // and we get double definition error
      commands += "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
    }
  }
]}


// no deps: json4s
//
// parboiled depends on: scalatest
//
// pimpathon depends on: scala-logging-slf4j, scalacheck, scalatest, scalaz, scoverage
// *depends* on specs2 (3.6): lift-json
//
// spray depends on: Play2-core, json4s, lift-json, parboiled, spray-json, spray-twirl
//
// *depends* on specs2 (2.4): scalamock, spray-twirl, discipline, spray-json
//
// ensime depends on: spray, slick, scoverage, scalamock, pimpathon
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_24
  space.to: [ ensime ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [

  ${vars.base} {
    name: "parboiled",
    uri: "https://github.com/"${vars.parboiled-ref},
    extra: ${vars.base.extra} {
      projects: ["parboiled-scala"]
      // TODO: tests do not compile due to source incompatible change in scalatest
      // TestNGSuite became a class but was a trait
      run-tests: false
    }
  }

  //  TODO: does not compile on java 8
  // ${vars.base} {
  //   name: "json4s",
  //   uri: "https://github.com/"${vars.json4s-ref}
  //   extra.projects: ["json4s-native", "json4s-jackson"]
  // }

  ${vars.base} {
    name: "lift-json",
    uri: "https://github.com/"${vars.lift-framework-ref}
    extra.projects: ["lift-json"]
    // TODO: test failure:
    //[info] [info] ! Either can't be deserialized with type hints
    //[info] [error]  ClassNotFoundException: : scala.util.Left  (Formats.scala:223)
    // !!!: probably we should investigate
    extra.run-tests: false
  }

  ${vars.base} {
    name: "spray-twirl",
    uri: "https://github.com/"${vars.spray-twirl-ref}
    extra.projects: ["twirl-api"]
  }

  ${vars.base} {
    name: "spray-json",
    uri: "https://github.com/"${vars.spray-json-ref}
  }

  // TODO: stuck on json4s
  // ${vars.base} {
  //   name: "spray",
  //   uri: "https://github.com/"${vars.spray-ref},
  //   extra: ${vars.base.extra} {
  //     // skip tests for now; see https://github.com/scala/community-builds/issues/110
  //     run-tests: false
  //     // disable subprojects depending on shapeless 1
  //     exclude: ["spray-routing", "spray-routing-tests"]
  //     // disable running sphinx, it would be great if dbuild
  //     // oferred a mechanism for excluding particular project (e.g. docs)
  //     commands += "set SphinxSupport.sphinxCompile in docs := Seq.empty"
  //     // disable parallel execution of tests as a work around for non-deterministic
  //     // failures, see: https://github.com/scala/community-builds/pull/69#issuecomment-63324597
  //     settings += "parallelExecution in GlobalScope in Test := false"
  //   }
  // }

  ${vars.base} {
    name:   "pimpathon",
    uri:    "https://github.com/"${vars.pimpathon-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }
  ${vars.base} {
    name:   "scalamock",
    uri:    "https://github.com/"${vars.scalamock-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.exclude: [ "specs2", "examples" ]
  }


  // TODO: stuck on spray
  // ${vars.base} {
  //   name:   "ensime",
  //   uri:    "https://github.com/"${vars.ensime-ref}
  //   extra.sbt-version: ${vars.sbt-version-override}
  //   // scaladoc fails with
  //   // [ensime] [info] Compiling 73 Scala sources to .../target/scala-2.11/classes...
  //   // [ensime] [info] Main Scala API documentation to .../target/scala-2.11/api...
  //   // [ensime] [error] .../src/main/scala/org/ensime/indexer/SourceResolver.scala:55: value toMultiMap is not a member of scala.collection.immutable.Set[(org.ensime.indexer.PackageName, org.apache.commons.vfs2.FileObject)]
  //   // [ensime] [error] possible cause: maybe a semicolon is missing before `value toMultiMap'?
  //   // [ensime] [error]   }.toMultiMap[Set]
  //   extra.commands: "set every sources in doc in Compile := List()"
  // }

]}

// spire depends on: discipline, specs2
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_24
  space.to: [ spire ]
  extraction-version: "2.11.6"
  sbt-version: ${vars.sbt-version-override}
  projects: [

  ${vars.base} {
    name: "spire"
    uri: "https://github.com/"${vars.spire-ref}
    // TODO: tests crash with:
    // [info] [error] Could not run test spire.laws.LawTests:
    // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
    extra.run-tests: false
  }
]}
