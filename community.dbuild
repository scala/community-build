//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/typesafehub/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}
include file("project-refs.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.12"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val projectScope = Load.projectScope(currentRef)
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// resolvers

vars.ivyPat: ", [organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  01: "local"

  02: "dbuild: https://scala-ci.typesafe.com/artifactory/dbuild/"
  03: "dbuild-ivy: https://scala-ci.typesafe.com/artifactory/dbuild-ivy/"${vars.ivyPat}
  04: "dbuild-unchecked: https://scala-ci.typesafe.com/artifactory/dbuild-unchecked/" // for sbt plugins not available on ivy (they'll fail the pom check on the `dbuild` cache repo above)

  05: "scala-pr-validation-snapshots: https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots"

  // without this Scala.js can't find the Scala library sources. TODO: why? Artifactory config issue?
  20: "private-repo: https://scala-ci.typesafe.com/artifactory/scala-release-temp/"
}

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  projects: [
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      // override scalaVersion here since otherwise we get
      // whatever random Scala version the module has
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        extra.commands: "set scalaVersion := \""${vars.scala-version}"\""
      }
    ]
  }
]}


//// everything else

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-partest-interface"
    uri:  ${vars.uris.scala-partest-interface-uri}
  }

  ${vars.base} {
    name: "scala-partest"
    uri:  ${vars.uris.scala-partest-uri}
  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
  }

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
  }

  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
  }

  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time;
  // no commits on master since April 2015 (checked October 2016)
  ${vars.base} {
    name: "scala-stm"
    uri:  ${vars.uris.scala-stm-uri}
    // a minor source incompatibility with ScalaTest 3.0, therefore:
    extra.run-tests: false
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.projects: ["coreJVM"]
    // optimizer related. Lukas may want to revisit before 2.12 final
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
    // TODO Failed tests: shapeless.CachedTest
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra: ${vars.base.extra} {
      exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
      test-tasks: "compile" // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
    // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
    // we use "assert" as an identifier there. We disable doc building to avoid that.
    extra.commands: ${vars.default-commands} [ "set publishArtifact in packageDoc := false" ]
  }

  ${vars.base} {
    name: "scalaz"
    uri:  ${vars.uris.scalaz-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: "scodec"
    uri:  ${vars.uris.scodec-uri}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: ["coreJS"]
  }

  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra: ${vars.base.extra} {
      projects: ["scalatest", "scalactic"]
      test-tasks: ["compile"] // TODO enable tests
    }
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
    // TODO Failed tests: com.typesafe.genjavadoc.BasicSpec (looks like maybe the test is too sensitive to ordering?)
    extra.test-tasks: ["compile"]
  }

  // frozen at an October 2016 commit for now, before akka-http got moved to a separate repo.
  // addressing that properly is https://github.com/scala/community-builds/issues/356
  ${vars.base} {
    name: "akka"
    uri:  ${vars.uris.akka-uri}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-actor"]
    }
  }

  ${vars.base} {
    name: "scalariform"
    uri: ${vars.uris.scalariform-uri}
    // warnings reported upstream at https://github.com/scala-ide/scalariform/issues/234
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
    // tests don't compile on ScalaTest 3.0. reported upstream at
    // https://github.com/scala-ide/scalariform/issues/232
    extra.run-tests: false
  }

  ${vars.base} {
    name: "async"
    uri:  ${vars.uris.async-uri}
    // TODO: ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "slick"
    uri:  ${vars.uris.slick-uri}
    // without this dbuild doesn't pick up that one of the subprojects has this dependency.
    // it doesn't even make sense; it seems to me that testNGSettings should not be adding
    // a dependency of the plugin to the libraryDependencies of the test code.
    // the line in question is:
    //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
    // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
    deps.inject: ["de.johoop#sbt-testng-interface"]
    // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
    extra.exclude: ["osgitests"]
  }

  ${vars.base} {
    name: "sbt-testng-interface"
    uri:  ${vars.uris.sbt-testng-interface-uri}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
  }

  // this is a very old, not really maintained project.  the sbt/sxr repo
  // has some newer commits, but hasn't been updated (as of October 2016)
  // to support Scala 2.12.  if 2.12 support starts happening, we could
  // point to the new repo. if it doesn't, I don't think this entry is worth
  // maintaining. I will leave it in place, but if it starts acting up,
  // I think we could just drop it.
  ${vars.base} {
    name: "browse"
    uri:  ${vars.uris.browse-uri}
  }

  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
    // TODO forked (from sbt/sbinary) to remove bintray gunk that doesn't work with dbuild
  }

  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    extra: ${vars.base.extra} {
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      options: ["-Xmx2048m"]
      projects: [ tools, testSuite, stubs ]
      commands: ${vars.default-commands} [
        // - Disable compiler/test because it is very fragile.
        "set test in (Build.compiler, Test) := {}"
        // - Disable fatal Scaladoc warnings, also fragile
        "removeScalacOptions -Xfatal-warnings"
        // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
        //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
        //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
        "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := NodeJSEnv(executable = \""${vars.node}"\").value.withSourceMap(false))"
      ]
    }
  }

  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name: "acyclic"
    uri:  ${vars.uris.acyclic-uri}
  }

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "fastparse"
    uri:  ${vars.uris.fastparse-uri}
    // disable sbt-coursier plugin; https://github.com/scala/community-builds/issues/294
    // no Scala.js plz
    extra.projects: ["fastparseJVM"]
    // TODO: tests depend on lambda toString looking like e.g `<function1>`
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "macro-paradise"
    uri:  ${vars.uris.macro-paradise-uri}
    // TODO use 2.12.x branch once needed changes are merged there?
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  ${vars.base} {
    name: "scalaprops"
    uri:  ${vars.uris.scalaprops-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kxbmap-configs"
    uri:  ${vars.uris.kxbmap-configs-uri}
    extra.exclude: [
      "docs"  // because we don't have Tut (yet?)
      "bench" // not really necessary and would pull in a JMH dependency
    ]
  }

  ${vars.base} {
    name: "fs2"
    uri:  ${vars.uris.fs2-uri}
    // current "master" as of Sep 2016
    extra.exclude: [
      "coreJS" // no Scala.js please
      "docs"   // because we don't have Tut (yet?)
      "benchmark" // not really necessary and would pull in a JMH dependency
    ]
  }

  // forked because of https://github.com/typelevel/cats/issues/1396
  ${vars.base} {
    name: "cats"
    uri:  ${vars.uris.cats-uri}
    // this is only some of Cats. we should try and add more
    extra.projects: ["coreJVM", "macrosJVM"] // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // uses wartremover which we can't handle, ticket on that is
  // https://github.com/scala/community-builds/issues/364
  // worked around for now by freezing at 2a75226 (September 2016)
  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
  }

  // if this starts giving us trouble, it would be OK to just drop it,
  // as per Mathias's comments at https://github.com/sirthias/parboiled/pull/100
  // ("it's quite unmaintained. Also, I don't think there are any real users left")
  // We have parboiled2 below.
  ${vars.base} {
    name: "parboiled"
    uri:  ${vars.uris.parboiled-uri}
    extra.projects: ["parboiled-scala"]
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "parboiled2"
    uri:  ${vars.uris.parboiled2-uri}
    extra.projects: ["parboiledJVM", "examples"]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
  }

  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
  }

  // tracking "develop" branch.
  // try master instead if develop proves too fragile?
  ${vars.base} {
    name: "twitter-util"
    uri:  ${vars.uris.twitter-util-uri}
    extra.exclude: [
      // this isn't really necessary and would pull in a JMH dependency
      "util-benchmark"
    ]
    // recommended at https://github.com/twitter/util/issues/173:
    // "We use that when we don't think the tests will be reliable in a ci environment"
    extra.options: ["-DSKIP_FLAKY=true"]
    // they're still on ScalaTest 2, we're on ScalaTest 3 here, so the tests don't even
    // compile (as of October 2016).  when the time comes to re-enable this, watch
    // out for https://github.com/twitter/util/issues/180 though
    extra.run-tests: false
  }

  // note that we don't have MiMa in the JDK6 build.  I tried but it
  // was running out of PermGen when running the functional tests.
  // rather than sink time into investigating, just confining it to
  // JDK8 world seems perfectly fine.
  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // normally MiMa runs on 2.10 (because sbt 0.13 does), so the branch won't
    // be merged onto master for quite a while yet
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
    // on master, the build was recently redone and no longer works with 0.13.12.
    // that work hasn't been merged onto the 2.12 branch yet.  probably by the time
    // that happens, we'll already have moved to 0.13.13 final here anyway
    // extra.sbt-version: "0.13.13-RC3"
  }

// TODO Spire is commented out because of https://github.com/non/spire/issues/592
// and Breeze because it depends on Spire
//   ${vars.base} {
//     name: "spire"
//     uri:  ${vars.uris.spire-uri}
//     // TODO: tests crash with:
//     // [info] [error] Could not run test spire.laws.LawTests:
//     // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
//     extra.test-tasks: ["compile"]
//     // hopefully avoid intermittent OutOfMemoryErrors during compilation
//     extra.options: ["-Xmx2560m"]
//     extra.projects: ["spireJVM"]  // no Scala.js please
//     // no longer exists in 2.12
//     extra.commands: ${vars.default-commands} [
//       "removeScalacOptions -Yinline-warnings"
//     ]
//   }
//
//   ${vars.base} {
//     name: "breeze"
//     uri:  ${vars.uris.breeze-uri}
//     // failing tests reported upstream at https://github.com/scalanlp/breeze/issues/587
//     extra.test-tasks: ["compile"]
//   }

  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    extra.test-tasks: ["compile"] // TODO: ??? - hasn't been tried lately
    extra.commands: ${vars.default-commands} [
      // too fragile? TODO: I got a non-exhaustive match warning that
      // could conceivably indicate some real regression. or maybe it's
      // just a version mismatch for some library? who knows
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "ssl-config"
    uri:  ${vars.uris.ssl-config-uri}
  }

  ${vars.base} {
    name: "spray-json"
    uri:  ${vars.uris.spray-json-uri}
  }

  ${vars.base} {
    name: "spray-json-shapeless"
    uri:  ${vars.uris.spray-json-shapeless-uri}
  }

  // this is separate from "akka" because there is a circular dependency between
  // the akka and ssl-config repos. (akka-http depends on ssl-config-akka which
  // depends on akka-actor)
  ${vars.base} {
    name: "akka-more"
    uri:  ${vars.uris.akka-more-uri}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-scala-nightly"]
      exclude: [
        "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
        "akka-actor"  // because we already built it in "akka"
        "akka-bench-jmh"  // we'd have to add a resolver to get the JMH dependency - ST 8/17/15
      ]
      // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
      commands: ${vars.default-commands} [
        "set sources in doc in Compile in httpCore := List()"
      ]
    }
  }

  ${vars.base} {
    name: "scalikejdbc"
    uri:  ${vars.uris.scalikejdbc-uri}
    // don't build sbt plugin
    extra.exclude: ["mapper-generator"]
  }

  ${vars.base} {
    name: "scopt"
    uri:  ${vars.uris.scopt-uri}
  }

  ${vars.base} {
    name: "twirl"
    uri:  ${vars.uris.twirl-uri}
    extra.exclude: [ "plugin", "apiJS" ]
  }

  ${vars.base} {
    name: "play-doc"
    uri:  ${vars.uris.play-doc-uri}
  }

  ${vars.base} {
    name: "play2-core"
    uri:  ${vars.uris.play2-core-uri}
    extra: ${vars.base.extra} {
      // TODO: enable more projects? these are just a few that seemed especially high-value.
      // we tried including "Play-Integration-Test" but hit a mysterious StackOverflowError
      // in scala.tools.nsc.javac.JavaScanners; see https://github.com/scala/community-builds/issues/304
      projects: ["Play", "Play-Test", "Play-WS"]
      exclude: ["SBT-Plugin"]
      directory: "framework"
      commands: ${vars.default-commands} [
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
        // there was some Scaladoc error here I didn't bother to look into
        "set sources in doc in Compile in PlayProject := List()"
      ]
    }
  }

  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    // this is the current "master" branch (as of Oct 2016)
    extra.projects: ["json4s-native", "json4s-jackson"] // TODO: exclude subprojects we don't want, rather than naming a few we want. probably adding more would work?
  }

  ${vars.base} {
    name: "lift-json"
    uri:  ${vars.uris.lift-json-uri}
    // TODO unfork once https://github.com/lift/framework/pull/1812 gets merged
    extra.projects: ["lift-json"]
  }

  ${vars.base} {
    name: "jawn"
    uri:  ${vars.uris.jawn-uri}
    // omitted TODO: play
    // omitted: rojoma-v3, rojoma, benchmark, argonaut
    // (we have Argonaut in the community build, but it depends on jawn! dbuild
    // doesn't like the circularity. I think we could break it by having two jawn entries,
    // one for the core and one for the extras, but I haven't tried yet)
    extra.projects: ["ast", "parser", "json4s", "spray"]
  }

  ${vars.base} {
    name: "scalamock"
    uri:  ${vars.uris.scalamock-uri}
    // TODO forked because specs2 support requires specs2 2.x but we only
    // have 3.x here now. and because excluding that subproject here isn't enough
    // (see diffs in the fork for details)
    // not sure why "examples" is also excluded? maybe it has specs2 stuff too?
    extra.exclude: [ "specs2", "examples" ]
  }

  ${vars.base} {
    name: "argonaut"
    uri:  ${vars.uris.argonaut-uri}
    extra.exclude: [
      // fails to declare its scala-parser-combinators dependency,
      // and anyway we don't want to run benchmarks
      "argonaut-benchmark"
      // I got into trouble trying to add this -- it depended on
      // cats-laws which needs ScalaCheck 1.13
      "argonaut-cats"
    ]
  }

  ${vars.base} {
    name: "monocle"
    uri:  ${vars.uris.monocle-uri}
    // TODO move to master once full 2.12 support is there, and try to
    // enable more subprojects besides just these few
    extra.projects: ["coreJVM", "macrosJVM", "lawJVM"]
  }

  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    // TODO add more projects? hasn't been tried yet
    extra.projects: ["platformJVM"]
  }

  ${vars.base} {
    name: "scala-continuations"
    uri:  ${vars.uris.scala-continuations-uri}
  }

  // using xuwei-k's fork which has changes needed for 2.12 compat,
  // submitted upstream: https://github.com/veact/scala-ssh/pull/5
  ${vars.base} {
    name: "scala-ssh"
    uri:  ${vars.uris.scala-ssh-uri}
    // Failed tests: com.decodified.scalassh.SshClientSpec
    extra.test-tasks: "compile"
  }

  // forked for a small build change, contributed upstream:
  // https://github.com/FasterXML/jackson-module-scala/pull/290
  ${vars.base} {
    name: "jackson-module-scala"
    uri:  ${vars.uris.jackson-module-scala-uri}
    // we're lying and telling it Java 8 is Java 7, but in this context
    // the lie isn't important
    extra.options: ["-DJAVA7_HOME="${JAVA_HOME}]
  }

  ${vars.base} {
    name: "scalameter"
    uri:  ${vars.uris.scalameter-uri}
    check-missing: false
    deps.ignore: [
      // doesn't support 2.12 (yet?)
      "org.mongodb#casbah"
      // this one is unmaintained and doesn't support Scala 2.12...
      "com.decodified#scala-ssh"
    ]
    deps.inject: [
      // ...but this one does
      "com.veact#scala-ssh"
    ]
  }

  ${vars.base} {
    name: "scala-json-ast"
    uri:  ${vars.uris.scala-json-ast-uri}
    // but why does scalafmt turn up in libraryDependencies at all?
    // see https://github.com/olafurpg/scalafmt/issues/485#issuecomment-253601375
    check-missing: false
    deps.ignore: [
      "com.geirsson#scalafmt-cli"
      "com.geirsson#scalafmt"
    ]
    // no Scala.js please, and no benchmarks either
    extra.projects: ["scalaJsonASTJVM"]
  }

]}
