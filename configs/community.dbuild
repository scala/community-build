//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/typesafehub/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.15"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val projectScope = Load.projectScope(currentRef)
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  projects: [
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      // override scalaVersion here since otherwise we get
      // whatever random Scala version the module has
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        extra.commands: ${vars.default-commands} [
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xmlJVM"]
      }
    ]
  }
]}


//// everything else

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    extra: ${vars.base.extra} {
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      options: ["-Xmx2048m"]
      projects: [ tools, testSuite, stubs ]
      commands: ${vars.default-commands} [
        // - Disable compiler/test because it is very fragile.
        "set test in (Build.compiler, Test) := {}"
        // - Disable fatal Scaladoc warnings, also fragile
        "removeScalacOptions -Xfatal-warnings"
        // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
        //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
        //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
        "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
      ]
    }
  }

  // frozen (June 2017) at an April 2017 commit; newer commits
  // broke the scalacheck subproject of specs2
  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
    // because of new unused warnings in 2.12.2
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra: ${vars.base.extra} {
      projects: ["scalatest", "scalactic"]
      test-tasks: ["compile"] // TODO run tests -- need to exclude browser-based tests somehow
    }
  }

  ${vars.base} {
    name: "scala-partest-interface"
    uri:  ${vars.uris.scala-partest-interface-uri}
  }

  ${vars.base} {
    name: "scala-partest"
    uri:  ${vars.uris.scala-partest-uri}
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ] # Deprecated optimizer settings

  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
  }

  // tracking master as of December 2016.  if master proves unstable,
  // we could try "release-0.8" (or a newer branch if there is one)
  ${vars.base} {
    name: "scala-stm"
    uri:  ${vars.uris.scala-stm-uri}
    // scala.concurrent.stm.CommitBarrierSuite failing;
    // reported upstream at https://github.com/nbronson/scala-stm/issues/53
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.projects: ["coreJVM"]
    // optimizer related. Lukas may want to revisit before 2.12 final
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
    // TODO Failed tests: shapeless.CachedTest
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra: ${vars.base.extra} {
      exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
      test-tasks: "compile" // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
    // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
    // we use "assert" as an identifier there. We disable doc building to avoid that.
    extra.commands: ${vars.default-commands} [ "set publishArtifact in packageDoc := false" ]
  }

  ${vars.base} {
    name: "scalaz"
    uri:  ${vars.uris.scalaz-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
    extra.exclude: [
      // we're on ScalaCheck 1.13 not 1.12
      "scalacheck-binding_1_12JVM"
    ]
  }

  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: "scodec"
    uri:  ${vars.uris.scodec-uri}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: [
      "coreJS"  // no Scala.js please
      "root"    // dbuild thinks it tries to publish root#root
    ]
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
    // TODO Failed tests: com.typesafe.genjavadoc.BasicSpec (looks like the test is too sensitive to ordering)
    // TODO if we re-enable tests we'll probably also need to patch the version logic in BasicSpec.scala,
    // something like https://github.com/SethTisue/genjavadoc/commit/509628e5437dfe9b90f4715a4a74274a4cc79adf
    extra.test-tasks: ["compile"]
  }

  // tracking release-2.4 because master is 2.5 and breaking changes are happening
  ${vars.base} {
    name: "akka"
    uri:  ${vars.uris.akka-uri}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-actor"]
      commands: ["set every apiURL := None"]  // https://github.com/scala/community-builds/issues/373
    }
  }

  // tracking release-2.4 because master is 2.5 and breaking changes are happening
  // this is separate from "akka" because there is a circular dependency between
  // the akka and ssl-config repos
  ${vars.base} {
    name: "akka-more"
    uri:  ${vars.uris.akka-more-uri}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-scala-nightly"]
      commands: ["set every apiURL := None"]  // https://github.com/scala/community-builds/issues/373
      exclude: [
        "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
        "akka-actor"  // because we already built it in "akka"
        "akka-bench-jmh"  // we'd have to add a resolver to get the JMH dependency - ST 8/17/15
      ]
      // TODO wip on this at https://github.com/scala/community-builds/pull/317
      test-tasks: ["compile"]
    }
  }

  // forked (December 2016) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "akka-http"
    uri:  ${vars.uris.akka-http-uri}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false"]
      // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
      commands: ${vars.default-commands} [
        "set sources in doc in Compile in httpCore := List()"
      ]
      // "HTTP is sadly very timing sensitive we're working on improving its stability regularly,
      // OK to disable it for now." - Konrad M, October 2016
      test-tasks: ["compile"]
    }
  }

  ${vars.base} {
    name: "scalariform"
    uri: ${vars.uris.scalariform-uri}
    // warnings reported upstream at https://github.com/scala-ide/scalariform/issues/234
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  ${vars.base} {
    name: "async"
    uri:  ${vars.uris.async-uri}
    // TODO: ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "slick"
    uri:  ${vars.uris.slick-uri}
    // without this dbuild doesn't pick up that one of the subprojects has this dependency.
    // it doesn't even make sense; it seems to me that testNGSettings should not be adding
    // a dependency of the plugin to the libraryDependencies of the test code.
    // the line in question is:
    //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
    // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
    deps.inject: ["de.johoop#sbt-testng-interface"]
    extra.exclude: [
      // unless we exclude, it looks for an Ornate dependency here
      "root"
      // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
      "osgitests"
    ]
  }

  // forked (updated March 2017) to get rid of bintray stuff that was causing errors
  ${vars.base} {
    name: "sbt-testng"
    uri:  ${vars.uris.sbt-testng-uri}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
  }

  // forked (from sbt/sbinary; updated March 2017) to remove bintray gunk that doesn't work with dbuild
  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
  }

  // forked (April 2017) for 2.12.2 and 2.13 compat.
  // can be unforked once these PRs are merged:
  // * https://github.com/lihaoyi/utest/pull/107
  // * https://github.com/lihaoyi/utest/pull/109
  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name: "acyclic"
    uri:  ${vars.uris.acyclic-uri}
  }

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "fastparse"
    uri:  ${vars.uris.fastparse-uri}
    extra.projects: [
      "fastparseJVM"   // no Scala.js plz
      "scalaparseJVM"  // dependency of Scala.meta (!)
    ]
    // TODO: tests depend on lambda toString looking like e.g `<function1>`
    extra.test-tasks: ["compile"]
  }

  // forked (May 2017) to make a trivial source change for 2.12.3 compat;
  // see https://github.com/scalamacros/paradise/issues/98
  ${vars.base} {
    name: "macro-paradise"
    uri:  ${vars.uris.macro-paradise-uri}
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  ${vars.base} {
    name: "scalaprops"
    uri:  ${vars.uris.scalaprops-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
    // new warnings from https://github.com/scala/scala/pull/5402
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  ${vars.base} {
    name: "kxbmap-configs"
    uri:  ${vars.uris.kxbmap-configs-uri}
    extra.exclude: [
      "bench" // not really necessary and would pull in a JMH dependency
    ]
  }

  // series/0.9 is current "master" as of Sep 2016; there is a series/1.0
  // we might want to switch to at some point?
  ${vars.base} {
    name: "fs2"
    uri:  ${vars.uris.fs2-uri}
    extra.exclude: [
      "coreJS" // no Scala.js please
      "benchmark" // not really necessary and would pull in a JMH dependency
    ]
  }

  ${vars.base} {
    name: "fs2-cats"
    uri:  ${vars.uris.fs2-cats-uri}
    extra.projects: ["fs2CatsJVM"]  // no Scala.js
  }

  // frozen at May 2017 commit because newer commits caused a failure
  // in monix: https://github.com/monix/monix/issues/366
  // and moved (in June 2017) to an even older (April 2017) commit
  // so that doodle compiles
  ${vars.base} {
    name: "cats"
    uri:  ${vars.uris.cats-uri}
    // for some reason, adding the umbrella "catsJVM" project but excluding "bench"
    // and "docs" doesn't succeed in removing the depending on cats-bench.
    // using deps.ignore doesn't fix it either. not sure how else to fix it
    // other than just enumerating what we want:
    extra.projects: ["coreJVM", "freeJVM", "kernelJVM", "kernelLawsJVM", "lawsJVM", "macrosJVM", "testsJVM"]
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // uses wartremover which we can't handle, ticket on that is
  // https://github.com/scala/community-builds/issues/364
  // worked around for now by freezing at 2a75226 (September 2016)
  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
  }

  // if this starts giving us trouble, it would be OK to just drop it,
  // as per Mathias's comments at https://github.com/sirthias/parboiled/pull/100
  // ("it's quite unmaintained. Also, I don't think there are any real users left")
  // We have parboiled2 below.
  ${vars.base} {
    name: "parboiled"
    uri:  ${vars.uris.parboiled-uri}
    extra.projects: ["parboiled-scala"]
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "parboiled2"
    uri:  ${vars.uris.parboiled2-uri}
    extra.projects: ["parboiledJVM", "examples"]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
  }

  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
  }

  // tracking "develop" branch.
  // try master instead if develop proves too fragile?
  ${vars.base} {
    name: "twitter-util"
    uri:  ${vars.uris.twitter-util-uri}
    extra.exclude: [
      // this isn't really necessary and would pull in a JMH dependency
      "util-benchmark"
    ]
    // recommended at https://github.com/twitter/util/issues/173:
    // "We use that when we don't think the tests will be reliable in a ci environment"
    extra.options: ["-DSKIP_FLAKY=true"]
  }

  // note that we don't have MiMa in the JDK6 build.  I tried but it
  // was running out of PermGen when running the functional tests.
  // rather than sink time into investigating, just confining it to
  // JDK8 world seems perfectly fine.
  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // normally MiMa runs on 2.10 (because sbt 0.13 does), so the branch won't
    // be merged onto master for quite a while yet
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
  }

  // frozen (March 2017) because org changed from org.spire-math to org.typelevel;
  // we can unfreeze once they've published and once breeze has updated their
  // dependency (https://github.com/scala/community-builds/issues/503)
  ${vars.base} {
    name: "spire"
    uri:  ${vars.uris.spire-uri}
    // hopefully avoid intermittent OutOfMemoryErrors during compilation
    extra.options: ["-Xmx2560m"]
    extra.projects: ["spireJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "breeze"
    uri:  ${vars.uris.breeze-uri}
    // failing tests reported upstream at https://github.com/scalanlp/breeze/issues/587
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    extra.test-tasks: ["compile"] // TODO: ??? - hasn't been tried lately
    extra.exclude: [
      // eff-related compile errors, as of January 2017 anyway
      "guide"
      // not community build relevant, and was causing error
      // ("multiple projects have the same artifacts visible in the same space")
      "pom"
    ]
    extra.commands: ${vars.default-commands} [
      // too fragile? TODO: I got a non-exhaustive match warning that
      // could conceivably indicate some real regression. or maybe it's
      // just a version mismatch for some library? who knows
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "ssl-config"
    uri:  ${vars.uris.ssl-config-uri}
    // repeated hangs during testing; see
    // https://github.com/scala/community-builds/issues/560
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "spray-json"
    uri:  ${vars.uris.spray-json-uri}
  }

  ${vars.base} {
    name: "spray-json-shapeless"
    uri:  ${vars.uris.spray-json-shapeless-uri}
    // tests don't compile, starting circa January 2017 -- see
    // https://github.com/scala/community-builds/issues/475
    extra.run-tests: false
  }

  ${vars.base} {
    name: "pcplod"
    uri:  ${vars.uris.pcplod-uri}
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  ${vars.base} {
    name: "scalikejdbc"
    uri:  ${vars.uris.scalikejdbc-uri}
    // don't build sbt plugin
    extra.exclude: ["mapper-generator"]
    // recurring test failures reported upstream at
    // https://github.com/scalikejdbc/scalikejdbc/issues/574
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scopt"
    uri:  ${vars.uris.scopt-uri}
    extra.projects: ["scoptJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "twirl"
    uri:  ${vars.uris.twirl-uri}
    extra.exclude: [ "plugin", "apiJS" ]
  }

  ${vars.base} {
    name: "play-doc"
    uri:  ${vars.uris.play-doc-uri}
  }

  ${vars.base} {
    name: "play-json"
    uri:  ${vars.uris.play-json-uri}
    extra.projects: ["play-jsonJVM"]  // no Scala.js plz
  }

  // frozen (June 2017) after a test started failing;
  // see https://github.com/scala/community-builds/issues/564
  ${vars.base} {
    name: "play-ws"
    uri:  ${vars.uris.play-ws-uri}
    // new warnings from https://github.com/scala/scala/pull/5402
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  // dependency of play-ws
  ${vars.base} {
    name: "cachecontrol"
    uri:  ${vars.uris.cachecontrol-uri}
  }

  ${vars.base} {
    name: "play-core"
    uri:  ${vars.uris.play-core-uri}
    extra: ${vars.base.extra} {
      // TODO: enable more projects? these are just a few that seemed especially high-value.
      // we tried including "Play-Integration-Test" but hit a mysterious StackOverflowError
      // in scala.tools.nsc.javac.JavaScanners; see https://github.com/scala/community-builds/issues/304
      projects: ["Play", "Play-Test", "Play-WS"]
      exclude: ["SBT-Plugin"]
      directory: "framework"
      commands: ${vars.default-commands} [
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
        // there was some Scaladoc error here I didn't bother to look into
        "set sources in doc in Compile in PlayProject := List()"
      ]
    }
  }

  // 3.5 is the current stable branch (as of Oct 2016)
  // there is also a brand-new development branch, 3.6, we should
  // maybe switch to at some point
  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    // TODO: exclude subprojects we don't want, rather than naming a few we want. probably adding more would work?
    extra.projects: ["json4s-native", "json4s-jackson", "json4s-ast"]
  }

  ${vars.base} {
    name: "lift-json"
    uri:  ${vars.uris.lift-json-uri}
    extra.projects: ["lift-json"]
  }

  // frozen (June 2017) at a June 2017 commit before breaking String
  // vs. CharSequence changes went in and broke upickle.  see
  // https://github.com/scala/community-builds/issues/565 .  we could
  // unfreeze once there's a new jawn release for dependent projects
  // to upgrade to
  ${vars.base} {
    name: "jawn"
    uri:  ${vars.uris.jawn-uri}
    // omitted TODO: play
    // omitted: rojoma-v3, rojoma, benchmark, argonaut
    // (we have Argonaut in the community build, but it depends on jawn! dbuild
    // doesn't like the circularity. I think we could break it by having two jawn entries,
    // one for the core and one for the extras, but I haven't tried yet)
    extra.projects: ["ast", "parser", "json4s", "spray"]
  }

  // frozen (June 2017) at a November 2016 commit because newer commits failed
  // to compile -- I guess because fs2 is changing? ticket is
  // https://github.com/scala/community-builds/issues/563
  ${vars.base} {
    name: "jawn-fs2"
    uri:  ${vars.uris.jawn-fs2-uri}
  }

  // forked (updated March 2017) because of bintray-sbt errors;
  // see https://github.com/typesafehub/dbuild/issues/158 (fixed in
  // at least some cases in dbuild 0.9.7? not in this case)
  ${vars.base} {
    name: "scalamock"
    uri:  ${vars.uris.scalamock-uri}
    extra.commands: ${vars.default-commands} [
      // work around https://github.com/scala/scala-dev/issues/252 ;
      // see https://github.com/scala/community-builds/issues/434
      "set unmanagedSourceDirectories in (`scalamock-core-jvm`, Compile) += baseDirectory.value / \"core\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
    extra.projects: ["ScalaMockJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "argonaut"
    uri:  ${vars.uris.argonaut-uri}
    extra.projects: ["argonautJVM"]  // no Scala.js
    extra.exclude: [
      // fails to declare its scala-parser-combinators dependency,
      // and anyway we don't want to run benchmarks
      "argonaut-benchmark"
    ]
    // work around https://github.com/scala/scala-dev/issues/252
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (argonautJVM, Compile) += baseDirectory.value / \"argonaut\" / \"shared\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
  }

  ${vars.base} {
    name: "monocle"
    uri:  ${vars.uris.monocle-uri}
    // try to enable more subprojects besides just these few?
    extra.projects: ["coreJVM", "macrosJVM", "lawJVM"]
  }

  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    // TODO add more projects? hasn't been tried yet
    extra.projects: ["platformJVM"]
  }

  ${vars.base} {
    name: "scala-continuations"
    uri:  ${vars.uris.scala-continuations-uri}
  }

  // using xuwei-k's fork which has changes needed for 2.12 compat,
  // submitted upstream: https://github.com/veact/scala-ssh/pull/5
  ${vars.base} {
    name: "scala-ssh"
    uri:  ${vars.uris.scala-ssh-uri}
    // Failed tests: com.decodified.scalassh.SshClientSpec
    extra.test-tasks: "compile"
  }

  // frozen at a March 2017 commit, because some commit soon after
  // it broke some version checking logic, resulting in
  // com.fasterxml.jackson.databind.JsonMappingException when running
  // tests, not only in this project but also downstream in
  // twitter-util and scalaj-http.  reported the problem upstream at
  // https://github.com/FasterXML/jackson-module-scala/issues/319
  ${vars.base} {
    name: "jackson-module-scala"
    uri:  ${vars.uris.jackson-module-scala-uri}
    // we're lying and telling it Java 8 is Java 7, but in this context
    // the lie isn't important
    extra.options: ["-Djava7.home="${JAVA_HOME}]
  }

  ${vars.base} {
    name: "scalameter"
    uri:  ${vars.uris.scalameter-uri}
    check-missing: false
    deps.ignore: [
      // doesn't support 2.12 (yet?)
      "org.mongodb#casbah"
      // this one is unmaintained and doesn't support Scala 2.12...
      "com.decodified#scala-ssh"
    ]
    deps.inject: [
      // ...but this one does
      "com.veact#scala-ssh"
    ]
  }

  ${vars.base} {
    name: "scala-json-ast"
    uri:  ${vars.uris.scala-json-ast-uri}
    // no Scala.js please, and no benchmarks either
    extra.projects: ["scalaJsonJVM"]
  }

  ${vars.base} {
    name: "scalatags"
    uri:  ${vars.uris.scalatags-uri}
    extra.projects: ["scalatagsJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "scala-refactoring"
    uri:  ${vars.uris.scala-refactoring-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"  // too fragile
    ]
    // (January 2017)
    // Failed tests:
    //   scala.tools.refactoring.tests.sourcegen.PrettyPrinterTest
    //   scala.tools.refactoring.tests.sourcegen.SourceGenTest
    //   scala.tools.refactoring.tests.implementations.ExplicitGettersSettersTest
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "nyaya"
    uri:  ${vars.uris.nyaya-uri}
    extra.projects: ["testModuleJVM"]  // no Scala.js, no benchmarks
  }

  ${vars.base} {
    name: "scala-abide"
    uri:  ${vars.uris.scala-abide-uri}
    extra.exclude: [
      "root"       // dbuild thinks it tries to publish root#root
      "sbt-abide"  // we never build sbt plugins
    ]
  }

  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM"]  // no Scala.js
  }

  // using series/2.x rather than master because tracking master
  // was causing some compile failures, probably having to do with
  // the dependency changes happening recently (June 2017)
  ${vars.base} {
    name: "monix"
    uri:  ${vars.uris.monix-uri}
    extra.projects: ["coreJVM", "tckTests"]  // no Scala.js, no benchmarks
  }

  // this was added because conductr-lib's Play integration depended on it,
  // but we ended up not including that integration (for now anyway?), so
  // nothing depends on this.  leaving it in since we might as well, but
  // if it acts up, it can go.
  // forked (December 2016) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "akka-sse"
    uri:  ${vars.uris.akka-sse-uri}
    extra.exclude: ["jmh"]  // no benchmarking stuff plz
  }

  // this was added because conductr-lib's Play integration depended on it,
  // but we ended up not including that integration (for now anyway?), so
  // nothing depends on this.  leaving it in since we might as well, but
  // if it acts up, it can go.
  // forked (December 2016) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "akka-contrib-extra"
    uri:  ${vars.uris.akka-contrib-extra-uri}
  }

  ${vars.base} {
    name: "unfiltered"
    uri:  ${vars.uris.unfiltered-uri}
    // Failed test: unfiltered.netty.SslServerSpec
    //   (it worked locally but failed on Jenkins, who knows why?)
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "dispatch"
    uri:  ${vars.uris.dispatch-uri}
  }

  ${vars.base} {
    name: "atto"
    uri:  ${vars.uris.atto-uri}
    extra.exclude: [
      // just scalaz72 plz!
      "scalaz71"
      // depends on scalaz71
      "atto", "tests", "docs"
      // no Scala.js
      "catsJS", "coreJS", "scalaz72JS"
    ]
    // new warnings from https://github.com/scala/scala/pull/5402
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
  }

  ${vars.base} {
    name: "http4s-websocket"
    uri:  ${vars.uris.http4s-websocket-uri}
    extra.projects: ["http4sWebsocketJVM"]  // no Scala.js plz
  }

  // frozen at v0.12.4 because that's the version http4s depends on,
  // and anyway it's the most recent tag as of January 2017.
  // a more recent commit (namely 9b2c7cc5) makes a source-incompatible
  // change to a package name that http4s uses
  ${vars.base} {
    name: "blaze"
    uri: ${vars.uris.blaze-uri}
  }

  // well, this is a big build with lots of subprojects, many of which involve
  // integration with other libraries. so many of them had issues I didn't
  // spend that much time looking into each one and seeing if it might be
  // fixable, or ought to be reported upstream, or what.
  // note that we are using the topic/cats branch, not master, since master
  // uses scalaz-stream which we dropped from the community build a while back
  // in favor of fs2.
  // note also that we are frozen at a January 2017 commit on that branch,
  // because more recent commits failed to compile.
  // note that if this all proves to be more trouble than it's worth,
  // it's fine to drop it for a while (certainly at least until the
  // topic/cats branch is merged, anyway)
  ${vars.base} {
    name: "http4s"
    uri:  ${vars.uris.http4s-uri}
    extra.commands: ${vars.default-commands} [
      // well, here's a new one. we don't have Typelevel Scala.
      // if it works with Scala Scala, maybe it's because they're only
      // depending on TLS stuff in 2.11?
      "set scalaOrganization in ThisBuild := \"org.scala-lang\""
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    extra.exclude: [
      // no benchmarks please
      "bench"
      // not sure what this is about. didn't investigate or attempt workaround.
      // scala-xml/src/main/scala/scalaxml/ElemInstances.scala:30: wrong number of type parameters for method flatMap: [AA >: org.http4s.DecodeFailure, D](f: fs2.Chunk[Byte] => cats.data.EitherT[fs2.Task,AA,D])(implicit F: cats.Monad[fs2.Task])cats.data.EitherT[fs2.Task,AA,D]
      "scala-xml"
      // blaze-server/src/test/scala/org/http4s/server/blaze/BlazeServerSpec.scala:14: value run is not a member of fs2.Task[org.http4s.server.Server]
      "blaze-server"
      // "not found: object scalaz" ?!
      "blaze-client"
      // "not found: object scodec" ?!
      "async-http-client"
      // these depend on circe, which we don't have (yet?)
      "circe", "examples", "examples-tomcat", "examples-jetty", "examples-blaze", "examples-war", "docs"
    ]
    // Failed tests: org.http4s.server.middleware.DefaultHeadSpec
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "fansi"
    uri:  ${vars.uris.fansi-uri}
    extra.projects: ["fansiJVM"]  // no Scala.js
  }

  // as per https://github.com/lihaoyi/upickle-pprint/issues/209
  // upickle is now obsolete (and the pprint part has its own repo now).
  // leaving this here because it isn't causing, any trouble, and
  // because we already have it forked/frozen. note that no other
  // projects depend on it, so it could be dropped if any trouble
  //  starts.  pprint is now separate.
  ${vars.base} {
    name: "upickle"
    uri:  ${vars.uris.upickle-uri}
    // no Scala.js; also only upickle no pprint
    extra.projects: ["upickleJVM"]
  }

  ${vars.base} {
    name: "pprint"
    uri:  ${vars.uris.pprint-uri}
    extra.projects: ["pprintJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "algebra"
    uri:  ${vars.uris.algebra-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js, no benchmarks, no docs
    // new warnings from https://github.com/scala/scala/pull/5402
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  // forked (updated March 2017) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "tut"
    uri:  ${vars.uris.tut-uri}
    extra.exclude: ["plugin"]  // we never build sbt plugins
    // because of new unused warnings introduced
    // by https://github.com/scala/scala/pull/5402 ; probably they'll fix it upstream
    // after 2.12.2 comes out
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
  }

  // forked (updated March 2017) to remove the usual bintray gunk.
  // refreshing the fork should be approached with caution;
  // see Olafur's comment at
  // https://github.com/scala/community-builds/issues/499#issuecomment-287307613
  // about the instability of both scalameta and scalafix
  ${vars.base} {
    name: "scalameta"
    uri:  ${vars.uris.scalameta-uri}
    // else, bintray stuff goes boom
    extra.options: ["-Dsbt.prohibit.publish=true"]
    extra.projects: ["scalametaJVM"]  // no Scala.js
    extra.exclude: [
      // requires scalatex-site which requires Scala.js
      "readme"
      // we never build sbt plugins or benchmarks
      "scalahostSbt", "benchmarks"
      // test failures it doesn't seem worth investigating; pulls down external source trees
      "contribJVM"
    ]
    // use right version-specific source directories regardless of our weird dbuild Scala version numbers
    extra.commands: [
      "set unmanagedSourceDirectories in (commonJVM, Compile) += (baseDirectory in commonJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (dialectsJVM, Compile) += (baseDirectory in dialectsJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (scalametaJVM, Compile) += (baseDirectory in scalametaJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (scalahost, Compile) += (baseDirectory in scalahost).value / \"src\" / \"main\" / \"scala-2.12.1\""
    ]
  }

  // forked (February 2017) to remove wartremover and coursier
  // fork tweaked March 2017 to alter scalameta dependency
  // caution, refreshing the fork any further could be problematic;
  // see Olafur's comment at
  // https://github.com/scala/community-builds/issues/499#issuecomment-287307613
  // about the instability of both scalameta and scalafix
  ${vars.base} {
    name: "scalafix"
    uri:  ${vars.uris.scalafix-uri}
    extra.exclude: [
      "scalafix-sbt"  // we never build sbt plugins
      // "These tests depend on various projects (circe, shapeless,...) to
      // reproduce bugs that surfaced in larger integration tests"
      // says Olaf.  depends on circe which we don't have here yet
      "scalafix-nsc"
      // didn't work, and anyway, Olafur says it isn't appropriate to include;
      // it "involves cloning other projects and compiling them"
      "scalafix-tests"
      // Missing dependency: the library com.github.alexarchambault#case-app
      "cli"
      // requires scalatex-site which requires Scala.js
      "readme"
    ]
  }

  ${vars.base} {
    name: "scalatex"
    uri:  ${vars.uris.scalatex-uri}
    extra.exclude: [
      "scalatexSbtPlugin"  // we never build sbt plugins
      "site", "readme", "scrollspy"  // these use Scala.js
    ]
  }

  // for now we're just building ammonite-ops, not all of ammonite.
  // ammonite-ops is the piece scalatex needed.  trying to build all
  // projects here resulted in a circular ammonite/scalatex dependency.
  // we might look into that some other time.
  ${vars.base} {
    name: "ammonite"
    uri:  ${vars.uris.ammonite-uri}
    extra.projects: ["ops"]
    // not investigated:
    // [ammonite] [info] test.ammonite.ops.ExampleTests.addUpScalaSize
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "geny"
    uri:  ${vars.uris.geny-uri}
    extra.projects: ["genyJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "scalaj-http"
    uri:  ${vars.uris.scalaj-http-uri}
  }

  // forked (April 2017) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "typesafe-emoji"
    uri:  ${vars.uris.typesafe-emoji-uri}
  }

  // others are not depending on this yet ("not ready for general
  // population yet", says Owein in March 2017) but I was interested
  // in including it anyway just to have a few more compiler plugins
  // in the build, it's an underrepresented category.  we can freeze
  // or drop it if it proves to be trouble
  ${vars.base} {
    name: "twotails"
    uri:  ${vars.uris.twotails-uri}
  }

  ${vars.base} {
     name: "scala-gopher"
     uri:  ${vars.uris.scala-gopher-uri}
     // too many intermittent failures -- reported at
     // https://github.com/rssh/scala-gopher/issues/20
     extra.test-tasks: ["compile"]
  }

  // adding (April 2017) because scalameta now depends on it.
  // frozen (June 2017) since more recent revisions didn't compile;
  // see https://github.com/scala/community-builds/issues/562
  ${vars.base} {
     name: "scalapb"
     uri:  ${vars.uris.scalapb-uri}
     // just this one for now, since I'm mainly just trying to get
     // scalameta working again
     extra.projects: ["runtimeJVM"]
  }

  // adding (April 2017) because scalameta depends on it
  // (indirectly via scalapb)
  ${vars.base} {
     name: "scalapb-lenses"
     uri:  ${vars.uris.scalapb-lenses-uri}
     extra.projects: ["lensesJVM"]  // no Scala.js plz
  }

  // frozen at May 2017 commit because newer commits were failing;
  // see https://github.com/scala/community-builds/issues/544
  ${vars.base} {
     name: "cats-effect"
     uri:  ${vars.uris.cats-effect-uri}
     extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js plz
  }

  // forked (June 2017) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset; also waiting on upstream merge of
  // https://github.com/underscoreio/doodle/pull/55
  ${vars.base} {
     name: "doodle"
     uri: ${vars.uris.doodle-uri}
     extra.projects: ["doodleJVM"]  // no Scala.js plz
  }

  // once https://github.com/scala/scala-collections-laws/pull/18
  // is merged we can track master
  ${vars.base} {
     name: "scala-collections-laws"
     uri: ${vars.uris.scala-collections-laws-uri}
     // as per the repo readme
     extra.options: ["-XX:MaxMetaspaceSize=1G", "-Xmx6G"]
     // note that we're not actually doing
     // `runMain tests.generated.collection.Test_All` which is what
     // the repo readme says to do. dbuild doesn't let us set
     // extra.test-tasks to a task that takes arguments.  (anyway,
     // it's not clear it's really necessary or appropriate to
     // actually run the whole thing as part of the community build?)
  }

  ${vars.base} {
     name: "better-files"
     uri: ${vars.uris.better-files-uri}
     // test failure reported upstream at https://github.com/pathikrit/better-files/issues/165
     extra.test-tasks: ["compile"]
  }

  ${vars.base} {
     name: "scalafmt"
     uri: ${vars.uris.scalafmt-uri}
  }

  ${vars.base} {
     name: "scalastyle"
     uri: ${vars.uris.scalastyle-uri}
  }

]}
