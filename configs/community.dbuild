# surely-not-100%-complete/accurate list, but,
# the following 2.12 projects are currently not included in 2.13
#
# * needs updating for 2.13 new collections:
#   json4s, scala-collections-laws, scala-async, utest and friends
#   (acyclic, geny, scalatags, fansi, fastparse)
# * better-files (compile error, problem with @tailrec + singleton types?
#   didn't I see something similar in another project?)
# * akka-sse, akka-contrib-extra, play-ws, play-core,
#   conductr-lib, lagom, gigahorse: perhaps can be re-added now that we
#   have akka-more again?
# * scalameter: because scalaVersion handling in their
#   project/Build.scala needs updating
# * scala-refactoring: ???, investigation needed
# * cats: doesn't compile; waiting on https://github.com/typelevel/cats/issues/1648
#   downstream chain includes cats-effect -> {fs2,monix},
#   fs2 -> {jawn-fs2, http4s}
# * cats-effect: depends on cats
# * sbt, zinc, sbt-*:
#   built with sbt 1, which doesn't support Scala 2.13 yet
#   (oh but it does now, so we can attempt to re-add these)
# * everything in the scalameta_1 and scalameta_2 spaces
#   (scalameta is too fragile, for now, for 2.13)
# * was failing, but even investigating can wait:
#   twotails, scallop, twirl, slick, scalatest-tests, scalariform
#   (and its dependency scalastyle)
# * stopped compiling, not investigated: jackson-module-scala
#   (also removed its dependency elastic4s)
# * scala-continuations (regressed: see
#   https://github.com/scala/scala-continuations/issues/37)
#
# also a huge swath of dozens of projects were removed
# because they depended directly or indirectly on either scalaz or
# shapeless (see https://scala-ci.typesafe.com/view/scala-2.13.x/job/scala-2.13.x-integrate-community-build/905/consoleFull
# for a view of what the dependencies were before this massive removal)
# scalaz and shapeless are both back in the build now, but the mass
# removal is still gradually being undone
#
# we should attempt to add everything back later in the 2.13 cycle (by
# copying their entries from the 2.12 config)
#
# the following moribund projects were dropped here and don't need to
# be re-added:
#
# * parboiled (but note we do have parboiled2)

//// about spaces

// currently we have five spaces.

// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
//   on sjson-new) and the sbt team is worried about the possible
//   impact of upgrading on binary compatibility of sbt plugins.
// but in the meantime the whole Typelevel ecosystem is moving onto
//   jawn 0.11, and the two versions are source-incompatible.

// the scalameta split is because we want to have both scalafmt
//   and scalafix, but the latter uses scalameta 2.x while the
//   former is stuck in scalameta 1.x land.  (this is easy to
//   keep segregated since scalafmt and scalafix tend to be
//   build-level dependencies, not project-level dependencies.)

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.17"
  sbt-1-version: "1.1.4"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// new behemoths have much more disk space, so let's try keeping stuff
// substantially longer (2 weeks instead of 4-5 days) and see what
// the effect on disk space usage is, starting March 17 2018
options.cleanup: {
  extraction: {
    success: 336
    failure: 336
  }
  build: {
    success: 336
    failure: 336
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
    extra.sbt-version: ${vars.sbt-1-version}
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used,
      // (resulting in an error about scala.collection.SeqLike being missing).
      // not worth investigating, we don't need to testdoc generation on this project,
      // and scala-xml will be out of the bootstrap before much longer anyway
      "set publishArtifact in packageDoc := false"
      // "set sources in doc in Compile := List()"
    ]
  }
  {
    name:  "scala"
    system: assemble
    cross-version: binary
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git#newCollectionsBootstrap"  # was master
        // this gives us "scala-xml_2.12" which is what we want, sbt 1 will get
        // upset if there are two different kinds of scala-xml dependencies
        // floating around (https://github.com/scala/community-builds/issues/679)
        cross-version: standard
        // override sbt version here since otherwise we get
        // whatever random sbt version the module has
        extra.sbt-version: ${vars.sbt-version}
        extra.commands: ${vars.default-commands} [
          // override scalaVersion here since otherwise we get
          // whatever random Scala version the module has
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xmlJVM"]
      }
    ]
  }
]}


//// space: scala

build += {

  space: scala

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc in `scala-parser-combinatorsJVM` := false"
    ]
  }

  // since the community build is JVM-only, other projects only depend scala-js
  // in order to get stubs.  building all of Scala.js and running its tests
  // takes a while, so let's save ourselves some time and build the stubs
  // separately.  not only that, but we use a frozen SHA, since the stubs
  // hardly ever change, so we can save time by not rebuilding downstream projects
  // everytime anything anywhere in the whole repo changes
  ${vars.base} {
    name: "scala-js-stubs"
    uri:  ${vars.uris.scala-js-stubs-uri}
    extra.projects: ["stubs"]
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc in stubs := false"
    ]
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
    // not really sure how this list was arrived at
    extra.projects: [ "io", "logging", "linker", "testSuite" ]
    // exclude it here because we build it separately in scala-js-stubs
    extra.exclude: ["stubs"]
    extra.commands: ${vars.default-commands} [
      // - Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
      "set MyScalaJSPlugin.wantSourceMaps in testSuite := false"
      // "org.scalajs.linker.LinkingException: There were linking errors"
      // but, this early (January 2018) in the 2.13 cycle, there really isn't any point
      // worrying about whether scala-js's tests pass, scala-js is only formally a dependency
      // of other projects in the community build, we don't care if it actually works
      "set executeTests in testSuite in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
    ]
  }

  // using Lukas's 2.13-friendly fork
  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // Lukas changed this in his fork, so we have to change it back
      "set every organization := \"org.scalacheck\""
      // because of new unused warnings in 2.12.2
      "removeScalacOptions -Xfatal-warnings"
      // Scaladoc generation fails because the wrong scala-xml version is used,
      "set publishArtifact in packageDoc in jvm := false"
    ]
  }

  // see also scalatest-tests
  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.projects: ["scalatest", "scalactic"]
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc in scalacticMacro := false"
    ]
  }

  ${vars.base} {
    name: "scala-partest-interface"
    uri:  ${vars.uris.scala-partest-interface-uri}
  }

  ${vars.base} {
    name: "scala-partest"
    uri:  ${vars.uris.scala-partest-uri}
    extra.commands: ${vars.default-commands} [
      // Deprecated optimizer settings
      "removeScalacOptions -Xfatal-warnings"
      // Scaladoc generation fails because the wrong scala-xml version is used,
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
    extra.commands: ${vars.default-commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.default-commands} [
      // optimizer related (at the time it was added, hasn't been re-checked in a long time)
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra.exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
    // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    // January 2018: failure's continued existence confirmed
    extra.test-tasks: ["compile"]
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
    extra.commands: ${vars.default-commands} [
      // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
      // we use "assert" as an identifier there. We disable doc building to avoid that.
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "scala-collection-compat"
    uri:  ${vars.uris.scala-collection-compat-uri}
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used,
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "scalaz"
    uri:  ${vars.uris.scalaz-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
    extra.exclude: [
      // we're on ScalaCheck 1.13 not 1.12
      "scalacheck-binding_1_12JVM"
    ]
  }

  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: [
      "coreJS"  // no Scala.js please
      "root"    // dbuild thinks it tries to publish root#root
    ]
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  // using March 2018 special 2.13 branch
  ${vars.base} {
    name: "akka-actor"
    uri:  ${vars.uris.akka-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false", "-Dakka.test.tags.exclude=performance,timing,long-running", "-Dakka.test.multi-in-test=false"]
    extra.projects: ["akka-actor"]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
    ]
  }

  // this is separate from "akka" because there is a circular dependency between
  // the akka and ssl-config repos
  ${vars.base} {
    name: "akka-more"
    uri:  ${vars.uris.akka-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false", "-Dakka.test.tags.exclude=performance,timing,long-running", "-Dakka.test.multi-in-test=false"]
    extra.projects: ["akka-scala-nightly"]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
    ]
    extra.exclude: [
      "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
      "akka-actor"  // because we already built it in "akka"
      "akka-bench-jmh"  // we'd have to add a resolver to get the JMH dependency, and we prefer not to run benchmarks here anyway
    ]
  }

  ${vars.base} {
    name: "akka-http"
    uri:  ${vars.uris.akka-http-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: ["docs", "akka-http-bench-jmh"]
    extra.options: [
      "-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false"
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
    // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
    extra.commands: ${vars.default-commands} [
      "set sources in doc in Compile in httpCore := List()"
      "set every bintrayReleaseOnPublish := false"
      // sbt-osgi doesn't like dbuild-mangled version numbers
      "set every OsgiKeys.bundleVersion := \"10.0.0\""
    ]
    // "HTTP is sadly very timing sensitive we're working on improving its stability regularly,
    // OK to disable it for now." - Konrad M, October 2016
    // reconfirmed January 2018 that some tests are failing. in one run, it was:
    // * akka.http.impl.engine.client.NewConnectionPoolSpec
    // * akka.http.impl.engine.client.HostConnectionPoolSpec
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "sbt-testng"
    uri:  ${vars.uris.sbt-testng-uri}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // Scaladoc generation fails because the wrong scala-xml version is used,
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc in jvm := false"
    ]
  }

  ${vars.base} {
    name: "macro-paradise"
    uri:  ${vars.uris.macro-paradise-uri}
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc in machinistJVM := false"
    ]
  }

  // using Seth's 2.13-friendly fork
  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
    // use scala-2.12 source directory for 2.13 too
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (core, Compile) += baseDirectory.value / \"core\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  // here we are using 4.x.  2.12 build is still on 3.x.
  // see https://github.com/scala/community-builds/issues/685
  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    // Modules were resolved with conflicting cross-version suffixes in
    //   {file:/Users/tisue/community.213/target-0.9.11/project-builds/specs2-73b8958825279a634cea44807fa445c0413c6733/}analysisJVM:
    //   org.scala-lang.modules:scala-xml _2.13.0-M3, _2.13
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
    // I don't see a project that aggregates JVM-only stuff, so...
    extra.projects: [
      "analysisJVM", "commonJVM", "coreJVM", "examplesJVM", "fpJVM"
      "matcherExtraJVM", "matcherJVM", "mockJVM", "junitJVM"
      "scalacheckJVM", "scalazJVM", "shapelessJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
      // no longer exists in 2.13
      "removeScalacOptions -Ypartial-unification"
      // some XML thing I didn't investigate
      "set executeTests in junitJvm in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
      // java.lang.NoClassDefFoundError: scala/collection/parallel/Combiner
      "set executeTests in html in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
    ]
  }

  ${vars.base} {
    name: "ssl-config"
    uri:  ${vars.uris.ssl-config-uri}
    // scala-xml issue: Modules were resolved with conflicting cross-version suffixes
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
    // repeated hangs during testing; see
    // https://github.com/scala/community-builds/issues/560
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "pcplod"
    uri:  ${vars.uris.pcplod-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
    ]
    // not sure why the tests stopped even compiling.  pcplod's ScalaTest dependency
    // comes in through the sbt-sensible plugin, maybe something was fragile there
    extra.run-tests: false
  }

  ${vars.base} {
    name: "twirl"
    uri:  ${vars.uris.twirl-uri}
    extra.exclude: [ "plugin", "apiJS" ]
  }

  ${vars.base} {
    name: "play-doc"
    uri:  ${vars.uris.play-doc-uri}
    // test failure on at least some systems; see
    // https://github.com/playframework/play-doc/pull/36
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "play-json"
    uri:  ${vars.uris.play-json-uri}
    extra.projects: ["play-jsonJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "play-ws"
    uri:  ${vars.uris.play-ws-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.commands: ${vars.default-commands} [
      // new warnings from https://github.com/scala/scala/pull/5402
      "removeScalacOptions -Xfatal-warnings"
    ]
    // NullPointerException in CachingSpec
    // (https://github.com/scala/community-builds/issues/564)
    extra.exclude: ["integration-tests"]
  }

  // dependency of play-ws
  ${vars.base} {
    name: "cachecontrol"
    uri:  ${vars.uris.cachecontrol-uri}
  }

  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    // other projects aren't pertinent or errored out (not investigated)
    extra.projects: ["specbaseJVM", "lawkitJVM", "scalatestJVM", "macrosJVM", "platformJVM", "testkitJVM"]
  }

  ${vars.base} {
    name: "scalajson"
    uri:  ${vars.uris.scalajson-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    // no Scala.js please, and no benchmarks either
    extra.projects: ["scalaJsonJVM"]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: ["coreJS", "testingJS"]
  }

  // dependency of scalafix
  // (we use allanrenucci's fork because that's where `organization` is set
  // as scalafix expects; it's where 0.1.4 was apparently published from,
  // which is the version scalafix declares a dependency on)
  ${vars.base} {
    name: "scala-xml-quote"
    uri:  ${vars.uris.scala-xml-quote-uri}
  }

  ${vars.base} {
    name: "scalaj-http"
    uri:  ${vars.uris.scalaj-http-uri}
    extra.commands: ${vars.default-commands} [
      // Scaladoc generation fails because the wrong scala-xml version is used
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "lightbend-emoji"
    uri:  ${vars.uris.lightbend-emoji-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  ${vars.base} {
    name: "scala-parallel-collections"
    uri:  ${vars.uris.scala-parallel-collections-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
      // I have absolutely no idea why this would only be required in the
      // community build context, but without it, we get
      // java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing
      "set libraryDependencies in junit += \"org.hamcrest\" % \"hamcrest-core\" % \"1.3\" % \"test\""
      // Scaladoc generation fails because the wrong scala-xml version is used,
      "set publishArtifact in packageDoc in core := false"
    ]
  }

  ${vars.base} {
    name: "scalalib"
    uri:  ${vars.uris.scalalib-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "scalachess"
    uri:  ${vars.uris.scalachess-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  // dependency of scaladex
  ${vars.base} {
    name: "nscala-time"
    uri:  ${vars.uris.nscala-time-uri}
  }

  // dependency of elastic4s
  ${vars.base} {
    name: "sksamuel-exts"
    uri:  ${vars.uris.sksamuel-exts-uri}
  }

  // forked (December 2017) to disable sbt-pgp stuff that was prompting for a passphrase
  ${vars.base} {
    name: "paradox"
    uri:  ${vars.uris.paradox-uri}
    extra.exclude: ["plugin", "themePlugin", "genericTheme"]
  }

  ${vars.base} {
    name: "metrics-scala"
    uri:  ${vars.uris.metrics-scala-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: [
      // our Akka version is 25
      "metricsAkka24"
      // TODO needs akka-testkit; reenable once akka-more is back in the build
      "metricsAkka25"
    ]
  }

  // forked (April 2018) because some classpath-handling code didn't
  // work under dbuild
  ${vars.base} {
    name: "scapegoat"
    uri:  ${vars.uris.scapegoat-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "fast-string-interpolator"
    uri:  ${vars.uris.fast-string-interpolator-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // Missing dependency: com.dongxiguo#fastring
    extra.exclude: ["benchmark"]
  }

  ${vars.base} {
    name: "scalacheck-shapeless"
    uri:  ${vars.uris.scalacheck-shapeless-uri}
    extra.projects: ["coreJVM", "testJVM"]  // no Scala.js plz
    // weird missing self-dependency in testJVM project: "the library
    // com.github.alexarchambault#scalacheck-shapeless is not provided
    // (in space "default") by any project in this configuration file."
    check-missing: false
    // (January 2018) "recursiveADT2" test fails
    extra.test-tasks: ["compile"]
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
  }

  ${vars.base} {
    name: "wartremover"
    uri:  ${vars.uris.wartremover-uri}
    extra.exclude: ["sbt-plugin"]
  }

]}

//// space: jawn_0_10

build += {

  space: scala.jawn_0_10

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: jawn_0_11

build += {

  space: scala.jawn_0_11

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: scalameta_1

build += {

  space: scala.jawn_0_10.scalameta_1

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}

//// space: scalameta_2

build += {

  space: scala.jawn_0_10.scalameta_2

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

]}
