//// about spaces

// we have these spaces:
// - scala
//   - scala.main
//     - scala.main.jawn_0_11
// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
// on sjson-new) and the sbt team doesn't want to break  binary compatibility
// of sbt plugins. nearly everything else is on jawn 0.11, and the two versions
// are source-incompatible.
//
// in 2.13 we currently aren't even trying to build jawn 0.10 world.
// most of that world is old frozen versions of sbt(+modules) and zinc
// anyway, plus scaladex which hasn't moved to 2.13 and it's not clear
// if it will.

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-0-13-version: "0.13.18"
  sbt-1-2-version: "1.2.8"
  sbt-version: "1.3.0-RC3"
}

//// compiler options manipulation

// appendScalacOptions, removeScalacOptions, removeDependency
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterSetting[T](s: State, setting: SettingKey[T])(fn: T => T) = alterKeyImpl(s, setting)(fn)
  def alterTask[T](s: State, task: TaskKey[T])(fn: T => T) = alterKeyImpl(s, task)(fn)
  def alterKeyImpl[T](s: State, scopedKey: Scoped)(fn: T => T) = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scopedKey.key).map(_.scope).distinct
    val redefined = (scopedKey: @unchecked) match {
      case setting: SettingKey[T @unchecked] => scopes.map(scope => setting in scope ~= fn)
      case task: TaskKey[T @unchecked]       => scopes.map(scope => task in scope ~= fn)
    }
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]): State = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterTask(s, scalacOptions)(appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]): State =
    alterTask(s, scalacOptions)(_.filterNot(args.contains))
  def removeDependency(s: State, args: Seq[String]): State = {
    require(args.size == 2)
    alterSetting(s, libraryDependencies)(
      _.filterNot(mod => mod.organization == args(0) && mod.name == args(1)))
  }
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions),
    Command.args("removeDependency", "<org> <artifact>")(removeDependency))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.default-commands += "removeScalacOptions -Xfatal-warnings -Yno-adapted-args -Ywarn-inaccessible -Ywarn-nullary-override -Ywarn-nullary-unit -Ywarn-infer-any -Ywarn-unused-import -Ypartial-unification -Ywarn-adapted-args -Xmax-classfile-name -Ymacro-no-expand"
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// new behemoths have much more disk space, so let's try keeping stuff
// substantially longer (2 weeks instead of 4-5 days) and see what
// the effect on disk space usage is, starting March 17 2018
options.cleanup: {
  extraction: {
    success: 336
    failure: 336
  }
  build: {
    success: 336
    failure: 336
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
  }
  {
    name:  "scala"
    system: assemble
    cross-version: binary
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
    ]
  }

]}

//// space: scala.main

build += {

  space: scala.main

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  // well, this is a nice problem to have: ScalaCheck is undergoing such active
  // development at the moment (August 2019) that it's complicating community
  // build work by causing repeated rebuild-the-worlds. so, froze it for now.
  ${vars.base} {
    name: "scala-xml"
    uri:  ${vars.uris.scala-xml-uri}
    extra.projects: ["xml"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
  }

  // see also scalatest-tests
  // 2.13: forked (January 2019) for post-M5 changes; fork refreshed (from 3.0.x branch) February 2019
  // 2.12: forked for: build tweak, JDK 11 friendliness, comment out a test
  // fork refreshed (from 3.0.x branch) January 2019
  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["scalatest", "scalactic"]
  }

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS", "scala-parser-combinatorsNative"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scala-js-stubs"
    uri:  ${vars.uris.scala-js-stubs-uri}
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
  }

  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    // I don't see a project that aggregates JVM-only stuff, so...
    extra.projects: [
      "analysisJVM", "commonJVM", "coreJVM", "fpJVM"
      "matcherExtraJVM", "matcherJVM", "mockJVM", "junitJVM"
      "scalacheckJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // makes "configuration not public" errors downstream go away
      "set every publishMavenStyle := false"
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scala-collection-compat"
    uri:  ${vars.uris.scala-collection-compat-uri}
    extra.projects: ["compat213"]  // no Scala.js or Scalafix rules plz
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scala-collection-contrib"
    uri:  ${vars.uris.scala-collection-contrib-uri}
    extra.projects: ["scala-collection-contrib"]   // just JVM
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scala-parallel-collections"
    uri:  ${vars.uris.scala-parallel-collections-uri}
  }

  // dependency of cats
  ${vars.base} {
    name: "export-hook"
    uri:  ${vars.uris.export-hook-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["coreJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "scala-java-time"
    uri:  ${vars.uris.scala-java-time-uri}
    extra.projects: ["scalajavatimeJVM", "scalajavatimeTZDBJVM", "scalajavatimeTestsJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
    extra.commands: ${vars.base.extra.commands} [
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
      // we have wartremover, but it's better to avoid the dependency if we can, to help
      // the dependency structure flatter overall
      "removeDependency org.wartremover wartremover"
      "removeScalacOptions -P:wartremover:traverser:org.wartremover.warts.ExplicitImplicitTypes -P:wartremover:traverser:org.wartremover.warts.ImplicitConversion"
    ]
    deps.ignore: ["org.wartremover#wartremover"]
  }

  // frozen (April 2019) at April 2019 commit before source-incompatible upgrade
  // to ScalaTest 3.1
  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific? Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  // frozen (March 2018) at a March 2018 commit before an sbt-catalysts version
  // bump -- the new version wouldn't resolve, not sure why
  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    // other projects aren't pertinent or errored out (not investigated)
    extra.projects: ["specbaseJVM", "lawkitJVM", "scalatestJVM", "macrosJVM", "platformJVM", "testkitJVM"]
    extra.commands: ${vars.base.extra.commands} [
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
    ]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific? Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "wartremover"
    uri:  ${vars.uris.wartremover-uri}
    extra.exclude: ["sbt-plugin"]
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
    check-missing: false
  }

  // frozen at v1.6.0 tag because dependencies have historically been fragile.
  // (perhaps this is overly cautious now, in 2019? not sure)
  // and forked (February 2019) from that tag to make some tiny ScalaCheck 1.13 vs 1.14 tweaks so tests pass
  // 2.13: master is where 2.13 support is; frozen (May 2019) at April 2019 commit
  // before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "cats"
    uri:  ${vars.uris.cats-uri}
    // for some reason, adding the umbrella "catsJVM" project but excluding "bench"
    // (and "docs") doesn't succeed in removing the depending on cats-bench.
    // using deps.ignore doesn't fix it either. not sure how else to fix it
    // other than just enumerating what we want:
    extra.projects: [
      "coreJVM", "freeJVM", "kernelJVM",
      "lawsJVM", "macrosJVM", "testkitJVM", "testsJVM",
      "kernelLawsJVM", "alleycatsCoreJVM"
    ]
    extra.exclude: [
      // out of scope
      "bench", "docs"
    ]
    // tests are memory-hungry. hard to tell if occasional OutOfMemoryErrors are because
    // some random test input in a generative test hit a real bug, or whether memory needs
    // just fluctuate :-/  I've been gradually increasing this trying to fix an OOM in
    // ApplicativeSuite.  the repo's own .jvmopts has 6g
    extra.options: ["-Xmx6g"]
  }

  // frozen (June 2019) at June 2019 commit just before ScalaTest 3.1 upgrade.
  // (when we unfreeze, the kind-projector org change stuff can go)
  ${vars.base} {
    name: "kittens"
    uri:  ${vars.uris.kittens-uri}
    extra.projects: ["coreJVM"]  // sorry, Scala.js
    deps.inject: ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.0.0")"""
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set excludeFilter in (Test, unmanagedSources) in coreJVM := HiddenFileFilter || "partialOrder.scala" || "monoid.scala" || "semigroup.scala" || "order.scala""""
    ]
  }

  ${vars.base} {
    name: "claimant"
    uri:  ${vars.uris.claimant-uri}
    extra.exclude: ["root", "mcJS", "coreJS"]  // no Scala.js plz
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific? Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "tut"
    uri:  ${vars.uris.tut-uri}
    // just core; it's unfortunate we don't run the tests, but they all use
    // scripted-plugin, which we don't know how to make work under dbuild
    extra.projects: ["core"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // ignore missing org.scala-sbt#scripted-plugin
    check-missing: false
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
    // failed compilation on sbt 1.3.0-RC3; not investigated
    // [genjavadoc] [error] ## Exception when compiling 8 sources to /Users/tisue/community.212/target-0.9.16/project-builds/genjavadoc-6b88a0370f6ac590936bca7f545b84205dd0627f/plugin/target/scala-2.12/test-classes
    // [genjavadoc] [error] java.lang.NullPointerException
    // [genjavadoc] [error] scala.tools.nsc.backend.jvm.GenBCode$BCodePhase.close(GenBCode.scala:101)
    extra.sbt-version: ${vars.sbt-1-2-version}
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    // ScalaJSCrossVersion.scala:34:23: stable identifier required, but sbt.`package`.CrossVersion.Disabled found.
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.options: [
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      "-Xmx2048m"
    ]
    extra.projects: ["logging", "testSuite", "linker"]
    extra.commands: ${vars.default-commands} [
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
      "set MyScalaJSPlugin.wantSourceMaps in testSuite := false"
      // Seb says it isn't appropriate to compile or run tests in certain subprojects;
      // see https://github.com/scala-js/scala-js/issues/3680
      "set test in testInterface in Test := {}"
      "set test in jUnitRuntime in Test := {}"
      "set test in testBridge in Test := {}"
      "set test in jUnitAsyncJS in Test := {}"
    ]
    // as usual with scripted-plugin, sigh
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
    check-missing: false
  }

  // keep this stuff separate so the overall dependency tree is
  // flatter and when dependencies fail they don't take out every
  // specs2-using project downstream
  ${vars.base} {
    name: "specs2-more"
    uri:  ${vars.uris.specs2-uri}
    extra.projects: [
      "shapelessJVM", "catsJVM", "examplesJVM"
    ]
    extra.exclude: [
      // already built in "specs2"
      "analysisJVM", "commonJVM", "coreJVM", "fpJVM", "matcherExtraJVM", "matcherJVM",
      "mockJVM", "junitJVM", "scalacheckJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // not sure if necessary, but we have it in the specs entry, so let's have it here too
      "set every publishMavenStyle := false"
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "silencer"
    uri:  ${vars.uris.silencer-uri}
  }

  // dependency of metrics-scala, and of kafka
  ${vars.base} {
    name: "mockito-scala"
    uri:  ${vars.uris.mockito-scala-uri}
    extra.exclude: ["scalaz"]
  }

  // this repo is volatile (very frequent commits) and when it needs to
  // be rebuilt, the testing takes a long time (especially akka-more) and
  // the downstream rebuilding takes a long time too.  so in general we
  // want to freeze at a tag (preferably) or SHA (if we must).
  ${vars.base} {
    name: "akka"
    uri:  ${vars.uris.akka-uri}
    extra.options: [
      // as per their own .sbtopts file
      "-Xmx3g"
      // other customizations
      "-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false", "-Dakka.test.tags.exclude=performance,timing,long-running", "-Dakka.test.multi-in-test=false"
    ]
    extra.projects: ["akka-actor", "akka-actor-typed", "akka-testkit", "akka-actor-tests"]
    extra.commands:  ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
      // needed downstream in akka-stream and/or akka-more
      "set skip in publish in actorTests := false"
      // makes "configuration not public" errors downstream go away
      "set every publishMavenStyle := false"
      // idk why, but prevents dbuild-only sun.misc.Unsafe compile errors;
      // see https://github.com/scala/community-builds/issues/757
      "set scalacOptions in Compile in actor --= Seq(\"-release\", \"8\")"
    ]
  }

  // this is almost 1M lines of code, but it needn't be green (or be compiled at all)
  // for dependent projects to proceed, so let's keep it separate.  forked (December 2017)
  // because of trouble with scalacticMacro -- the latter has publishing disabled
  ${vars.base} {
    name: "scalatest-tests"
    uri:  ${vars.uris.scalatest-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.exclude: [
      // we already built these above
      "scalatest", "scalactic", "scalacticMacro"
      // no Scala.js plz
      "commonTestJS", "examplesJS", "scalacticJS", "scalacticMacroJS", "scalacticTestJS"
      "scalatestAppJS", "scalatestJS", "scalatestTestJS"
      // [scalatest-tests] [info] *** 5 SUITES ABORTED ***
      // [scalatest-tests] [info] *** 29 TESTS FAILED ***
      "examples"
    ]
    // needs extra heap to even compile
    extra.options: ["-Xmx3072m"]
  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
    extra.commands: ${vars.default-commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scala-stm"
    uri:  ${vars.uris.scala-stm-uri}
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific? Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra.exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
    // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    // January 2018: failure's continued existence confirmed
    // see https://github.com/scala/community-builds/pull/387
    extra.test-tasks: ["compile"]
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.base.extra.commands} [
      // because scodec-build brings in sbt-gpg which errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  ${vars.base} {
    name: "scodec"
    uri:  ${vars.uris.scodec-uri}
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.base.extra.commands} [
      // because scodec-build brings in sbt-gpg which errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: [
      "coreJS"  // no Scala.js please
      "root"    // dbuild thinks it tries to publish root#root
    ]
  }

  // forked (February 2019) from v3.7.0 (the version playframework expects);
  // https://github.com/lightbend/ssl-config/issues/142
  // is about resolving the source incompatibility on master;
  // the fork is needed until unfreeze to remove an unused sbt plugin so we don't have
  // to add a resolver (lightbend/ssl-config@b2544f853f4e62165f43a)
  ${vars.base} {
    name: "ssl-config"
    uri:  ${vars.uris.ssl-config-uri}
    extra.projects: ["sslConfigCore"]
    // repeated hangs during testing; see
    // https://github.com/scala/community-builds/issues/560
    // (last confirmed: January 2018)
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "akka-stream"
    uri:  ${vars.uris.akka-uri}
    // doc failures on sbt 1.3.0-RC1 or RC2; not investigated; we should try 1.3.0-RC3
    // Unexpected javac output: javadoc: error - invalid flag: --ignore-source-errors.
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false", "-Dakka.test.tags.exclude=performance,timing,long-running", "-Dakka.test.multi-in-test=false"
      // repo readme recommended
      "-Xmx2g"
    ]
    extra.projects: [
      "akka-stream", "akka-stream-tests"
      // not part of akka-stream, but throwing it in so that akka-http doesn't need anything from akka-more
      "akka-multi-node-testkit"
    ]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
      // makes "configuration not public" errors downstream go away
      "set every publishMavenStyle := false"
      // has been failing consistently lately, let's recheck it next time we push the tag forward
      // and report upstream if it hasn't gone away
      "set excludeFilter in (Test, unmanagedSources) in streamTests := HiddenFileFilter || \"TlsSpec.scala\""
      // prevents: Class jdk.internal.HotSpotIntrinsicCandidate not found - continuing with a stub.
      "set scalacOptions in Compile in stream --= Seq(\"-release\", \"8\")"
      "set scalacOptions in Jdk9.CompileJdk9 in stream --= Seq(\"-release\", \"11\")"
    ]
    extra.exclude: [
      // because we already built them in "akka"
      "akka-actor", "akka-actor-typed", "akka-testkit", "akka-actor-tests"
    ]
  }

  // separate from "akka"+"akka-stream" because it takes a long time to build and run the
  // tests, and so failures in obscure subprojects don't take out too much of the build
  ${vars.base} {
    name: "akka-more"
    uri:  ${vars.uris.akka-uri}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false", "-Dakka.test.tags.exclude=performance,timing,long-running", "-Dakka.test.multi-in-test=false"
      // repo readme recommended
      "-Xmx2g"
    ]
    extra.projects: ["akka-scala-nightly"]
    extra.settings: ${vars.base.extra.settings} [
      // for JDK 11. one-deeper nesting level makes it apply to build definition
      ["libraryDependencies += \"javax.xml.bind\" % \"jaxb-api\" % \"2.3.0\""]
    ]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
      // 2.13: failing test; not investigated or reported upstream
      """set excludeFilter in (Test, unmanagedSources) in actorTypedTests := HiddenFileFilter || "ActorContextPipeToSelfSpec.scala""""
    ]
    extra.exclude: [
      "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
      "akka-actor", "akka-actor-typed", "akka-actor-tests", "akka-testkit"  // because we already built them in "akka"
      "akka-stream", "akka-stream-testkit", "akka-remote", "akka-stream-tests"  // because we already built them in "akka-stream"
      "akka-bench-jmh", "akka-bench-jmh-typed"  // we'd have to add a resolver to get the JMH dependency, and we prefer not to run benchmarks here anyway
      "akka-protobuf", "akka-multi-node-testkit"  // already built these in akka-stream
    ]
  }

  // frozen (May 2019) at May 2019 commit just before breaking change to javadoc generation;
  // see https://github.com/akka/akka-http/pull/2541#issuecomment-495941809
  ${vars.base} {
    name: "akka-http"
    uri:  ${vars.uris.akka-http-uri}
    extra.exclude: ["docs", "akka-http-bench-jmh"]
    extra.options: [
      "-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false"
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
      "set sources in doc in Compile in httpCore := List()"
    ]
    // "HTTP is sadly very timing sensitive we're working on improving its stability regularly,
    // OK to disable it for now." - Konrad M, October 2016
    // reconfirmed January 2018 that some tests are failing. in one run, it was:
    // * akka.http.impl.engine.client.NewConnectionPoolSpec
    // * akka.http.impl.engine.client.HostConnectionPoolSpec
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scalariform"
    uri: ${vars.uris.scalariform-uri}
  }

  ${vars.base} {
    name: "scala-async"
    uri:  ${vars.uris.scala-async-uri}
  }

  // forked to remove minor usage of scalaz
  ${vars.base} {
    name: "prog-scala-examples"
    uri:  ${vars.uris.prog-scala-examples-uri}
  }

  ${vars.base} {
    name: "slick"
    uri:  ${vars.uris.slick-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    deps.inject: ${vars.base.deps.inject} [
      // without this dbuild doesn't pick up that one of the subprojects has this dependency.
      // it doesn't even make sense; it seems to me that testNGSettings should not be adding
      // a dependency of the plugin to the libraryDependencies of the test code.
      // the line in question is:
      //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
      // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
      "de.johoop#sbt-testng-interface"
    ]
    extra.exclude: [
      // unless we exclude, it looks for an Ornate dependency here
      "root"
      // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
      "osgitests"
      // I think these expect a Slick snapshot to have been `publishLocal`ed?
      "sample-slick-multidb", "sample-hello-slick", "sample-slick-plainsql", "sample-slick-testkit-example"
    ]
  }

  ${vars.base} {
    name: "sbt-testng"
    uri:  ${vars.uris.sbt-testng-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
  }

  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    check-missing: false  // ignore missing scalafmt
    deps.ignore: ["com.geirsson#scalafmt-core", "com.lucidchart#scalafmt-impl"]
  }

  // frozen (June 2019) at April 2019 commit just before sbt->mill move
  ${vars.base} {
    name: "acyclic"
    uri:  ${vars.uris.acyclic-uri}
  }

  // frozen (June 2019) at April 2019 commit just before sbt->mill move

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "portable-scala-reflect"
    uri:  ${vars.uris.portable-scala-reflect-uri}
    extra.projects: ["portable-scala-reflectJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
  }

  // forked to add sbt build (instead of mill)
  ${vars.base} {
    name: "fastparse"
    uri:  ${vars.uris.fastparse-uri}
    extra.commands: ${vars.default-commands} [
      // historically, too prone to unexplained failure
      "set scalaparse / Test / executeTests := Tests.Output(TestResult.Passed, Map(), Iterable())"
    ]
  }

  ${vars.base} {
    name: "geny"
    uri:  ${vars.uris.geny-uri}
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  ${vars.base} {
    name: "scalaprops"
    uri:  ${vars.uris.scalaprops-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["scalapropsJVM"]  // no Scala.js please
  }

  // frozen at v1.2.0 tag for now, perhaps excessively cautiously; we might
  // consider tracking a branch instead
  ${vars.base} {
    name: "cats-effect"
    uri:  ${vars.uris.cats-effect-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js plz
    extra.commands: ${vars.base.extra.commands} [
      // I think cats dropped its catalysts dependency but there is one source file
      // in cats-effect that still expects it to be there, though not explicitly declared.
      "set libraryDependencies in coreJVM += \"org.typelevel\" % \"catalysts-platform\" % \"0.10.0\" % Test"
    ]
    deps.inject: ${vars.base.deps.inject} ["org.typelevel#catalysts-platform"]
  }

  // frozen at last commit before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "fs2"
    uri:  ${vars.uris.fs2-uri}
    extra.projects: ["coreJVM", "io", "reactiveStreams"]  // no Scala.js, no benchmarks or docs
    extra.commands: ${vars.base.extra.commands} [
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  ${vars.base} {
    name: "parboiled"
    uri:  ${vars.uris.parboiled-uri}
    extra.projects: ["parboiled-scala"]
  }

  ${vars.base} {
    name: "parboiled2"
    uri:  ${vars.uris.parboiled2-uri}
    // failed on sbt 1.3.0-RC3; not investigated
    // java.util.zip.ZipException: duplicate entry: LICENSE
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.projects: ["parboiledJVM", "examples"]
    extra.commands: ${vars.base.extra.commands} [
      "set every scalafmtOnCompile := false"
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  ${vars.base} {
    name: "eff"
    uri:  ${vars.uris.eff-uri}
    extra.exclude: [
      "scalaz"
      // this is an aggregation project that we exclude because it adds a
      // ScalaMeter dependency
      "eff"
      // we have doobie now, but for some reason the dependency wasn't found
      // (January 2019), I didn't investigate
      "doobie"
      // we don't have catbird
      "twitter"
      // at present this doesn't compile, probably a version mismatch that will sort
      // itself out in the fullness of time, but for now:
      "monixJVM"
      // no Scala.js please
      "coreJS", "monixJS", "catsEffectJS"
    ]
  }

  // downstream projects expecting a different jackson version than the
  // one we have here are prone to errors such as:
  // com.fasterxml.jackson.databind.JsonMappingException:
  //   Scala module 2.8.8-dbuildx1c5888e4b2a136333f7edb02dbe6dc5abbfa7de1 requires Jackson Databind version >= 2.8.0 and < 2.9.0
  // for details on how this can happen, see comments on
  // https://github.com/scala/community-builds/pull/785
  // 2.13: forked for 2.13.0-RC1 compat, we should be able to unfork once they publish for RC1
  ${vars.base} {
    name: "jackson-module-scala"
    uri:  ${vars.uris.jackson-module-scala-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // surely they'll drop this crufty thing from their build eventually,
    // but for the time being we need to fill in something:
    extra.options: ["-Djava7.home="${JAVA_HOME}]
    extra.commands: ${vars.base.extra.commands} [
      // the `-bootclasspath ...` thing their build does doesn't work on Java 9
      "set javacOptions ~= (_.dropRight(2))"
    ]
  }

  // tracking "develop" branch.
  // try master instead if develop proves too fragile?
  // frozen (July 2019) at July 2019 commit just before `BypassScheduler` change which broke finagle downstream;
  //   eventually I suppose finagle will upgrade and we can unfreeze again
  ${vars.base} {
    name: "twitter-util"
    uri:  ${vars.uris.twitter-util-uri}
    extra.exclude: [
      // this isn't really necessary and would pull in a JMH dependency
      "util-benchmark"
      // this is 2.11-only
      "util-intellij"
    ]
    // recommended at https://github.com/twitter/util/issues/173:
    // "We use that when we don't think the tests will be reliable in a ci environment"
    extra.options: ["-DSKIP_FLAKY=true"]
  }

  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // [error] java.lang.NoClassDefFoundError: xsbt/ZincCompiler$sbtDependency$
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.exclude: [
      // we don't compile sbt plugins
      "sbtplugin"
    ]
    extra.options: ["-Xmx4g"]
    // ignore missing scripted-sbt (https://github.com/sbt/sbt/issues/3917 ?)
    deps.ignore: ["org.scala-sbt#scripted-sbt"]
    check-missing: false
  }

  ${vars.base} {
    name: "mouse"
    uri:  ${vars.uris.mouse-uri}
    extra.projects: ["crossJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "spray-json"
    uri:  ${vars.uris.spray-json-uri}
    extra.projects: ["sprayJsonJVM"]
    extra.commands: ${vars.default-commands} [
      // needed on JDK 11+, as per https://github.com/scala/community-builds/issues/796#issuecomment-423395500
      """set sprayJsonJVM / Compile / doc / scalacOptions --= Seq("-release", "8")"""
    ]
  }

  ${vars.base} {
    name: "scalikejdbc"
    uri:  ${vars.uris.scalikejdbc-uri}
    // don't build sbt plugin
    extra.exclude: ["mapper-generator"]
    // ignore missing scripted-sbt (https://github.com/sbt/sbt/issues/3917 ?)
    deps.ignore: ["org.scala-sbt#scripted-sbt"]
    check-missing: false
  }

  ${vars.base} {
    name: "scopt"
    uri:  ${vars.uris.scopt-uri}
    extra.projects: ["scoptJVM"]  // no Scala.js plz
  }

  // dependency of scopt
  ${vars.base} {
    name: "expecty"
    uri:  ${vars.uris.expecty-uri}
    extra.projects: ["expectyJVM"]
  }

  ${vars.base} {
    name: "twirl"
    uri:  ${vars.uris.twirl-uri}
    extra.exclude: ["plugin", "apiJS"]
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
    check-missing: false
  }

  ${vars.base} {
    name: "play-doc"
    uri:  ${vars.uris.play-doc-uri}
  }

  // right now (May 2019) we're frozen at a May 2019 commit before some source-incompatible changes;
  // see https://github.com/scala/community-builds/issues/912
  ${vars.base} {
    name: "play-json"
    uri:  ${vars.uris.play-json-uri}
    extra.projects: ["play-jsonJVM"]  // no Scala.js plz
  }

  // tracking 1.1.x branch since there are source-incompatible changes on master;
  // see https://github.com/scala/community-builds/pull/838#issuecomment-455371993
  ${vars.base} {
    name: "cachecontrol"
    uri:  ${vars.uris.cachecontrol-uri}
  }

  // playframework and play-ws tend to get a bit out of sync with each other so it's generally better
  // to have play-ws frozen at tag, unless it's forked.
  // right now (May 2019) we're frozen at a May 2019 commit before some source-incompatible changes;
  // see https://github.com/scala/community-builds/issues/912
  ${vars.base} {
    name: "play-ws"
    uri:  ${vars.uris.play-ws-uri}
    // NullPointerException in CachingSpec
    // (https://github.com/scala/community-builds/issues/564)
    extra.exclude: ["integration-tests", "bench"]
  }

  // dependency of play-file-watch
  ${vars.base} {
    name: "better-files"
    uri: ${vars.uris.better-files-uri}
    extra.commands: ${vars.default-commands} [
      // keep scalafmtSbtCheck from complaining about code dbuild injects
      "set checkFormat := {}"
    ]
  }

  // dependency of playframework
  ${vars.base} {
    name: "play-file-watch"
    uri:  ${vars.uris.play-file-watch-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
  }

  ${vars.base} {
    name: "playframework"
    uri:  ${vars.uris.playframework-uri}
    // compilation failure on sbt 1.3.0-RC3; not investigated
    // error] Symbol 'type play.api.libs.ws.WSBodyWritables' is missing from the classpath
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.exclude: [
      "Play-Docs", "Sbt-Plugin", "Play-Docs-Sbt-Plugin"  // out of scope
      "Play-Integration-Test"  // TODO/WIP, see https://github.com/scala/community-builds/pull/819
      "Play-Microbenchmark" // out of scope (and besides, requires Play-Integration-Test)
      // 2.13: the following projects happen to be green in the 2.12.x build just because
      // sbt 1 itself is on 2.12.x. logically we could exclude them as out of scope
      // even in 2.12.x, and we should if they cause trouble, but for now let's just
      // exclude them here in 2.13.x:
      "Sbt-Routes-Compiler", "Run-Support"
    ]
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
    check-missing: false
  }

  // 3.6 is the current stable branch (as of March 2019);
  // there is also a development branch.  we are forked from the 3.6 branch
  // to relocate some scalaz-based tests
  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    extra.exclude: ["json4s-scalaz"]
    extra.commands: ${vars.default-commands} [
      "set every mimaPreviousArtifacts := Set()"
    ]
  }

  // frozen (April 2019) at last green commit, not investigated
  ${vars.base} {
    name: "lift-json"
    uri:  ${vars.uris.lift-json-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["lift-json"]
    extra.commands: ${vars.default-commands} [
      """set libraryDependencies += "org.scala-lang.modules" %% "scala-xml" % "1.2.0""""
    ]
  }

  ${vars.base} {
    name: "sconfig"
    uri:  ${vars.uris.sconfig-uri}
    extra.exclude: ["sconfigNative", "sconfigJS"]
    extra.commands: ${vars.default-commands} [
      // spray org change (July 2019). presumably before long spray-json will
      // publish their Scala.js/Native support, Eric will change sconfig to use it,
      // and we'll be able to remove this stuff.
      "removeDependency io.crashbox spray-json"
      """set libraryDependencies in sconfigJVM += "io.spray" %% "spray-json" % "0.0.0""""
    ]
    deps.inject: ["io.spray#spray-json"]
  }

  // 2.13: tracking master since that's where 2.13 support landed
  ${vars.base} {
    name: "scalamock"
    uri:  ${vars.uris.scalamock-uri}
    extra.projects: ["scalamockJVM", "examplesJVM"]
  }

  // frozen (July 2019) at June 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "monocle"
    uri:  ${vars.uris.monocle-uri}
    // try to enable more subprojects?
    extra.projects: ["coreJVM", "macrosJVM", "lawJVM", "genericJVM"]
    extra.commands: ${vars.base.extra.commands} [
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
    ]
  }

  ${vars.base} {
    name: "scala-ssh"
    uri:  ${vars.uris.scala-ssh-uri}
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    extra.commands: ${vars.default-commands} [
      "set every scalafmtOnCompile := false"
    ]
    check-missing: false  // ignore missing scalafmt
    deps.ignore: ["com.geirsson#scalafmt-core", "com.lucidchart#scalafmt-impl"]
    // Known test failures: https://github.com/sirthias/scala-ssh/issues/38
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "scalameter"
    uri:  ${vars.uris.scalameter-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    deps.ignore: [
      // doesn't support 2.12 (yet?)
      "org.mongodb#casbah"
      // this one is unmaintained and doesn't support Scala 2.12...
      "com.decodified#scala-ssh"
    ]
    deps.inject: ${vars.base.deps.inject} [
      // ...but this one does
      "com.veact#scala-ssh"
    ]
    extra.commands: ${vars.default-commands} [
      "removeDependency com.decodified scala-ssh"
      "removeDependency org.mongodb casbah"
      "removeDependency org.mongodb.scala mongo-scala-driver"
    ]
  }

  // we can unfork once https://github.com/mdedetrich/scalajson/pull/52
  // is merged (if it is updated to include the scalafmt upgrade I suggested)
  ${vars.base} {
    name: "scalajson"
    uri:  ${vars.uris.scalajson-uri}
    // no Scala.js please, and no benchmarks either
    extra.projects: ["scalaJsonJVM"]
  }

  // frozen (June 2019) at June 2019 commit just before sbt->mill move
  ${vars.base} {
    name: "scalatags"
    uri:  ${vars.uris.scalatags-uri}
    extra.projects: ["scalatagsJVM"]  // no Scala.js
  }

  // frozen (August 2019) because newer commits break monix
  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM", "lawsLegacyJVM"]  // no Scala.js
  }

  // forked awaiting merge of https://github.com/monix/monix/pull/875
  ${vars.base} {
    name: "monix"
    uri:  ${vars.uris.monix-uri}
    extra.options: ["-Dmonix.requireJava8=false"]
    // no Scala.js, no benchmarks.
    extra.projects: ["coreJVM"]
  }

  // frozen (April 2019) at a March 2019 commit before PR #440
  // started causing netty-related compile errors, downstream
  // in dispatch. I didn't investigate
  ${vars.base} {
    name: "unfiltered"
    uri:  ${vars.uris.unfiltered-uri}
  }

  // frozen (April 2019) because of some netty classpath problem (not investigated)
  ${vars.base} {
    name: "dispatch"
    uri:  ${vars.uris.dispatch-uri}
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
    extra.exclude: ["coreJS", "testingJS"]
    // failed tests on 1.3; not investigated
    extra.sbt-version: ${vars.sbt-1-2-version}
  }

  // frozen (April 2019) at v0.14.0 tag since that's the version http4s wants
  ${vars.base} {
    name: "blaze"
    uri: ${vars.uris.blaze-uri}
    // failed extraction on 1.3.0-RC3; not investigated
    // [blaze] [error] (update) sbt.librarymanagement.ResolveException: Error downloading org.xerial.sbt:sbt-sonatype;sbtVersion=1.0;scalaVersion=2.12:1.1
    extra.sbt-version: ${vars.sbt-1-2-version}
  }

  // frozen (June 2019) at May 2019 commit just before sbt->mill move
  ${vars.base} {
    name: "fansi"
    uri:  ${vars.uris.fansi-uri}
    extra.projects: ["fansiJVM"]  // no Scala.js
    extra.commands: ${vars.base.extra.commands} [
      "removeScalacOptions -target:jvm-1.7"
    ]
  }

  // frozen (June 2019) at May 2019 commit just before sbt->mill move
  ${vars.base} {
    name: "pprint"
    uri:  ${vars.uris.pprint-uri}
    extra.projects: ["pprintJVM"]  // no Scala.js
    // we could re-enable tests if https://github.com/lihaoyi/PPrint/pull/23
    // is updated for 2.12.8 and merged
    extra.test-tasks: ["compile"]
    extra.commands: ${vars.base.extra.commands} [
      "removeScalacOptions -target:jvm-1.7"
    ]
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "algebra"
    uri:  ${vars.uris.algebra-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js, no benchmarks, no docs
  }

  ${vars.base} {
    name: "scalaj-http"
    uri:  ${vars.uris.scalaj-http-uri}
    // https://github.com/scalaj/scalaj-http/issues/164
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "lightbend-emoji"
    uri:  ${vars.uris.lightbend-emoji-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  // others are not depending on this yet ("not ready for general
  // population yet", says Owein in March 2017) but I was interested
  // in including it anyway just to have a few more compiler plugins
  // in the build, it's an underrepresented category.  we can freeze
  // or drop it if it proves to be trouble
  ${vars.base} {
    name: "twotails"
    uri:  ${vars.uris.twotails-uri}
  }

  ${vars.base} {
    name: "scala-gopher"
    uri:  ${vars.uris.scala-gopher-uri}
    // too many intermittent failures -- reported at
    // https://github.com/rssh/scala-gopher/issues/20
    extra.test-tasks: ["compile"]
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  // dependency of scalameta
  ${vars.base} {
    name: "scalapb"
    uri:  ${vars.uris.scalapb-uri}
    // just what scalameta needs, for now
    extra.projects: ["runtimeJVM"]
  }

  // frozen (July 2019) at June 2019 commit just before ScalaTest 3.1 upgrade (which also landed 2.13 support)
  ${vars.base} {
    name: "paiges"
    uri:  ${vars.uris.paiges-uri}
    extra.projects: ["coreJVM", "catsJVM"]  // but not "benchmark"
    // 2.13: tests don't compile until the catalysts dependency is dropped;
    // probably just wait for the maintainers to do their 2.13.0-RC2/Cats 2 upgrade
    extra.run-tests: false
  }

  ${vars.base} {
    name: "case-app"
    uri:  ${vars.uris.case-app-uri}
    // coursier-related errors
    extra.sbt-version: ${vars.sbt-1-2-version}
    // this is enough for scalafix, I didn't even try adding the rest
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "doodle"
    uri: ${vars.uris.doodle-uri}
    // [doodle] [error] Symbol 'type doodle.explore.syntax.ExploreSyntax' is missing from the classpath.
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.projects: [
      "coreJVM", "java2d", "exploreJVM", "imageJVM", "turtleJVM"  // no Scala.js plz
    ]
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "scala-collection-laws"
    uri: ${vars.uris.scala-collection-laws-uri}
    // as per the repo readme
    extra.options: ["-XX:MaxMetaspaceSize=1G", "-Xmx6G"]
    extra.commands: ${vars.default-commands} [
      "laws/run"
    ]
  }

  ${vars.base} {
    name: "scalastyle"
    uri: ${vars.uris.scalastyle-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.options: ["-Dscalastyle.publish-ivy-only=true"]
  }

  ${vars.base} {
    name: "play-webgoat"
    uri: ${vars.uris.play-webgoat-uri}
    // compilation failure on 1.3; not investigated
    // object index is not a member of package views.html
    extra.sbt-version: ${vars.sbt-1-2-version}
    // not sure how this gets pulled in but it's just doc not code, I think?
    // so let's just ignore that it's missing
    extra.commands: ${vars.default-commands} [
      "removeDependency com.typesafe.play play-omnidoc"
    ]
  }

  ${vars.base} {
    name: "gigahorse"
    uri:  ${vars.uris.gigahorse-uri}
    // as of August 2017, doesn't compile against latest akka-http
    extra.exclude: ["akkaHttp"]
  }

  ${vars.base} {
    name: "sbt-io"
    uri:  ${vars.uris.sbt-io-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  ${vars.base} {
    name: "coursier"
    uri:  ${vars.uris.coursier-uri}
    extra.projects: ["jvm"]
  }

  // dependency of scala-debugger. we track the develop branch, since
  // master seems neglected/outdated
  ${vars.base} {
    name: "scallop"
    uri:  ${vars.uris.scallop-uri}
    extra.projects: ["scallopJVM"]  // no Scala.js or Scala Native plz
  }

  // dependency of scaladex
  ${vars.base} {
    name: "nscala-time"
    uri:  ${vars.uris.nscala-time-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
  }

  // dependency of scaladex.  we could add more subprojects, perhaps,
  // but until Scaladex is on 2.13, it isn't a priority
  ${vars.base} {
    name: "elastic4s"
    uri:  ${vars.uris.elastic4s-uri}
    extra.projects: ["elastic4s-core"]
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific:
      // [error] java.lang.RuntimeException: Credentials file /Users/tisue/.sbt/specs2.credentials does not exist
      "set every credentials := Seq()"
    ]
  }

  // dependency of elastic4s
  ${vars.base} {
    name: "sksamuel-exts"
    uri:  ${vars.uris.sksamuel-exts-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.commands: ${vars.default-commands} [
      // reported upstream at https://github.com/sksamuel/exts/commit/5f69f7254d9ad58a94dd304a0e1cdb560486d6c2#r29458859
      "set excludeFilter in (Test, unmanagedSources) := HiddenFileFilter || \"FileWatcherTest.scala\""
    ]
  }

  // dependency of sttp
  ${vars.base} {
    name: "akka-http-cors"
    uri:  ${vars.uris.akka-http-cors-uri}
    extra.exclude: ["akka-http-cors-bench-jmh"]
    // not really sure why akka-testkit doesn't get picked up, maybe a "provided" dependency issue?
    extra.commands: ${vars.default-commands} [
      "set libraryDependencies in `akka-http-cors` += \"com.typesafe.akka\" %% \"akka-testkit\" % \"0.0.0\" % Test"
    ]
    deps.inject: ${vars.base.deps.inject} [
      "com.typesafe.akka#akka-testkit"
    ]
  }

  // was originally added as a dependency of scaladex, and we
  // only attempted the subproject scaladex needs.  the dependency
  // isn't there anymore, so we could drop this if it acts up.
  ${vars.base} {
    name: "akka-http-session"
    uri:  ${vars.uris.akka-http-session-uri}
    extra.projects: ["core"]
    extra.commands: ${vars.default-commands} [
      // not really sure why akka-testkit doesn't get picked up, maybe a "provided" dependency issue?
      "set libraryDependencies in core += \"com.typesafe.akka\" %% \"akka-testkit\" % \"0.0.0\" % Test"
      // kind projector org change
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.10.0")"""
      // paradise is on earth now
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
      "removeDependency org.spire-math kind-projector"
    ]
    deps.inject: ${vars.base.deps.inject} [
      "org.typelevel#kind-projector"
      // not really sure why this doesn't get picked up, maybe a "provided" dependency issue?
      "com.typesafe.akka#akka-testkit"
    ]
  }

  ${vars.base} {
    name: "paradox"
    uri:  ${vars.uris.paradox-uri}
    extra.exclude: ["plugin", "themePlugin", "genericTheme"]
    check-missing: false  // ignore missing scripted-sbt, kind-projector
    deps.inject: ${vars.base.deps.inject} [ "org.typelevel#kind-projector" ]
    extra.commands: ${vars.default-commands} [
      // kind projector org change
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.10.0")"""
    ]
    deps.ignore: ["org.spire-math#kind-projector"]
    deps.inject: ${vars.base.deps.inject} ["org.typelevel#kind-projector"]
  }

  // dependency of lagom. forked (August 2018) at last green version,
  // since newer commits break lagom; see https://github.com/lagom/lagom/issues/1413
  // the fork is so we could cherry-pick https://github.com/akka/akka-persistence-cassandra/pull/377
  // for JDK 11 friendliness
  ${vars.base} {
    name: "akka-persistence-cassandra"
    uri:  ${vars.uris.akka-persistence-cassandra-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.test-tasks: "compile"
  }

  // dependency of lagom
  ${vars.base} {
    name: "akka-persistence-jdbc"
    uri:  ${vars.uris.akka-persistence-jdbc-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // at least one test was hanging
    extra.test-tasks: "compile"
  }

  // dependency of lagom
  // 2.13: using fork until https://github.com/akka/akka-management/pull/557 is merged
  ${vars.base} {
    name: "akka-management"
    uri:  ${vars.uris.akka-management-uri}
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    extra.projects: ["akka-management", "cluster-bootstrap", "cluster-http", "integration-test-kubernetes-api-java", "integration-test-local", "integration-test-kubernetes-dns", "integration-test-aws-api-ec2-tag-based", "integration-test-kubernetes-api", "akka-discovery-aws-api", "akka-discovery-kubernetes-api", "akka-discovery-consul", "akka-discovery-marathon-api"]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.test-tasks: "compile"
  }

  // TODO: drop, but here as backstop for lagom (no kafka yet for 2.13)
  {
    name: "akka-stream-kafka-ivy"
    system: ivy
    uri: "ivy:com.typesafe.akka#akka-stream-kafka_2.12;1.0.2"
  }

  // there are a *ton* of subprojects.  it might be interesting to try to add
  // as many as possible. for now, we've somewhat arbitrarily selected a few.
  // frozen (November 2018), trying to get the latest latest working was getting annoying,
  // we can revisit it in a few weeks or months
  ${vars.base} {
    name: "lagom"
    uri:  ${vars.uris.lagom-uri}
    // these pull in a number of dependent projects
    extra.projects: ["api-scaladsl", "client-scaladsl", "server-scaladsl", "persistence-scaladsl"]
    extra.options: [
      // hopefully avoid intermittent OutOfMemoryErrors with default heap
      "-Xmx2g"
    ]
    extra.test-tasks: "compile"
    extra.commands: ${vars.default-commands} [
      // tests in these subprojects are too slow and (more importantly) too fragile
      // "set executeTests in `persistence-cassandra-scaladsl` in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
      // "set executeTests in `testkit-scaladsl` in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
      // more flaky tests I haven't reported upstream
      "set excludeFilter in (Test, unmanagedSources) in `server-scaladsl` := HiddenFileFilter || \"LagomApplicationSpec.scala\""
    ]
    // [error] **** Missing dependency: the library org.scala-sbt#scripted-plugin is not provided (in space "scala.main") by any project in this configuration file.
    check-missing: false
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
  }

  // not (as of January 2018 anyway) an actively maintained project, so it's
  // droppable if it acts up
  ${vars.base} {
    name: "scala-sculpt"
    uri:  ${vars.uris.scala-sculpt-uri}
  }

  ${vars.base} {
    name: "singleton-ops"
    uri:  ${vars.uris.singleton-ops-uri}
    extra.projects: ["singleton_opsJVM"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    extra.options: [
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "metrics-scala"
    uri:  ${vars.uris.metrics-scala-uri}
    extra.exclude: ["metricsAkka24"]  // our Akka version is 25
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  // forked (August 2019) because some classpath-handling code didn't
  // work under dbuild
  ${vars.base} {
    name: "scapegoat"
    uri:  ${vars.uris.scapegoat-uri}
  }

  ${vars.base} {
    name: "linter"
    uri:  ${vars.uris.linter-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // test failures; see https://github.com/scala/community-builds/pull/696
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "scala-newtype"
    uri:  ${vars.uris.scala-newtype-uri}
    extra.exclude: ["newtypeJS", "catsTestsJS"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "fast-string-interpolator"
    uri:  ${vars.uris.fast-string-interpolator-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // Missing dependency: com.dongxiguo#fastring
    extra.exclude: ["fsi-benchmark", "fsi-benchmark-core"]
  }

  // frozen (June 2019) at a June 2019 config just before a sbt-coursier
  // version bump that seems to be confusing dbuild during dependency extraction:
  // [scalacheck-shapeless] [error] java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
  // [scalacheck-shapeless] [error] 	at coursier.sbtcoursier.ResolutionTasks$.$anonfun$resolutionsTask$3(ResolutionTasks.scala:42)
  ${vars.base} {
    name: "scalacheck-shapeless"
    uri:  ${vars.uris.scalacheck-shapeless-uri}
    extra.projects: ["coreJVM", "testJVM"]  // no Scala.js plz
    // weird missing self-dependency in testJVM project: "the library
    // com.github.alexarchambault#scalacheck-shapeless is not provided
    // (in space "default") by any project in this configuration file."
    check-missing: false
    // (January 2018) "recursiveADT2" test fails
    extra.test-tasks: ["compile"]
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
  }

  ${vars.base} {
    name: "curryhoward"
    uri:  ${vars.uris.curryhoward-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // I guess dbuild is getting confused by the extra _1.13?
    deps.ignore: ["com.github.alexarchambault#scalacheck-shapeless"]
    deps.inject: ${vars.base.deps.inject} [
      "com.github.alexarchambault#scalacheck-shapeless_1.13"
    ]
    check-missing: false
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  // dependency of magnolia
  ${vars.base} {
    name: "mercator"
    uri:  ${vars.uris.mercator-uri}
    extra.projects: ["coreJVM", "tests"]
    extra.commands: ${vars.base.extra.commands} [
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
    ]
  }

  ${vars.base} {
    name: "magnolia"
    uri:  ${vars.uris.magnolia-uri}
    extra.projects: ["coreJVM", "examplesJVM", "tests"]
    extra.commands: ${vars.base.extra.commands} [
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
    ]
  }

  // dependency of giter8
  // forked May 2018 because giter8 uses a version (2.1.2) that's source-incompatible.
  // so we forked off the release-2.1.4 tag.
  // our fork also has a commit to use a dbuild-friendly sbt-bintray version.
  // (I submitted that change upstream, to master, but having it on master doesn't help us here.)
  ${vars.base} {
    name: "scalasti"
    uri:  ${vars.uris.scalasti-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // we really just want scalasti because it's a dependency of giter8, so
    // this doesn't seem worth troubleshooting:
    // [scalasti] [error] Failed tests:
    // [scalasti] [error]       org.clapper.scalasti.StringTemplateSpec
    extra.test-tasks: ["compile"]
  }

  // dependency of giter8
  ${vars.base} {
    name: "grizzled"
    uri:  ${vars.uris.grizzled-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // why we get wartremover failures in the community build that presumably
      // don't happen in Brian's own CI, I have no idea. doesn't seem worth
      // investigating
      "set every wartremoverErrors := Seq()"
    ]
  }

  // dependency of giter8
  ${vars.base} {
    name: "classutil"
    uri:  ${vars.uris.classutil-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      "set every bintrayOmitLicense := true"  // otherwise it complains we don't have one
    ]
  }

  ${vars.base} {
    name: "giter8"
    uri:  ${vars.uris.giter8-uri}
    extra.exclude: ["plugin", "scaffold"]  // these are sbt plugins
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // in recent ScalaMock this is no longer a separate artifact
      "removeDependency org.scalamock scalamock-scalatest-support"
    ]
    check-missing: false  // ignore missing scripted-sbt
  }

  // frozen (May 2019) just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "spire"
    uri:  ${vars.uris.spire-uri}
    // hopefully avoid intermittent OutOfMemoryErrors during compilation
    extra.options: ["-Xmx2560m"]
    // this is all of spireJVM but omitting "benchmark". just excluding "benchmark" didn't work, idk why
    extra.projects: ["legacyJVM", "dataJVM", "macrosJVM", "utilJVM", "platformJVM", "coreJVM", "extrasJVM", "lawsJVM", "examples", "testsJVM", "spireJVM"]
    extra.exclude: ["benchmark"]
    extra.commands: ${vars.base.extra.commands} [
      "removeDependency org.openjdk.jmh jmh-core"
      "removeDependency org.openjdk.jmh jmh-generator-bytecode"
      "removeDependency org.openjdk.jmh jmh-generator-reflection"
    ]
  }

  ${vars.base} {
    name: "breeze"
    uri:  ${vars.uris.breeze-uri}
    // tests don't compile, could be a ScalaCheck 1.13 vs 1.14 thing?
    // see https://github.com/scala/community-builds/pull/722
    extra.run-tests: false
    // spire moved from org.spire to org.typelevel but breeze hasn't
    // changed their dependency yet
    deps.inject: ["org.typelevel#spire"]
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
      "removeDependency org.spire-math spire"
    ]
  }

  // OlegYch's fork hangs out in scala/scala (Gitter) and #scala (IRC).
  // 2.13: support is on master, but requires ScalaTest 3.1
  ${vars.base} {
    name: "multibot"
    uri:  ${vars.uris.multibot-uri}
    extra.commands: ${vars.base.extra.commands} [
      "removeDependency org.scalaz scalaz-iteratee"
      "removeDependency org.scalaz scalaz-effect"
      "removeDependency org.scalaz scalaz-concurrent"
      "removeDependency org.scalaz scalaz-ioeffect"
    ]
  }

  // shaded version of fastparse 1 for scalameta's private use;
  // forked for needed 2.13 changes
  ${vars.base} {
    name: "fastparse-scalameta"
    uri:  ${vars.uris.fastparse-scalameta-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: [
      "fastparseJVM"   // no Scala.js plz
      "scalaparseJVM"  // scalatex needs this
    ]
    extra.commands: ${vars.default-commands} [
      // historically, too prone to unexplained failure
      "set executeTests in scalaparseJVM in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
    ]
  }

  ${vars.base} {
    name: "scalameta"
    uri:  ${vars.uris.scalameta-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: [
      "semanticdbScalacPlugin", "testsJVM"
      // we may need to re-add other subprojects to get scalafix and/or scalafmt working on 2.13
    ]
    extra.commands: ${vars.default-commands} [
      // use right version-specific source directories regardless of our weird dbuild Scala version numbers
      """set unmanagedSourceDirectories in (commonJVM, Compile) += baseDirectory.value / "scalameta" / "common" / "shared" / "src" / "main" / "scala-2.13""""
      """set unmanagedSourceDirectories in (semanticdbScalacCore, Compile) += baseDirectory.value / "semanticdb" / "scalac" / "library" / "src" / "main" / "scala-2.13""""
      // testkit compiles on 2.13, but its tests don't (not just in the community build context,
      // the problem exists upstream as well)
      """set unmanagedSourceDirectories in (testkit, Test) := Seq()"""
    ]
  }

  // dependency of scaladex (via akka-http-json)
  ${vars.base} {
    name: "jsoniter-scala"
    uri:  ${vars.uris.jsoniter-scala-uri}
    extra.exclude: ["jsoniter-scala-benchmark"]
  }

  // compile-time only dependency of jsoniter-scala
  ${vars.base} {
    name: "expression-evaluator"
    uri:  ${vars.uris.expression-evaluator-uri}
  }

  // 2.13: forked (August 2019) to use scalameta fork of scalaparse+fastparse v1
  ${vars.base} {
    name: "scalatex"
    uri:  ${vars.uris.scalatex-uri}
    extra.exclude: [
      "scalatexSbtPlugin"  // we never build sbt plugins
      "site", "readme", "scrollspy"  // these use Scala.js
    ]
    deps.inject: ["org.scalameta#scalaparse"]
    extra.commands: ${vars.default-commands} [
      "removeDependency com.lihaoyi scalaparse"
      """set libraryDependencies in api += "org.scalameta" %% "scalaparse" % "0.0.0""""
    ]
    // ignore missing scripted-sbt. don't know why
    deps.ignore: ["org.scala-sbt#scripted-sbt"]
    check-missing: false
  }

  // frozen (July 2019) at a commit just before some ScalaTest 3.1 specific code was added
  ${vars.base} {
    name: "better-monadic-for"
    uri:  ${vars.uris.better-monadic-for-uri}
    extra.exclude: [
      "scalazTests"
      // 2.13: pcplod is unmaintained, there is no 2.13 version
      "pcplodTests"
    ]
  }

  ${vars.base} {
    name: "metaconfig"
    uri:  ${vars.uris.metaconfig-uri}
    extra.projects: ["hoconJVM", "typesafe"]  // no Scala.js plz
    // I guess dbuild is getting confused by the extra _1.13?
    deps.ignore: ["com.github.alexarchambault#scalacheck-shapeless"]
    deps.inject: ${vars.base.deps.inject} [
      "com.github.alexarchambault#scalacheck-shapeless_1.13"
    ]
    check-missing: false
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
    extra.commands: ${vars.default-commands} [
      // https://github.com/olafurpg/metaconfig/issues/59
      "set excludeFilter in (Test, unmanagedSources) in coreJVM := HiddenFileFilter || \"CliSuite.scala\""
    ]
  }

  // forked (June 2018, refreshed October 2018) to disable IntelliJ stuff
  // we would need an extra resolver for (and is maybe out of scope anyway)
  ${vars.base} {
    name: "scalafmt"
    uri:  ${vars.uris.scalafmt-uri}
    extra.projects: ["coreJVM", "cli", "tests"]
    extra.options: [
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
  }

  // frozen (September 2018) at a September 2018 commit just before a scalameta
  // version bump.  we *could* try to move them forward together, and we will
  // at some point, but for now, choosing stability.
  ${vars.base} {
    name: "scalafix"
    uri:  ${vars.uris.scalafix-uri}
    extra.exclude: ["docs"]
    extra.commands: ${vars.default-commands} [
      // only used by ScalafixImplSuite and ToolClasspathSuite
      "removeDependency com.geirsson coursier-small"
      // java.lang.IllegalStateException: unable to auto-detect semanticdb-scalac compiler plugin
      //   at scalafix.tests.cli.ScalafixImplSuite.$anonfun$semanticdbPluginPath$1(ScalafixImplSuite.scala:37)
      //   at scala.Option.getOrElse(Option.scala:121)
      //   at scalafix.tests.cli.ScalafixImplSuite.semanticdbPluginPath(ScalafixImplSuite.scala:36)
      // and the ToolClasspathSuite one is https://github.com/scalacenter/scalafix/issues/896
      // as for PrettyExpectSuite/SaveExpect, see https://github.com/scala/community-builds/issues/935 for details;
      //   it should start passing again once we're on a scalameta version that supports Scala 2.12.9
      """set excludeFilter in (Test, unmanagedSources) in unit := HiddenFileFilter || "ScalafixImplSuite.scala" || "ToolClasspathSuite.scala" || "PrettyExpectSuite.scala" || "SaveExpect.scala""""
    ]
    extra.settings: ${vars.base.extra.settings} [
      // for JDK 11. one-deeper nesting level makes it apply to build definition
      ["libraryDependencies += \"javax.xml.bind\" % \"jaxb-api\" % \"2.3.0\""]
    ]
  }

  // I know, it's a little weird to include my personal Project Euler
  // solutions, but it's actually a pretty broad-ranging assortment of
  // small, self-contained tests of the collections API. It has
  // caught many Scala bugs over the years. - Seth
  ${vars.base} {
    name: "euler"
    uri:  ${vars.uris.euler-uri}
    // some solutions are heap-hungry; serial execution avoids intermittent OOM
    extra.commands: ${vars.default-commands} [
      "set parallelExecution in Test := false"
    ]
    // hungry hungry heapos
    extra.options: ["-Xmx4g"]
  }

  ${vars.base} {
    name: "airframe"
    uri:  ${vars.uris.airframe-uri}
    extra.projects: ["communityBuild"]  // no Scala.js plz
    extra.exclude: ["jmx"]  // on JDK 11: java.lang.ClassNotFoundException: sun.management.Agent
  }

  // Kafka doesn't have its own sbt build, but Enno made one on his branch
  // (and he's handling things like test exclusions there)
  ${vars.base} {
    name: "kafka"
    uri:  ${vars.uris.kafka-uri}
    extra.commands: ${vars.default-commands} [
      """set core / unmanagedSources / excludeFilter := HiddenFileFilter || "ConsumerBounceTest.scala""""
    ]
  }

  ${vars.base} {
    name: "pascal"
    uri:  ${vars.uris.pascal-uri}
  }

  ${vars.base} {
    name: "mdoc"
    uri:  ${vars.uris.mdoc-uri}
    extra.exclude: [
      "lsp"  // Olaf says: "please exclude [...] it's an undocumented and untested module"
      "js", "jsdocs", "docs", "unit"  // no Scala.js plz
    ]
    // ignore missing scripted-sbt (https://github.com/sbt/sbt/issues/3917 ?)
    deps.ignore: ["org.scala-sbt#scripted-sbt"]
    check-missing: false
  }

  // dependency of scribe
  // frozen (June 2019) at a May 2019 commit just before a 2.13 upgrade that broke
  // scribe downstream. presumably eventually scribe will adapt and we can unfreeze
   ${vars.base} {
    name: "perfolation"
    uri:  ${vars.uris.perfolation-uri}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "scribe"
    uri:  ${vars.uris.scribe-uri}
    extra.projects: ["coreJVM", "macrosJVM", "slf4j"]
    extra.commands: ${vars.default-commands} [
      // intermittently failing test I haven't gotten around to reporting upstream
      "set excludeFilter in (Test, unmanagedSources) in coreJVM := HiddenFileFilter || \"FileLoggingSpec.scala\""
      // failure here looks like a time zone mistake
      "set excludeFilter in (Test, unmanagedSources) in slf4j := HiddenFileFilter || \"SLF4JSpec.scala\""
    ]
  }

  ${vars.base} {
    name: "quicklens"
    uri:  ${vars.uris.quicklens-uri}
    extra.projects: ["quicklensJVM"]
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific? Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "kits"
    uri:  ${vars.uris.kits-uri}
  }

  // there is a "develop" branch, but master seemed like a better bet
  // frozen (July 2019) at last commit before it stopped extracting with
  // sbt.librarymanagement.ResolveException: unresolved dependency: com.twitter#scrooge-generator_2.12;19.7.0: not found
  ${vars.base} {
    name: "finagle"
    uri:  ${vars.uris.finagle-uri}
    // I didn't attempt to add any other subprojects
    extra.projects: ["finagle-core"]
  }

]}

//// space: jawn_0_11

build += {

  space: scala.main.jawn_0_11

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "boopickle"
    uri:  ${vars.uris.boopickle-uri}
    extra.projects: ["boopickleJVM", "shapelessJVM"]  // no Scala.js, no "perftests"
  }

  ${vars.base} {
    name: "enumeratum"
    uri:  ${vars.uris.enumeratum-uri}
    extra.projects: [
      // for some reason dbuild doesn't seem to pick up on which subprojects
      // depend on each other, so we have to list them individually (even
      // though e.g. coreJVMTests depends on both coreJVM and macrosJVM)
      "coreJVM", "macrosJVM", "coreJVMTests"
      // as for other subprojects, for now let's just pull in what lsp4s
      // needs. maybe add more later
      "enumeratumCirceJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // not sure why we get these errors unless we turn them off
      "set every conflictWarning := ConflictWarning.disable"
    ]
  }

  ${vars.base} {
    name: "jawn-0-11"
    uri:  ${vars.uris.jawn-0-11-uri}
    // omitted: benchmark
    extra.projects: ["ast", "parser", "json4s", "spray", "play"]
  }

  // for sjson-new
  {
    name: "shaded-scalajson"
    system: ivy
    uri: "ivy:com.eed3si9n#shaded-scalajson_2.13;1.0.0-M4"
  }

  ${vars.base} {
    name: "sjson-new"
    uri:  ${vars.uris.sjson-new-uri}
    extra.exclude: ["benchmark"]
  }

  ${vars.base} {
    name: "sbt-util"
    uri:  ${vars.uris.sbt-util-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  // frozen (April 2019) at an April 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe"
    uri:  ${vars.uris.circe-uri}
    // failed compilation on sbt 1.3.0-RC3; not investigated
    // Symbol 'type io.circe.java8.time.JavaTimeDecoders' is missing from the classpath
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.projects: [
      // easy
      "coreJVM", "numbersJVM"
      // harder
      "jawn"
      // bunch more stuff that all depends on jawn
      "parserJVM", "genericJVM", "literalJVM", "scodecJVM", "testingJVM", "testsJVM"
      // dependency of scrooge-shapes
      "genericExtrasJVM"
      // dependency of scala-pet-store
      "java8JVM"
    ]
    extra.commands: ${vars.default-commands} [
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set excludeFilter in (Test, unmanagedSources) in generic := HiddenFileFilter || "AutoDerivedSuite.scala" || "JsonCodecMacrosSuite.scala" || "SemiautoDerivedSuite.scala""""
    ]
  }

  // frozen (June 2019) at April 2019 commit before fs2 version upgraded to
  // 1.1.x series; currently we have fs2 frozen on 1.0.x because of a ScalaTest 3.1
  // upgrade; presumably before too long we can move them all forward together
  ${vars.base} {
    name: "jawn-fs2"
    uri:  ${vars.uris.jawn-fs2-uri}
  }

  // dependency of http4s (it's their fork of parboiled2)
  ${vars.base} {
    name: "http4s-parboiled2"
    uri:  ${vars.uris.http4s-parboiled2-uri}
    // failed compilation on sbt 1.3.0-RC3; not investigated
    // java.util.zip.ZipException: duplicate entry: LICENSE
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.projects: ["parboiledJVM"]
    extra.commands: ${vars.base.extra.commands} [
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  // dependency of vault
  // frozen (August 2019) at a commit before addition of dependency on
  // discipline-specs2, which we can't add because the version of discipline
  // that offers it requires a ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "unique"
    uri:  ${vars.uris.unique-uri}
    extra.projects: ["coreJVM"]  // no docs, no Scala.js
  }

  // dependency of http4s
  // frozen (August 2019) at a commit before addition of dependency on
  // discipline-specs2, which we can't add because the version of discipline
  // that offers it requires a ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "vault"
    uri:  ${vars.uris.vault-uri}
    extra.projects: ["coreJVM"]  // no docs, no Scala.js
    deps.inject: ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
    ]
  }

  // this is a big build with a ton of subprojects.  we needn't be shy
  // about disabling fragile ones, ones with obscure dependencies we don't have, etc.
  // 2.13: frozen because "library org.typelevel#discipline-specs2 is not provided",
  // and to get it we'd need newer discipline which needs ScalaTest 3.1
  ${vars.base} {
    name: "http4s"
    uri:  ${vars.uris.http4s-uri}
    // compilation failure on sbt 1.3.0-RC3; not investigated
    // Symbol 'type org.http4s.json4s.jackson.Json4sJacksonInstances' is missing from the classpath.
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.commands: ${vars.default-commands} [
      // didn't compile (October 2018), it didn't seem worth investigating, probably a specs2 change
      "set excludeFilter in (Test, unmanagedSources) in tests := HiddenFileFilter || \"UriSpec.scala\""
      // got tired of this intermittently failing
      "set excludeFilter in (Test, unmanagedSources) in blazeClient := HiddenFileFilter || \"BlazeClientSpec.scala\""
    ]
    extra.exclude: [
      // outside our purview
      "bench", "docs", "website", "argonaut"
      // doesn't appear to have caught up with fs2-reactive-streams no longer being in a separate repo
      // (October 2018)
      "async-http-client"
    ]
  }

  // dependency of github4s
  ${vars.base} {
    name: "base64"
    uri:  ${vars.uris.base64-uri}
    extra.projects: ["base64JVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "github4s"
    uri:  ${vars.uris.github4s-uri}
    extra.projects: ["github4sJVM", "catsEffectJVM"]  // but no "docs" or Scala.js stuff
    // waiting (January 2018) on https://github.com/47deg/github4s/issues/178
    extra.test-tasks: "compile"
    deps.inject: ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
    ]
  }

  // frozen (June 2019) at May 2019 commit before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe-config"
    uri:  ${vars.uris.circe-config-uri}
  }

  ${vars.base} {
    name: "pureconfig"
    uri:  ${vars.uris.pureconfig-uri}
    deps.inject: ${vars.base.deps.inject} [
      // I guess dbuild is getting confused by the extra _1.13
      "com.github.alexarchambault#scalacheck-shapeless_1.13"
      // not sure why we aren't getting this dependency
      "org.scala-lang.modules#scala-collection-compat"
    ]
    check-missing: false
    extra.commands: ${vars.default-commands} [
      // not sure why we get these errors unless we turn them off
      "set every conflictWarning := ConflictWarning.disable"
      "set libraryDependencies in ThisBuild += \"org.scala-lang.modules\" %% \"scala-collection-compat\" % \"0.0.0\""
    ]
  }

  // in this space because it depends on pureconfig
  ${vars.base} {
    name: "refined"
    uri:  ${vars.uris.refined-uri}
    // I don't see a project that aggregates just the JVM subprojects, so we name them one by one.
    // scodecJVM isn't included because the dependency wasn't found, maybe a version mismatch?
    // it's okay, we don't need to have absolutely every subproject
    // pureconfigJVM, same, though the problem didn't start until November 2018.  maybe
    // unfreezing pureconfig (or updating our fork) would fix it, but I'd rather not mess
    // it with right now.
    extra.projects: ["catsJVM", "coreJVM", "evalJVM", "jsonpathJVM", "scalacheckJVM", "shapelessJVM"]
    extra.exclude: ["scalacheck_1_13JVM"]
    extra.commands: ${vars.default-commands} [
      // as per https://github.com/fthomas/refined/issues/661 , this test can be re-enabled
      // once the repo is upgraded to 2.13.1
      """set coreJVM / Test / unmanagedSources / excludeFilter := HiddenFileFilter || "AdjacentSpec.scala""""
    ]
  }

  // in this space because refinedJVM subproject depends on refined
  ${vars.base} {
    name: "atto"
    uri:  ${vars.uris.atto-uri}
    extra.projects: ["coreJVM", "refinedJVM", "fs2JVM", "testsJVM"]
  }

  // core doesn't depend on refined, but refinedJVM does.
  // frozen (July 2019) just before ScalaTest 3.1 upgrade (2.13 support also)
  ${vars.base} {
    name: "decline"
    uri:  ${vars.uris.decline-uri}
    extra.projects: ["declineJVM", "refinedJVM"]  // no Scala.js, no doc
  }

  ${vars.base} {
    name: "sttp"
    uri:  ${vars.uris.sttp-uri}
    // compilation failure on 1.3; not investigated
    // Symbol 'type com.softwaremill.sttp.playJson.SttpPlayJsonApi' is missing from the classpath.
    extra.sbt-version: ${vars.sbt-1-2-version}
    // aggregates all JVM projects
    extra.projects: ["rootJVM"]
    extra.exclude: [
      // it's fine, we don't need to have every last subproject
      "monix", "okhttpBackendMonix", "asyncHttpClientBackendMonix"
      "scalaz", "zio", "asyncHttpClientBackendZio", "asyncHttpClientBackendScalaz",
      "asyncHttpClientBackendZio-streams"
    ]
  }

  // dependency of scrooge-shapes.
  // for now anyway, we're only attempting to build the core project,
  // since that's what scrooge-shapes needs.
  ${vars.base} {
    name: "scrooge"
    uri:  ${vars.uris.scrooge-uri}
    extra.projects: ["scrooge-core"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      "set every bintrayOmitLicense := true"  // otherwise it complains we don't have one
    ]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // ignore missing scripted-sbt (https://github.com/sbt/sbt/issues/3917 ?)
    deps.ignore: ["org.scala-sbt#scripted-sbt"]
    check-missing: false
  }

  // dependency of circe-derivation
  ${vars.base} {
    name: "scrooge-shapes"
    uri:  ${vars.uris.scrooge-shapes-uri}
  }

  // dependency of lsp4s and scala-pet-store
  // frozen (April 2019) at an April 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe-derivation"
    uri:  ${vars.uris.circe-derivation-uri}
    // there are some others, but really just trying to get lsp4s going at the moment
    extra.projects: ["derivation", "annotations"]
    extra.commands: ${vars.default-commands} [
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set annotationsJVM / unmanagedSources / excludeFilter := HiddenFileFilter || "JsonCodecMacrosSuite.scala""""
    ]
  }

  // dependency of github4s
  // frozen (April 2019) at an April 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe-jackson"
    uri:  ${vars.uris.circe-jackson-uri}
    // there are some others, but for now, just trying to get github4s green again
    extra.projects: ["jackson28"]
  }

  // dependency of scala-pet-store
  ${vars.base} {
    name: "doobie"
    uri:  ${vars.uris.doobie-uri}
    extra.options: ["-Xss16m"]  // prevent stack overflow when compiling build definition
    extra.exclude: ["docs", "doobie", "bench"]  // out of scope ("doobie" is just an aggregation, and causes missing-tut error)
    deps.inject: ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.0.0")"""
      // as per https://github.com/scala/community-builds/pull/835#issuecomment-455729365,
      // these subprojects require a Postgres instance for the tests to run
      "set executeTests in postgres in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
      "set executeTests in `postgres-circe` in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
      "set executeTests in example in Test := Tests.Output(TestResult.Passed, Map(), Iterable())"
    ]
  }

  // dependency of scala-pet-store
  // frozen (June 2019) at a June 2019 commit before some dependency bumps. it looks like the
  // kind of thing where it isn't worth us digging into. (tsec.hashing.bouncy.HasherTest failed)
  ${vars.base} {
    name: "tsec"
    uri:  ${vars.uris.tsec-uri}
    // on sbt 1.3.0-RC3, tsec.PasswordTest failed; not investigated
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.exclude: [
      "microsite", "tsec-bench"  // out of scope
      "tsec-libsodium"  // java.lang.UnsatisfiedLinkError: no sodiumjni in java.library.path
      "tsec-examples"  // depends on tsec-libsodium
    ]
    deps.ignore: ["com.geirsson#scalafmt-core", "com.lucidchart#scalafmt-impl"]
    check-missing: false  // ignore missing scalafmt
    // kind-projector org change
    deps.ignore: ["org.spire-math#kind-projector"]
    deps.inject: ${vars.base.deps.inject} ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.10.0")"""
    ]
  }

  // 2.13: tracking master, where 2.13 supports exists (but also needs
  // ScalaTest 3.1 upgrade)
  ${vars.base} {
    name: "scala-pet-store"
    uri:  ${vars.uris.scala-pet-store-uri}
  }

]}
