//// about spaces

// currently we have five spaces.

// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
//   on sjson-new) and the sbt team is worried about the possible
//   impact of upgrading on binary compatibility of sbt plugins.
// but in the meantime the whole Typelevel ecosystem is moving onto
//   jawn 0.11, and the two versions are source-incompatible.

// the scalameta split is because we want to have both scalafmt
//   and scalafix, but the latter uses scalameta 2.x while the
//   former is stuck in scalameta 1.x land.  (this is easy to
//   keep segregated since scalafmt and scalafix tend to be
//   build-level dependencies, not project-level dependencies.)

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.16"
  sbt-1-version: "1.1.0-RC1"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope ~= fn)
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
  }
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        // override sbt version here since otherwise we get
        // whatever random sbt version the module has
        extra.sbt-version: ${vars.sbt-version}
        extra.commands: ${vars.default-commands} [
          // override scalaVersion here since otherwise we get
          // whatever random Scala version the module has
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xmlJVM"]
      }
    ]
  }
]}


//// space: scala

build += {

  space: scala

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS"]
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
    extra.projects: [ tools, testSuite, stubs ]
    extra.commands: ${vars.default-commands} [
      // - Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
    ]
  }

  // frozen (June 2017) at an April 2017 commit; newer commits
  // broke the scalacheck subproject of specs2
  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // because of new unused warnings in 2.12.2
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.projects: ["scalatest", "scalactic"]
    extra.test-tasks: ["compile"] // TODO run tests -- need to exclude browser-based tests somehow
  }

  ${vars.base} {
    name: "scala-partest-interface"
    uri:  ${vars.uris.scala-partest-interface-uri}
  }

  ${vars.base} {
    name: "scala-partest"
    uri:  ${vars.uris.scala-partest-uri}
    extra.commands: ${vars.default-commands} [
      // Deprecated optimizer settings
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scala-swing"
    uri:  ${vars.uris.scala-swing-uri}
  }

  // tracking master as of December 2016.  if master proves unstable,
  // we could try "release-0.8" (or a newer branch if there is one)
  ${vars.base} {
    name: "scala-stm"
    uri:  ${vars.uris.scala-stm-uri}
    // scala.concurrent.stm.CommitBarrierSuite failing;
    // reported upstream at https://github.com/nbronson/scala-stm/issues/53
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.default-commands} [
      // optimizer related
      "removeScalacOptions -Xfatal-warnings"
    ]
    // TODO Failed tests: shapeless.CachedTest
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scoverage"
    uri:  ${vars.uris.scoverage-uri}
    extra.exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
    extra.test-tasks: "compile" // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri:  ${vars.uris.scala-java8-compat-uri}
    extra.commands: ${vars.default-commands} [
      // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
      // we use "assert" as an identifier there. We disable doc building to avoid that.
      "set publishArtifact in packageDoc := false"
    ]
  }

  ${vars.base} {
    name: "scalaz"
    uri:  ${vars.uris.scalaz-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
    extra.exclude: [
      // we're on ScalaCheck 1.13 not 1.12
      "scalacheck-binding_1_12JVM"
    ]
  }

  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "scodec"
    uri:  ${vars.uris.scodec-uri}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "scala-records"
    uri:  ${vars.uris.scala-records-uri}
    extra.exclude: [
      "coreJS"  // no Scala.js please
      "root"    // dbuild thinks it tries to publish root#root
    ]
  }

  ${vars.base} {
    name: "genjavadoc"
    uri:  ${vars.uris.genjavadoc-uri}
    // TODO Failed tests: com.typesafe.genjavadoc.BasicSpec (looks like the test is too sensitive to ordering)
    // TODO if we re-enable tests we'll probably also need to patch the version logic in BasicSpec.scala,
    // something like https://github.com/SethTisue/genjavadoc/commit/509628e5437dfe9b90f4715a4a74274a4cc79adf
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "akka-actor"
    uri:  ${vars.uris.akka-actor-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
    extra.projects: ["akka-actor"]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
    ]
  }

  // this is separate from "akka" because there is a circular dependency between
  // the akka and ssl-config repos
  ${vars.base} {
    name: "akka-more"
    uri:  ${vars.uris.akka-more-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
    extra.projects: ["akka-scala-nightly"]
    extra.commands: ${vars.default-commands} [
      // https://github.com/scala/community-builds/issues/373
      "set every apiURL := None"
    ]
    extra.exclude: [
      "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
      "akka-actor"  // because we already built it in "akka"
      "akka-bench-jmh"  // we'd have to add a resolver to get the JMH dependency - ST 8/17/15
    ]
    // TODO wip on this at https://github.com/scala/community-builds/pull/317
    extra.test-tasks: ["compile"]
  }

  // frozen (December 2017) at December 2017 commit before akka-actor and akka-stream
  // dependencies were declared as "provided".  that means every downstream project
  // needs updating. for now let's just freeze
  ${vars.base} {
    name: "akka-http"
    uri:  ${vars.uris.akka-http-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: ["docs", "akka-http-bench-jmh"]
    extra.options: [
      "-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false"
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
    // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
    extra.commands: ${vars.default-commands} [
      "set sources in doc in Compile in httpCore := List()"
      "set every bintrayReleaseOnPublish := false"
      // sbt-osgi doesn't like dbuild-mangled version numbers
      "set every OsgiKeys.bundleVersion := \"10.0.0\""
    ]
    // "HTTP is sadly very timing sensitive we're working on improving its stability regularly,
    // OK to disable it for now." - Konrad M, October 2016
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scalariform"
    uri: ${vars.uris.scalariform-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "scala-async"
    uri:  ${vars.uris.scala-async-uri}
    // TODO: ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "slick"
    uri:  ${vars.uris.slick-uri}
    deps.inject: ${vars.base.deps.inject} [
      // without this dbuild doesn't pick up that one of the subprojects has this dependency.
      // it doesn't even make sense; it seems to me that testNGSettings should not be adding
      // a dependency of the plugin to the libraryDependencies of the test code.
      // the line in question is:
      //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
      // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
      "de.johoop#sbt-testng-interface"
    ]
    extra.exclude: [
      // unless we exclude, it looks for an Ornate dependency here
      "root"
      // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
      "osgitests"
    ]
  }

  ${vars.base} {
    name: "sbt-testng"
    uri:  ${vars.uris.sbt-testng-uri}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
  }

  // forked (October 2017) to work around unfriendliness between dbuild
  // and sbt-houserules 0.3.4; details at
  // https://github.com/scala/community-builds/issues/603 . we should
  // be able to unfork once sbt 0.13.17 is out and a new sbt-houserules
  // removes the offending workaround code
  ${vars.base} {
    name: "sbinary"
    uri:  ${vars.uris.sbinary-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // may be needed again once we're on current sbt-houserules again
    // extra.commands: ${vars.default-commands} ["set every scalafmtOnCompile := false"]
    // check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "utest"
    uri:  ${vars.uris.utest-uri}
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name: "acyclic"
    uri:  ${vars.uris.acyclic-uri}
  }

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "fastparse"
    uri:  ${vars.uris.fastparse-uri}
    extra.projects: [
      "fastparseJVM"   // no Scala.js plz
      "scalaparseJVM"  // not essential to include, but hey
    ]
  }

  // forked (May 2017) to make a trivial source change for 2.12.3 compat;
  // see https://github.com/scalamacros/paradise/issues/98
  ${vars.base} {
    name: "macro-paradise"
    uri:  ${vars.uris.macro-paradise-uri}
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name: "scala-logging"
    uri:  ${vars.uris.scala-logging-uri}
  }

  ${vars.base} {
    name: "scalaprops"
    uri:  ${vars.uris.scalaprops-uri}
    extra.projects: ["rootJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // new warnings from https://github.com/scala/scala/pull/5402
      "removeScalacOptions -Xfatal-warnings"
    ]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "kxbmap-configs"
    uri:  ${vars.uris.kxbmap-configs-uri}
    extra.exclude: ["docs"]
  }

  // forked (August 2017) to remove coursier
  ${vars.base} {
    name: "fs2"
    uri:  ${vars.uris.fs2-uri}
    extra.projects: ["coreJVM", "scodecJVM", "io"]  // no Scala.js, no benchmarks or docs
    extra.commands: ${vars.default-commands} [
      // because of new inferred-Any warnings in 2.12.4 (PR 5990)
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  # frozen at September 2017 commit because cats-effect was failing;
  # see https://github.com/scala/community-builds/issues/600
  # November 2017: unfreeze attempt at https://github.com/scala/community-builds/pull/624
  # failed, but we should try again in a month or two, something like that
  ${vars.base} {
    name: "cats"
    uri:  ${vars.uris.cats-uri}
    // for some reason, adding the umbrella "catsJVM" project but excluding "bench"
    // and "docs" doesn't succeed in removing the depending on cats-bench.
    // using deps.ignore doesn't fix it either. not sure how else to fix it
    // other than just enumerating what we want:
    extra.projects: ["coreJVM", "freeJVM", "kernelJVM", "kernelLawsJVM", "lawsJVM", "macrosJVM", "testsJVM"]
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // uses wartremover which we can't handle, ticket on that is
  // https://github.com/scala/community-builds/issues/364
  // worked around for now by freezing at 2a75226 (September 2016)
  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
  }

  // if this starts giving us trouble, it would be OK to just drop it,
  // as per Mathias's comments at https://github.com/sirthias/parboiled/pull/100
  // ("it's quite unmaintained. Also, I don't think there are any real users left")
  // We have parboiled2 below.
  ${vars.base} {
    name: "parboiled"
    uri:  ${vars.uris.parboiled-uri}
    extra.projects: ["parboiled-scala"]
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "parboiled2"
    uri:  ${vars.uris.parboiled2-uri}
    extra.projects: ["parboiledJVM", "examples"]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
  }

  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
  }

  // tracking "develop" branch.
  // try master instead if develop proves too fragile?
  ${vars.base} {
    name: "twitter-util"
    uri:  ${vars.uris.twitter-util-uri}
    extra.exclude: [
      // this isn't really necessary and would pull in a JMH dependency
      "util-benchmark"
      // this is 2.11-only
      "util-intellij"
    ]
    // recommended at https://github.com/twitter/util/issues/173:
    // "We use that when we don't think the tests will be reliable in a ci environment"
    extra.options: ["-DSKIP_FLAKY=true"]
  }

  ${vars.base} {
    name: "mima"
    uri:  ${vars.uris.mima-uri}
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
  }

  ${vars.base} {
    name: "spire"
    uri:  ${vars.uris.spire-uri}
    // hopefully avoid intermittent OutOfMemoryErrors during compilation
    extra.options: ["-Xmx2560m"]
    extra.projects: ["spireJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "breeze"
    uri:  ${vars.uris.breeze-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    // failing tests not investigated/reported
    extra.test-tasks: ["compile"]
    // spire moved from org.spire to org.typelevel but breeze hasn't
    // changed their dependency yet
    deps.ignore: ["org.spire-math#spire"]
    deps.inject: ${vars.base.deps.inject} [
      "org.typelevel#spire"
    ]
    check-missing: false
  }

  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    extra.test-tasks: ["compile"] // TODO: ??? - hasn't been tried lately
    extra.exclude: [
      // eff-related compile errors, as of January 2017 anyway
      "guide"
      // not community build relevant, and was causing error
      // ("multiple projects have the same artifacts visible in the same space")
      "pom"
    ]
    extra.commands: ${vars.default-commands} [
      // too fragile? TODO: I got a non-exhaustive match warning that
      // could conceivably indicate some real regression. or maybe it's
      // just a version mismatch for some library? who knows
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "ssl-config"
    uri:  ${vars.uris.ssl-config-uri}
    // repeated hangs during testing; see
    // https://github.com/scala/community-builds/issues/560
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "spray-json"
    uri:  ${vars.uris.spray-json-uri}
  }

  ${vars.base} {
    name: "pcplod"
    uri:  ${vars.uris.pcplod-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scalikejdbc"
    uri:  ${vars.uris.scalikejdbc-uri}
    // don't build sbt plugin
    extra.exclude: ["mapper-generator"]
    // recurring test failures reported upstream at
    // https://github.com/scalikejdbc/scalikejdbc/issues/574
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "scopt"
    uri:  ${vars.uris.scopt-uri}
    extra.projects: ["scoptJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "twirl"
    uri:  ${vars.uris.twirl-uri}
    extra.exclude: [ "plugin", "apiJS" ]
  }

  ${vars.base} {
    name: "play-doc"
    uri:  ${vars.uris.play-doc-uri}
  }

  ${vars.base} {
    name: "play-json"
    uri:  ${vars.uris.play-json-uri}
    extra.projects: ["play-jsonJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "play-ws"
    uri:  ${vars.uris.play-ws-uri}
    extra.commands: ${vars.default-commands} [
      // new warnings from https://github.com/scala/scala/pull/5402
      "removeScalacOptions -Xfatal-warnings"
    ]
    // NullPointerException in CachingSpec
    // (https://github.com/scala/community-builds/issues/564)
    extra.exclude: ["integration-tests"]
  }

  // dependency of play-ws
  ${vars.base} {
    name: "cachecontrol"
    uri:  ${vars.uris.cachecontrol-uri}
  }

  ${vars.base} {
    name: "play-core"
    uri:  ${vars.uris.play-core-uri}
    // TODO: enable more projects? these are just a few that seemed especially high-value.
    // we tried including "Play-Integration-Test" but hit a mysterious StackOverflowError
    // in scala.tools.nsc.javac.JavaScanners; see https://github.com/scala/community-builds/issues/304
    extra.projects: ["Play", "Play-Test", "Play-WS", "Play-Cache", "Play-AHC-WS", "Filters-Helpers", "Play-Logback"]
    extra.exclude: ["SBT-Plugin"]
    extra.directory: "framework"
    extra.commands: ${vars.default-commands} [
      // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
      // and we get double definition error
      "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
      // there was some Scaladoc error here I didn't bother to look into
      "set sources in doc in Compile in PlayProject := List()"
    ]
  }

  // 3.5 is the current stable branch (as of Oct 2016)
  // there is also a brand-new development branch, 3.6, we should
  // maybe switch to at some point
  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    // TODO: exclude subprojects we don't want, rather than naming a few we want. probably adding more would work?
    extra.projects: ["json4s-native", "json4s-jackson", "json4s-ast"]
  }

  ${vars.base} {
    name: "lift-json"
    uri:  ${vars.uris.lift-json-uri}
    extra.projects: ["lift-json"]
  }

  // frozen (November 2017) at June 2017 commit, for compatibility with
  // github4s which depends on the older version.  we might also consider
  // forking github4s and/or contributing the needed change upstream
  ${vars.base} {
    name: "scalamock"
    uri:  ${vars.uris.scalamock-uri}
    extra.commands: ${vars.default-commands} [
      // work around https://github.com/scala/scala-dev/issues/252 ;
      // see https://github.com/scala/community-builds/issues/434
      "set unmanagedSourceDirectories in (`scalamock-core-jvm`, Compile) += baseDirectory.value / \"shared\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
    extra.projects: [
      // no Scala.js
      "scalamock-coreJVM"
      // dependency of github4s
      "scalamock-scalatest-supportJVM"
    ]
  }

  ${vars.base} {
    name: "argonaut"
    uri:  ${vars.uris.argonaut-uri}
    extra.projects: ["argonautJVM"]  // no Scala.js
    extra.exclude: [
      // fails to declare its scala-parser-combinators dependency,
      // and anyway we don't want to run benchmarks
      "argonaut-benchmark"
    ]
    // work around https://github.com/scala/scala-dev/issues/252
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (argonautJVM, Compile) += baseDirectory.value / \"argonaut\" / \"shared\" / \"src\" / \"main\" / \"scala-2.12\""
    ]
  }

  ${vars.base} {
    name: "monocle"
    uri:  ${vars.uris.monocle-uri}
    // try to enable more subprojects?
    extra.projects: ["coreJVM", "macrosJVM", "lawJVM", "genericJVM"]
  }

  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    // other projects aren't pertinent or errored out (not investigated)
    extra.projects: ["specbaseJVM", "lawkitJVM", "scalatestJVM", "macrosJVM", "platformJVM", "testkitJVM"]
  }

  ${vars.base} {
    name: "scala-continuations"
    uri:  ${vars.uris.scala-continuations-uri}
  }

  // using xuwei-k's fork which has changes needed for 2.12 compat,
  // submitted upstream: https://github.com/veact/scala-ssh/pull/5
  ${vars.base} {
    name: "scala-ssh"
    uri:  ${vars.uris.scala-ssh-uri}
    // Failed tests: com.decodified.scalassh.SshClientSpec
    extra.test-tasks: "compile"
  }

  // frozen at a March 2017 commit, because some commit soon after
  // it broke some version checking logic, resulting in
  // com.fasterxml.jackson.databind.JsonMappingException when running
  // tests, not only in this project but also downstream in
  // twitter-util and scalaj-http.  reported the problem upstream at
  // https://github.com/FasterXML/jackson-module-scala/issues/319
  ${vars.base} {
    name: "jackson-module-scala"
    uri:  ${vars.uris.jackson-module-scala-uri}
    // we're lying and telling it Java 8 is Java 7, but in this context
    // the lie isn't important
    extra.options: ["-Djava7.home="${JAVA_HOME}]
    // December 2017: some code runs afoul of the new PartialFunction.apply
    // deprecation we added for 2.12.5
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scalameter"
    uri:  ${vars.uris.scalameter-uri}
    check-missing: false
    deps.ignore: [
      // doesn't support 2.12 (yet?)
      "org.mongodb#casbah"
      // this one is unmaintained and doesn't support Scala 2.12...
      "com.decodified#scala-ssh"
    ]
    deps.inject: ${vars.base.deps.inject} [
      // ...but this one does
      "com.veact#scala-ssh"
    ]
  }

  ${vars.base} {
    name: "scala-json-ast"
    uri:  ${vars.uris.scala-json-ast-uri}
    // no Scala.js please, and no benchmarks either
    extra.projects: ["scalaJsonJVM"]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "scalatags"
    uri:  ${vars.uris.scalatags-uri}
    extra.projects: ["scalatagsJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "scala-refactoring"
    uri:  ${vars.uris.scala-refactoring-uri}
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"  // too fragile
    ]
    // (January 2017)
    // Failed tests:
    //   scala.tools.refactoring.tests.sourcegen.PrettyPrinterTest
    //   scala.tools.refactoring.tests.sourcegen.SourceGenTest
    //   scala.tools.refactoring.tests.implementations.ExplicitGettersSettersTest
    extra.test-tasks: ["compile"]
  }

  ${vars.base} {
    name: "nyaya"
    uri:  ${vars.uris.nyaya-uri}
    extra.projects: ["testModuleJVM"]  // no Scala.js, no benchmarks
  }

  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM"]  // no Scala.js
  }

  // frozen (November 2017) at an October 2017 commit because they moved
  // to cats 1.0.0-RC1, which we aren't ready for yet (see
  // https://github.com/scala/community-builds/pull/624)
  ${vars.base} {
    name: "monix"
    uri:  ${vars.uris.monix-uri}
    // no Scala.js, no benchmarks.
    // (but also, perhaps this excludes more stuff than necessary?)
    extra.projects: ["coreJVM"]
    // because of new inferred-Any warnings in 2.12.4 (PR 5990)
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
    ]
    // Failed tests: monix.execution.misc.AsyncSemaphoreSuite
    // but according to Alexandru at https://github.com/monix/monix/issues/465
    // the problem is already fixed on master.  So at the time we unfreeze
    // we can start running the tests again.
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "conductr-lib"
    uri:  ${vars.uris.conductr-lib-uri}
    extra.exclude: [
      // we don't have Lagom yet
      "lagom13JavaConductRBundleLib", "lagom13ScalaConductRBundleLib"
      "lagom14JavaConductRBundleLib", "lagom14ScalaConductRBundleLib"
      // didn't compile (July 2017)
      "akka24ConductRClientLib"
      // Play stuff didn't work, maybe try again later?
      "play25ConductRBundleLib", "play25ConductRClientLib", "play25Common"
      "play26ConductRBundleLib", "play26ConductRClientLib", "play26Common"
    ]
  }

  // this was added because conductr-lib's Play integration depended on it,
  // but we ended up not including that integration (for now anyway?), so
  // nothing depends on this.  leaving it in since we might as well, but
  // if it acts up, it can go.
  // forked (December 2016) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "akka-contrib-extra"
    uri:  ${vars.uris.akka-contrib-extra-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // Failed tests: akka.contrib.http.DirectivesSpec
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "unfiltered"
    uri:  ${vars.uris.unfiltered-uri}
    // Failed test: unfiltered.netty.SslServerSpec
    //   (it worked locally but failed on Jenkins, who knows why?)
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "dispatch"
    uri:  ${vars.uris.dispatch-uri}
  }

  ${vars.base} {
    name: "atto"
    uri:  ${vars.uris.atto-uri}
    extra.exclude: [
      // just scalaz72 plz!
      "scalaz71"
      // depends on scalaz71
      "atto", "testsJVM", "docs"
      // no Scala.js
      "catsJS", "coreJS", "scalaz72JS", "testsJS"
    ]
    extra.commands: ${vars.default-commands} [
      // new warnings from https://github.com/scala/scala/pull/5402
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
  }

  ${vars.base} {
    name: "http4s-websocket"
    uri:  ${vars.uris.http4s-websocket-uri}
    extra.projects: ["http4sWebsocketJVM"]  // no Scala.js plz
  }

  // tracking 0.12.x, not master, because that's the version http4s depends
  // on (as of December 2017, anyway; see discussion at
  // https://github.com/http4s/blaze/issues/97)
  ${vars.base} {
    name: "blaze"
    uri: ${vars.uris.blaze-uri}
  }

  // forked (October 2017) because utest 0.6.0 (we track utest master) made
  // a source-incompatible change but fansi is still on 0.5.3
  ${vars.base} {
    name: "fansi"
    uri:  ${vars.uris.fansi-uri}
    extra.projects: ["fansiJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "pprint"
    uri:  ${vars.uris.pprint-uri}
    extra.projects: ["pprintJVM"]  // no Scala.js
  }

  ${vars.base} {
    name: "algebra"
    uri:  ${vars.uris.algebra-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js, no benchmarks, no docs
    extra.commands: ${vars.default-commands} [
      // new warnings from https://github.com/scala/scala/pull/5402
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  // forked (updated March 2017) to get rid of the usual bintray-sbt stuff that
  // makes dbuild upset
  ${vars.base} {
    name: "tut"
    uri:  ${vars.uris.tut-uri}
    extra.exclude: ["plugin"]  // we never build sbt plugins
    // because of new unused warnings introduced
    // by https://github.com/scala/scala/pull/5402 ; probably they'll fix it upstream
    // after 2.12.2 comes out
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Xfatal-warnings"
      "set every bintrayReleaseOnPublish := false"
    ]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  // dependency of scalafix
  // (we use allanrenucci's fork because that's where `organization` is set
  // as scalafix expects; it's where 0.1.4 was apparently published from,
  // which is the version scalafix declares a dependency on)
  ${vars.base} {
    name: "scala-xml-quote"
    uri:  ${vars.uris.scala-xml-quote-uri}
  }

  ${vars.base} {
    name: "geny"
    uri:  ${vars.uris.geny-uri}
    extra.projects: ["genyJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "scalaj-http"
    uri:  ${vars.uris.scalaj-http-uri}
  }

  ${vars.base} {
    name: "lightbend-emoji"
    uri:  ${vars.uris.lightbend-emoji-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
  }

  // others are not depending on this yet ("not ready for general
  // population yet", says Owein in March 2017) but I was interested
  // in including it anyway just to have a few more compiler plugins
  // in the build, it's an underrepresented category.  we can freeze
  // or drop it if it proves to be trouble
  ${vars.base} {
    name: "twotails"
    uri:  ${vars.uris.twotails-uri}
  }

  ${vars.base} {
    name: "scala-gopher"
    uri:  ${vars.uris.scala-gopher-uri}
    // too many intermittent failures -- reported at
    // https://github.com/rssh/scala-gopher/issues/20
    extra.test-tasks: ["compile"]
  }

  // adding (April 2017) because scalameta now depends on it
  // forked/frozen (September 2017) because scalameta uses 0.6.2
  // but newer commits are source-incompatible. oh, and also
  // zinc expects the older version, too.
  // the fork, here, is in order to include a utest version bump
  // (since utest also made source-incompatible changes)
  ${vars.base} {
    name: "scalapb"
    uri:  ${vars.uris.scalapb-uri}
    // just this one for now, since I'm mainly just trying to get
    // scalameta working again
    extra.projects: ["runtimeJVM"]
  }

  // adding (April 2017) because scalameta depends on it
  // (indirectly via scalapb).  frozen (December 2017) at
  // July 2017 commit before package name change, since we
  // we have scalapb frozen too
  ${vars.base} {
    name: "scalapb-lenses"
    uri:  ${vars.uris.scalapb-lenses-uri}
    extra.projects: ["lensesJVM"]  // no Scala.js plz
  }

  // adding (September 2017) because scalafix's "cli" subproject uses it.
  // forked to modify some version number manipulation code to be
  // dbuild-friendly; we can unfork once
  // https://github.com/typelevel/paiges/pull/74 is merged
  ${vars.base} {
    name: "paiges"
    uri:  ${vars.uris.paiges-uri}
    extra.projects: ["coreJVM", "catsJVM"]  // but not "benchmark"
  }

  // adding (September 2017) because scalafix's "cli" subproject uses it.
  // forked (November 2017) to use latest coursier.  we forked
  // from the 1.1.x branch, not master, since there are
  // source-incompatible changes on master, but scalafix's dependency is
  // on 1.1.x.  so I'm not bothering to contribute the coursier version
  // change upstream, since master has already moved on
  ${vars.base} {
    name: "case-app"
    uri:  ${vars.uris.case-app-uri}
    // this is enough for scalafix, I didn't even try adding the rest
    extra.projects: ["coreJVM"]
  }

  // frozen (November 2017) at an October 2017 commit, because more
  // recent commits require a newer cats, too new for other libraries
  // in the community build; see https://github.com/scala/community-builds/pull/624
  ${vars.base} {
    name: "cats-effect"
    uri:  ${vars.uris.cats-effect-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js plz
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "doodle"
    uri: ${vars.uris.doodle-uri}
    extra.projects: ["doodleJVM"]  // no Scala.js plz
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
  }

  // once https://github.com/scala/scala-collections-laws/pull/18
  // is merged we can track master
  ${vars.base} {
    name: "scala-collections-laws"
    uri: ${vars.uris.scala-collections-laws-uri}
    // as per the repo readme
    extra.options: ["-XX:MaxMetaspaceSize=1G", "-Xmx6G"]
    // note that we're not actually doing
    // `runMain tests.generated.collection.Test_All` which is what
    // the repo readme says to do. dbuild doesn't let us set
    // extra.test-tasks to a task that takes arguments.  (anyway,
    // it's not clear it's really necessary or appropriate to
    // actually run the whole thing as part of the community build?)
  }

  ${vars.base} {
    name: "better-files"
    uri: ${vars.uris.better-files-uri}
    extra.commands: ${vars.default-commands} [
      // because of new inferred-Any warnings in 2.12.4 (PR 5990)
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "scalastyle"
    uri: ${vars.uris.scalastyle-uri}
    extra.options: ["-Dscalastyle.publish-ivy-only=true"]
  }

  ${vars.base} {
    name: "play-webgoat"
    uri: ${vars.uris.play-webgoat-uri}
    // not sure how this gets pulled in but it's just doc not code, I think?
    // so let's just ignore that it's missing
    check-missing: false
    deps.ignore: ["com.typesafe.play#play-omnidoc"]
  }

  ${vars.base} {
    name: "gigahorse"
    uri:  ${vars.uris.gigahorse-uri}
    // as of August 2017, doesn't compile against latest akka-http
    extra.exclude: ["akkaHttp"]
  }

  // dependency of scalachess
  ${vars.base} {
    name: "scalalib"
    uri:  ${vars.uris.scalalib-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  // frozen (December 2017) at November 2017 before a newer commit
  // introduced a test failure: https://github.com/ornicar/scalachess/issues/133
  ${vars.base} {
    name: "scalachess"
    uri:  ${vars.uris.scalachess-uri}
    extra.sbt-version: ${vars.sbt-1-version}
  }

  ${vars.base} {
    name: "sbt-io"
    uri:  ${vars.uris.sbt-io-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "coursier"
    uri:  ${vars.uris.coursier-uri}
    extra.projects: ["jvm"]  // no Scala.js plz
    extra.exclude: [
      // I suppose we could try to add this, but it seems inessential:
      // org.http4s#http4s-blaze-server is not provided (in space "default")
      "http-server"
      // no sbt plz
      "sbt-coursier", "sbt-shading", "sbt-launcher", "sbt-pgp-coursier", "sbt-plugins", "sbt-shared"
    ]
    extra.commands: ${vars.default-commands} [
      // dbuild doesn't retrieve submodules unless we make it
      "eval \"git submodule update --init\".!"
    ]
  }

  // dependency of pureconfig
  ${vars.base} {
    name: "scalacheck-shapeless"
    uri:  ${vars.uris.scalacheck-shapeless-uri}
    extra.projects: ["coreJVM", "testJVM"]  // no Scala.js plz
    // weird missing self-dependency in testJVM project: "the library
    // com.github.alexarchambault#scalacheck-shapeless is not provided
    // (in space "default") by any project in this configuration file."
    check-missing: false
    // Failed tests: org.scalacheck.PropTests
    extra.test-tasks: ["compile"]
  }

  // dependency of scala-debugger. we track the develop branch, since
  // master seems neglected/outdated
  ${vars.base} {
    name: "scallop"
    uri:  ${vars.uris.scallop-uri}
    extra.projects: ["jvm"]  // no Scala.js or Scala Native plz
  }

  // OlegYch's fork is the one that hangs out in
  // scala/scala (Gitter) and #scala (IRC)
  ${vars.base} {
    name: "multibot"
    uri:  ${vars.uris.multibot-uri}
    // linter isn't essential to the build
    deps.ignore: ["org.psywerx.hairyfotr#linter"]
    check-missing: false
  }

  // dependency of scaladex
  ${vars.base} {
    name: "nscala-time"
    uri:  ${vars.uris.nscala-time-uri}
  }

  // dependency of scaladex.
  // only attempt the subprojects scaladex needs.
  // we track the release/5.4.x branch since that's what scaladex uses.
  ${vars.base} {
    name: "elastic4s"
    uri:  ${vars.uris.elastic4s-uri}
    extra.projects: ["elastic4s-core", "elastic4s-embedded"]
    // some test code uses scala.util.parsing.json, which no longer
    // exists in the latest scala-parser-combinators
    extra.run-tests: false
  }

  // dependency of elastic4s
  ${vars.base} {
    name: "sksamuel-exts"
    uri:  ${vars.uris.sksamuel-exts-uri}
  }

  // dependency of scaladex
  ${vars.base} {
    name: "akka-http-cors"
    uri:  ${vars.uris.akka-http-cors-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: ["akka-http-cors-bench-jmh"]
  }

  // dependency of scaladex.
  // only attempt the subproject scaladex needs.
  ${vars.base} {
    name: "akka-http-session"
    uri:  ${vars.uris.akka-http-session-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: ["core"]
  }

]}

//// space: jawn_0_10

build += {

  space: scala.jawn_0_10

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "jawn-0-10"
    uri:  ${vars.uris.jawn-0-10-uri}
    // omitted TODO: play
    // omitted: rojoma-v3, rojoma, benchmark, argonaut
    // (we have Argonaut in the community build, but it depends on jawn! dbuild
    // doesn't like the circularity. I think we could break it by having two jawn entries,
    // one for the core and one for the extras, but I haven't tried yet)
    extra.projects: ["ast", "parser", "json4s", "spray"]
  }

  // for sjson-new
  {
    name: "shaded-scalajson"
    system: ivy
    uri: "ivy:com.eed3si9n#shaded-scalajson_2.12;1.0.0-M4"
  }

  ${vars.base} {
    name: "sjson-new"
    uri:  ${vars.uris.sjson-new-uri}
    extra.exclude: ["benchmark"]
  }

  ${vars.base} {
    name: "sbt-util"
    uri:  ${vars.uris.sbt-util-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "sbt-librarymanagement"
    uri:  ${vars.uris.sbt-librarymanagement-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    check-missing: false  // ignore missing scalafmt
  }

  ${vars.base} {
    name: "zinc"
    uri:  ${vars.uris.zinc-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.exclude: ["zincBenchmarks"]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // Failed tests: sbt.internal.inc.ZincComponentCompilerSpec
    extra.test-tasks: ["compile"]
    extra.commands: ${vars.default-commands} [
      "set every scalafmtOnCompile := false"
    ]
    check-missing: false  // ignore missing scalafmt
  }

  // currently sbt and its modules are frozen and/or forked, since
  // sbt has its own dbuild-based "community build" so we don't need
  // to track the latest (and doing so would be fragile).  but,
  // we should move to newer tags from time to time.
  // in December 2017 we forked this repo off the v1.0.4 branch,
  // to get a newer specs2 version; the change was already made upstream,
  // so when we move everything forward to v1.1.x tags we can unfork.
  ${vars.base} {
    name: "sbt"
    uri:  ${vars.uris.sbt-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // we have to disable this early (extra.commands isn't soon enough)
    // or scalafmt will run `update` and `cloc-plugin` won't be found
    extra.settings: ${vars.base.extra.settings} [
      "scalafmtOnCompile in ThisBuild := false"
      "scalafmtOnCompile in Sbt := false"
    ]
    extra.exclude: [
      // dbuild & sbt-bintray fight (Release.scala calls bintrayRepo.value.upload)
      "bundledLauncherProj"
      // depends on sxr_2.10?!
      "sbtRoot"
    ]
    check-missing: false  // ignore missing scalafmt
    // sad not to run any tests just because one test failed, but meh, I've sunk a lot
    // of time into the current round of improvements, we can come back to this one,
    // maybe at the time we move from 1.0.x -> 1.1.x
    // [info] SettingQueryTest
    // [error]   x t/libraryDependencies
    // [error]    '{"type":"SettingQuerySuccess","value":[{"organization":"org.scala-lang","name":"scala-library","revision":"2.12.1","isChanging":false,"isTransitive":true,"isForce":false,"explicitArtifacts":[],"inclusions":[],"exclusions":[],"extraAttributes":{},"crossVersion":{"type":"Disabled"}}],"contentType":"scala.collection.Seq[sbt.librarymanagement.ModuleID]"}' != '{"type":"SettingQuerySuccess","value":[{"organization":"org.scala-lang","name":"scala-library","revision":"2.12.1","isChanging":false,"isTransitive":true,"isForce":false,"crossVersion":{"type":"Disabled"}}],"contentType":"scala.collection.Seq[sbt.librarymanagement.ModuleID]"}' (file:1)
    // [error] Actual:   ...lue":{"...,"[explicitA]r[t]i[facts]":[],[inclus]
    // [error] io...":[],"xc...":[],"...le[sbt.librarymanagement.ModuleID]"}
    // [error] Expected: ...lue":{"...,"[crossVe]r[s]i[on":{]"[type]"[:"Disabl]
    // [error] []e[]d"}}[sbt.librarymanagement.ModuleID]"}
    extra.test-tasks: ["compile"]
  }

  // dependency of ammonite.  otherwise obsolete, as per
  // https://github.com/lihaoyi/upickle-pprint/issues/209
  // (the pprint part has its own repo now)
  // requires jawn 0.10
  ${vars.base} {
    name: "upickle"
    uri:  ${vars.uris.upickle-uri}
    // no Scala.js; also only upickle no pprint
    extra.projects: ["upickleJVM"]
  }

  // dependency of scaladex. depends on upickle
  ${vars.base} {
    name: "autowire"
    uri:  ${vars.uris.autowire-uri}
    extra.projects: ["autowireJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "scaladex"
    uri:  ${vars.uris.scaladex-uri}
    extra.exclude: [
      // no Scala.js plz
      "sharedJS", "client"
      // "java.io.IOException: Cannot run program "sass": error=2, No such file or directory"
      // not insurmountable -- we could add commands to install the gem in the current directory,
      // and then customize `sassExecutable in Assets` if needed. but I feel it's not really worth
      // the additional labor and (more importantly) the additional fragility
      "server"
    ]
  }

  // depends on ammonite-ops
  ${vars.base} {
    name: "scalatex"
    uri:  ${vars.uris.scalatex-uri}
    extra.exclude: [
      "scalatexSbtPlugin"  // we never build sbt plugins
      "site", "readme", "scrollspy"  // these use Scala.js
    ]
  }

  ${vars.base} {
    name: "ammonite"
    uri:  ${vars.uris.ammonite-uri}
    extra.projects: ["ops", "amm"]
    // not investigated:
    // [ammonite] [info] test.ammonite.ops.ExampleTests.addUpScalaSize
    extra.test-tasks: "compile"
  }

  // depends on ammonite
  ${vars.base} {
    name: "scala-debugger"
    uri:  ${vars.uris.scala-debugger-uri}
    extra.exclude: [
      // no sbt plugins plz!
      "sbtScalaDebuggerPlugin"
      // Missing dependency: the library org.senkbeil#grus-layouts
      "scalaDebuggerDocs"
    ]
    // java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
    // perhaps only the -Xmx is really necessary, but let's try it with all of the repo's own .jvmopts:
    extra.options: ["-Xms1g", "-Xmx4g", "-Xss2m", "-XX:MaxMetaspaceSize=256m"]
  }

]}

//// space: jawn_0_11

build += {

  space: scala.jawn_0_11

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "circe"
    uri:  ${vars.uris.circe-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.projects: [
      // easy
      "core", "numbers"
      // harder
      "jawn"
      // bunch more stuff that all depends on jawn
      "parser", "generic", "literal", "scodec", "testing", "tests"
    ]
  }

  ${vars.base} {
    name: "jawn-0-11"
    uri:  ${vars.uris.jawn-0-11-uri}
    // omitted TODO: play
    // omitted: rojoma-v3, rojoma, benchmark, argonaut
    // (we have Argonaut in the community build, but it depends on jawn! dbuild
    // doesn't like the circularity. I think we could break it by having two jawn entries,
    // one for the core and one for the extras, but I haven't tried yet)
    extra.projects: ["ast", "parser", "json4s", "spray"]
  }

  // frozen (November 2017) at September 2017 commit before they upgraded
  // to newer fs2 & cats version; we should be able to unfreeze at the
  // same time we unfreeze cats (https://github.com/scala/community-builds/pull/624)
  ${vars.base} {
    name: "jawn-fs2"
    uri:  ${vars.uris.jawn-fs2-uri}
  }

  // well, this is a big build with lots of subprojects, many of which involve
  // integration with other libraries. many of them had issues; I didn't
  // spend that much time looking into each one and seeing if it might be
  // fixable, or ought to be reported upstream, or what.
  // we are using an August 2017 commit that has the jawn 0.10->0.11
  // upgrade but doesn't have cats 1.0.0-MF->1.0.0-RC1 since we aren't
  // (November 2017) ready for that yet (see #624)
  // note that if this all proves to be more trouble than it's worth,
  // it's fine to drop it for a while until the Typelevel ecosystem
  // settles down a bit
  ${vars.base} {
    name: "http4s"
    uri:  ${vars.uris.http4s-uri}
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    extra.exclude: [
      // outside our purview
      "bench", "docs"
      // Missing dependency: com.github.zainab-ali#fs2-reactive-streams
      "async-http-client"
      // weird errors, probably not appropriate to run anyway
      "load-test"
    ]
    // Failed tests: org.http4s.CookieSpec, org.http4s.EntityDecoderSpec
    extra.test-tasks: "compile"
  }

  // dependency of github4s
  ${vars.base} {
    name: "base64"
    uri:  ${vars.uris.base64-uri}
    extra.projects: ["base64JVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "github4s"
    uri:  ${vars.uris.github4s-uri}
    extra.projects: ["github4sJVM", "catsEffectJVM", "scalaz"]  // but no "docs" or Scala.js stuff
    // Failed tests: github4s.unit.ApiSpec, github4s.integration.IntegrationSpec
    extra.test-tasks: "compile"
  }

  ${vars.base} {
    name: "circe-config"
    uri:  ${vars.uris.circe-config-uri}
    extra.sbt-version: ${vars.sbt-1-version}
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  # forked (November 2017) to remove a build.sbt thing that adds Ammonite,
  # because it isn't a true dependency and we don't want the complication of
  # Ammonite's own dependency tree (in particular, the jawn versions conflict)
  ${vars.base} {
    name: "pureconfig"
    uri:  ${vars.uris.pureconfig-uri}
    deps.inject: ${vars.base.deps.inject} [
      // I guess dbuild is getting confused by the extra _1.13
      "com.github.alexarchambault#scalacheck-shapeless_1.13"
    ]
    check-missing: false
    extra.commands: ${vars.default-commands} [
      // not sure why we get these errors unless we turn them off
      "set every conflictWarning := ConflictWarning.disable"
      // - Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
    ]
    extra.exclude: [
      // didn't compile -- maybe try again after we're on cats 1.0.0-RCx
      "cats"
    ]
  }

]}

//// space: scalameta_1

build += {

  space: scala.jawn_0_10.scalameta_1

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  // forked (refreshed November 2017) to disable bintray stuff, IntelliJ stuff,
  // and to remove a failing git-based test
  ${vars.base} {
    name: "scalafmt"
    uri:  ${vars.uris.scalafmt-uri}
    extra.projects: ["coreJVM", "cli", "tests"]
  }

  // dependency of scalafmt. frozen at an old version because that's what
  // scalafmt expects.  (over in the other scalameta space, scalafix expects
  // a newer version.)
  ${vars.base} {
    name: "metaconfig-old"
    uri:  ${vars.uris.metaconfig-old-uri}
    extra.projects: ["metaconfig-hoconJVM", "metaconfig-typesafe-config"]  // no Scala.js plz
  }

  // dependency of scalafmt
  // forked (July 2017) for dbuild friendliness
  ${vars.base} {
    name: "meta-paradise"
    uri: ${vars.uris.meta-paradise-uri}
    // only goal right now (November 2017) is to get scalafmt in, so, let's just
    // add the project we actually need and not worry about the rest
    extra.projects: ["paradise"]
    // use right version-specific source directory regardless of our weird dbuild Scala version number
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (paradise, Compile) += (baseDirectory in paradise).value / \"src\" / \"main\" / \"scala-2.12.2\""
    ]
  }

  // dependency of scalafmt
  ${vars.base} {
    name: "scalameta-1"
    uri:  ${vars.uris.scalameta-1-uri}
    // else, bintray stuff goes boom
    extra.options: ["-Dsbt.prohibit.publish=true"]
    extra.projects: ["scalametaJVM", "testkit"]  // no Scala.js. just the minimum scalafmt needs?
    extra.exclude: [
      // we never build sbt plugins or benchmarks
      "benchmarks"
    ]
    extra.commands: ${vars.default-commands} [
      // Disable fatal Scaladoc warnings, too fragile
      "removeScalacOptions -Xfatal-warnings"
      // use right version-specific source directories regardless of our weird dbuild Scala version numbers
      "set unmanagedSourceDirectories in (commonJVM, Compile) += (baseDirectory in commonJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (dialectsJVM, Compile) += (baseDirectory in dialectsJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (scalametaJVM, Compile) += (baseDirectory in scalametaJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (scalahost, Compile) += (baseDirectory in scalahost).value / \"src\" / \"main\" / \"scala-2.12.1\""
    ]
  }

]}

//// space: scalameta_2

build += {

  space: scala.jawn_0_10.scalameta_2

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  // forked (updated September 2017) to remove coursier.
  // refreshing the fork should be approached with caution;
  // see Olafur's remarks at
  // https://github.com/scala/community-builds/issues/499#issuecomment-287307613
  // about the instability of both scalameta and scalafix.
  ${vars.base} {
    name: "scalameta-2"
    uri:  ${vars.uris.scalameta-2-uri}
    // else, bintray stuff goes boom
    extra.options: ["-Dsbt.prohibit.publish=true"]
    extra.projects: ["scalametaJVM", "contribJVM", "semanticdbScalac"]  // no Scala.js
    extra.exclude: [
      // we never build sbt plugins or benchmarks
      "benchmarks"
    ]
    // use right version-specific source directories regardless of our weird dbuild Scala version numbers
    extra.commands: ${vars.default-commands} [
      "set unmanagedSourceDirectories in (commonJVM, Compile) += (baseDirectory in commonJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (dialectsJVM, Compile) += (baseDirectory in dialectsJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (scalametaJVM, Compile) += (baseDirectory in scalametaJVM).value / \"src\" / \"main\" / \"scala-2.12\""
      "set unmanagedSourceDirectories in (semanticdbScalac, Compile) += (baseDirectory in semanticdbScalac).value / \"src\" / \"main\" / \"scala-2.12.4\""
    ]
  }

  // adding (September 2017) because scalafix's "cli" subproject uses it.
  // forked to remove coursier and upgrade sbt-bintray
  ${vars.base} {
    name: "semanticdb-sbt"
    uri:  ${vars.uris.semanticdb-sbt-uri}
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    // this is enough for scalafix
    extra.projects: ["runtime"]
  }

  // dependency of scalafix
  ${vars.base} {
    name: "metaconfig-new"
    uri:  ${vars.uris.metaconfig-new-uri}
    extra.projects: ["metaconfig-hoconJVM", "metaconfig-typesafe-config"]  // no Scala.js plz
  }

  // (here in this space because of ammonite-ops dependency)
  // forked (refreshed September 2017) to remove coursier
  // caution, refreshing the fork any further can be problematic;
  // see Olafur's remarks at
  // https://github.com/scala/community-builds/issues/499#issuecomment-287307613
  // about the instability of both scalameta and scalafix
  ${vars.base} {
    name: "scalafix"
    uri:  ${vars.uris.scalafix-uri}
    extra.exclude: [
      // we never build sbt plugins
      "scalafix-sbt"
      // requires scalatex-site which requires Scala.js
      "readme"
      // no Scala.js please
      "coreJS", "diffJS"
      // Scala 2.10 based
      "testsInputSbt"
      // do I *look* like Dotty?
      "testsOutputDotty"
      // can't expand macros compiled by previous versions of Scala
      "testsOutputSbt"
    ]
  }

]}
