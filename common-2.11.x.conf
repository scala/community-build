// Note: the Typesafe Config library is a bit picky with suffixes;
// the common files included via the "include" directive should
// have a ".conf" suffix.
//
// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
//
// If you use extra.options or commands in a project, or extend
// its "extra" description in other ways, please use the form:
//
//      extra.options += "opt1"
//      extra.options += "opt2"
//      extra.options += "opt3"
//      ...(one at a time)...
//
//  = or = the form:
//
//     extra: ${vars.base.extra} {
//       options += "opt1"
//       options += "opt2"
//       options += "opt3"
//      ...(one at a time)...
//     }
//
// so that any "extra" definitions that may come from vars.base are prepended.
// It is necessary to add the options one at a time due to a
// limitation of the Typesafe Config library.
//
///////////////////////////////////////////////////////////////////////

//
// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
//
//
// This is the Typesafe development build file for the Scala 2.11.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.11.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: list the projects we're building, if not all of them
vars: {
  scala-ref                    : "scala/scala.git#2.11.x"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "retronym/browse.git#topic/2.11-compat"
  lift-framework-ref           : "lift/framework.git#3.0-M2-release"
  // spray's release/1.3 branch just a few commits after v1.3.2 which fixed some problems with the community build
  spray-ref                    : "spray/spray.git#43d93b255c6a7f9e510111e9272d83e228638304"
  // only building project twirl-api, fixed sha from master branch that has Scala 2.11 compatiblity patches merged
  spray-twirl-ref              : "spray/twirl.git#102978cb508684aee0cfa09d71027965cdcd77b4"
  // - fix for matching scalaBinaryVersion that causes issues in dbuild
  // - That has been merged, but master is now unusable in Java 6 due to
  //   the use of typesafe-config 1.3.0
  //   https://github.com/playframework/interplay/commit/73f7c9b434be180c27611aebb089d55f6445bcf5#commitcomment-11275807
  play-twirl-ref               : "playframework/twirl.git#pull/45/head"
  spray-json-ref               : "spray/spray-json.git"
  // fixed sha from 2.10.x branch that has Scala 2.11 compatiblity patches merged
  scala-io-ref                 : "jesseeichar/scala-io.git#7704ec7e0f20238376975f89f817dd0d81a4a5d0"
  json4s-ref                   : "json4s/json4s.git#v3.2.10_2.11"
  playframework-ref            : "playframework/playframework.git#2.3.5"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // This pull request supports the fully-cross-versioned contunations plugin, shipped with 2.11+
  scala-arm-ref                : "jsuereth/scala-arm.git#pull/31/head"
  // fixed sha/tag (a compromise)
  slick-ref                    : "slick/slick.git#pull/686/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // There's no suitable release yet, so we depend on this commit. Upgrade to the next tagged version once released
  scala-refactoring-ref        : "scala-ide/scala-refactoring.git#44dca8b74808528693f884cfd3c5c9d3ed13e519"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.3"
  scalatest-ref                : "scalatest/scalatest.git#scala-2.11-M8"
  // zeromq-scala-binding's master includes this fix (and others), which break akka-zeromq (?):
  // https://github.com/valotrading/zeromq-scala-binding/commit/c2a8a87673a1a3468486d1af9a6460bfed25c7a2
  // therefore (which has a broken libdep of scalatest, however (cross full)):
  zeromq-scala-binding-ref     : "valotrading/zeromq-scala-binding.git#062e9438e322ec29d75b9649cb2aafa6ba3198a6"
  // fixed sha/tag (a compromise), the sha points at master that supports Scala 2.11
  spire-ref                    : "non/spire.git#3d2a41e91a1f6946fac63660f6157d4a6e4a281d"
  shapeless-ref                : "milessabin/shapeless.git#shapeless-2.0.0"
  scoverage-ref                : "scoverage/scalac-scoverage-plugin.git#1.0.2"
  // change from https://github.com/sbt/sbt/pull/1509 broke building sbt with Scala 2.11
  // this problem is tracked in https://github.com/sbt/sbt/issues/1523
  // for now, we stick to fixed sha1 of sbt right before the merge of #1509
  sbt-ref                      : "sbt/sbt.git#0b2f2ae5a8ab2b082b6e15b196d671a4c18cc9f2"
  // ensime uses a rolling release to simplify distribution and launching from emacs
  ensime-ref                   : "ensime/ensime-server.git#d73a6212e12d2f82c9daca3e5c60f8f9c4f31899"
  // this is commit corresponding to 1.3.0 release, unfortunely pimpathon doesn't tag its releases
  pimpathon-ref                : "stacycurl/pimpathon.git#d2354dd92f5481610f4610edba3574880b07263e"
  scalariform-ref              : "daniel-trinh/scalariform.git#pull/42/head"
  scalamock-ref                : "paulbutcher/ScalaMock.git#v3.2.1_2.11"

  // tracking upstream (the ideal)
  akka-ref                     : "akka/akka.git#release-2.3"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-xml-ref                : "scala/scala-xml.git"
  scala-swing-ref              : "scala/scala-swing.git#1.0.x"
  scala-records-ref            : "scala-records/scala-records.git"

  // TODO move back to master after adding scalaz-stream to the community build.
  specs2-ref                   : "etorreborre/specs2.git#8fa92f3f9dac61ba39e169b83c091c4d5b15cb8c"

  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "harrah/sbinary.git"
  sbt-republish-ref            : "typesafehub/sbt-republish.git"
  scalaz-ref                   : "scalaz/scalaz.git#series/7.1.x"
  discipline-ref               : "typelevel/discipline.git#v0.2"
  scala-js-ref                 : "scala-js/scala-js.git"

  // version settings
  sbt-version-override         : "0.13.8"
}

vars {
  scalac-opts                  : ""
  scalac-opts                  : ${?scalac_opts}   // allows additional compiler options using the scala_ref environment
}

// NB: vars.base and vars.base.extra need to be defined using +=, in order to include the
// definitions in community-2.xx.x.dbuild
// The appendScalacOptions command is needed as a workaround for https://github.com/typesafehub/dbuild/issues/144
vars.base.extra.commands += "set commands += {\n  def appendScalacOptions(s: State, args: Seq[String]): State = {\n    val extracted = Project extract s\n    def appendDistinct[A](x: Seq[A], y: Seq[A]) = x.filterNot(y.contains) ++ y\n    import extracted._\n    val r = Project.relation(extracted.structure, true)\n    val allDefs = r._1s.toSeq\n    val projectScope = Load.projectScope(currentRef)\n    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct\n    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(orig => appendDistinct(orig, args)))\n    val session = extracted.session.appendRaw(redefined)\n    BuiltinCommands.reapply(session, structure, s)  \n  }\n  Command.args(\"appendScalacOptions\", \"<option>\")(appendScalacOptions)\n}"
vars.base.extra.commands += "appendScalacOptions "${vars.scalac-opts}
# Disable the custom publish of sbt-bintray

vars {
  unbintrayCommandDef = "set commands += {\n    def unbintray(s: State): State = {\n      val extracted = Project extract s\n      def appendDistinct[A](x: Seq[A], y: Seq[A]) = x.filterNot(y.contains) ++ y\n      import extracted._\n      val r = Project.relation(extracted.structure, true)\n      val allDefs = r._1s.toSeq\n      val projectScope = Load.projectScope(currentRef)\n      val scopes = allDefs.filter(_.key == Keys.publish.key).filter(_.toString.contains(\"BintrayPlugin.\")).map(_.scope).distinct\n      val redefined = scopes.map(scope => Keys.publish in scope <<= Classpaths.publishTask(Keys.publishConfiguration, Keys.deliver))\n      val session = extracted.session.appendRaw(redefined)\n      BuiltinCommands.reapply(session, structure, s)\n    }\n    Command.command(\"unbintray\")(unbintray)\n  }\n  "
}

vars.base.extra.commands += ${vars.unbintrayCommandDef}
vars.base.extra.commands += "unbintray"

vars.ivyPat: ", [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  0: "local"
  1: "proxy-ch-maven: https://proxy-ch.typesafe.com:8082/artifactory/repo"
  2: "proxy-ch-ivy: https://proxy-ch.typesafe.com:8082/artifactory/repo"${vars.ivyPat}

  // temporary, enables the fix of https://github.com/sbt/sbt-web/pull/107/files
  // discussion here: https://github.com/sbt/sbt-web/pull/107#issuecomment-94004046
  3: "bintray-eed3si9n-sbt-plugins: https://dl.bintray.com/eed3si9n/sbt-plugins"${vars.ivyPat}

//
// proxy-ch is proxying:
//
// 01: "maven-central"
// 02: "sonatype-snapshots: https://oss.sonatype.org/content/repositories/snapshots"
// 03: "sonatype-releases: https://oss.sonatype.org/content/repositories/releases"
// 04: "java-annoying-cla-stuff: http://download.java.net/maven/2/"
// 05: "typesafe-releases: http://typesafe.artifactoryonline.com/typesafe/releases"
// 06: "typesafe-ivy-releases: http://typesafe.artifactoryonline.com/typesafe/ivy-releases"${vars.ivyPat}
// 07: "dbuild-snapshots: http://typesafe.artifactoryonline.com/typesafe/temp-distributed-build-snapshots"${vars.ivyPat}
// 08: "sbt-plugin-releases: http://scalasbt.artifactoryonline.com/scalasbt/sbt-plugin-releases"${vars.ivyPat}
// 09: "jgit-repo: http://download.eclipse.org/jgit/maven"
// 10: "spray-repo: http://repo.spray.io"
// 11: "sbt-plugin-releases-2: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases"${vars.ivyPat}
}

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: [ default, sbtplugins ]
  space.to: default
  extraction-version: "2.11.2"
  sbt-version: ${vars.sbt-version-override}
  projects: [
  ${vars.base} {
    name: "parboiled",
    uri: "https://github.com/"${vars.parboiled-ref},
    extra: ${vars.base.extra} {
      projects: ["parboiled-scala"]
      // tests do not compile due to source incompatible change in scalatest
      // TestNGSuite became a class but was a trait
      run-tests: false
    }
  }

  ${vars.base} {
    name: "json4s",
    uri: "https://github.com/"${vars.json4s-ref}
    extra.projects: ["json4s-native", "json4s-jackson"]
  }

  ${vars.base} {
    name: "lift-json",
    uri: "https://github.com/"${vars.lift-framework-ref}
    extra.projects: ["lift-json"]
    // test failure:
    //[info] [info] ! Either can't be deserialized with type hints
    //[info] [error]  ClassNotFoundException: : scala.util.Left  (Formats.scala:223)
    // !!!: probably we should investigate
    extra.run-tests: false
  }

  ${vars.base} {
    name: "spray-twirl",
    uri: "https://github.com/"${vars.spray-twirl-ref}
    extra.projects: ["twirl-api"]
  }

  ${vars.base} {
    name: "play-twirl",
    uri: "https://github.com/"${vars.play-twirl-ref}
  }

  ${vars.base} {
    name: "spray-json",
    uri: "https://github.com/"${vars.spray-json-ref}
  }

  ${vars.base} {
    name: "spray",
    uri: "https://github.com/"${vars.spray-ref},
    extra: ${vars.base.extra} {
      // disable subprojects depending on shapeless 1
      exclude: ["spray-routing", "spray-routing-tests"]
      // disable running sphinx, it would be great if dbuild
      // oferred a mechanism for excluding particular project (e.g. docs)
      commands += "set SphinxSupport.sphinxCompile in docs := Seq.empty"
      // disable parallel execution of tests as a work around for non-deterministic
      // failures, see: https://github.com/scala/community-builds/pull/69#issuecomment-63324597
      settings += "parallelExecution in GlobalScope in Test := false"
    }
  }


  ${vars.base} {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    extra: ${vars.base.extra} {
      projects: ["Play"]
      directory: "framework"
      run-tests: false
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
      commands += "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
    }
  }

  ${vars.base} {
    name: "scala-io"
    uri: "https://github.com/"${vars.scala-io-ref}
    extra: ${vars.base.extra} {
      projects: ["core", "file"]
      // one of the tests fail for some reason
      run-tests: false
    }
  }

  ${vars.base} {
    name: "scala-arm"
    uri: "https://github.com/"${vars.scala-arm-ref}
  }

  ${vars.base} {
    name: "scala-partest-interface",
    uri: "https://github.com/"${vars.scala-partest-interface-ref}
  }

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false
    // 0.13.8 chockes on the build definition, see https://github.com/nbronson/scala-stm/pull/45
    extra.sbt-version: "0.13.7"
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}

  }

  ${vars.base} {
    name: specs2
    uri: "https://github.com/"${vars.specs2-ref}
    extra.run-tests: false // at least SnippetsTest is failing.
  }

  ${vars.base} {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
  }

  ${vars.base} {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
  }

  ${vars.base} {
    name: "scala-records"
    uri: "https://github.com/"${vars.scala-records-ref}
    extra.exclude: ["coreJS", "benchmarks"]
  }

  ${vars.base} {
    name: "zeromq-scala-binding"
    uri: "https://github.com/"${vars.zeromq-scala-binding-ref}
    extra: ${vars.base.extra} { run-tests: false }
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: ${vars.base.extra} {
      projects: ["scalatest"]
      commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
      run-tests: false
    }
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/"${vars.discipline-ref}
  }

  ${vars.base} {
    name: "spire"
    uri: "https://github.com/"${vars.spire-ref}
    // tests crash with:
    // [info] [error] Could not run test spire.laws.LawTests:
    // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
    extra.run-tests: false
  }

  ${vars.base} {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
  }

  ${vars.base} {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: ${vars.base.extra} {
      projects: ["tests","javaOut"]
      run-tests: false
    }
  }

  ${vars.base} {
    name:"akka"
    uri:    "https://github.com/"${vars.akka-ref}
    extra: ${vars.base.extra} {
      options += "-Dakka.genjavadoc.enabled=true"
      options += "-Dakka.scaladoc.diagrams=false"
      options += "-Dakka.build.aggregateSamples=false"
      projects: ["akka-scala-nightly"]
      run-tests: false
    }
  }

  ${vars.base} {
    name:   "scala-refactoring",
    uri:    "https://github.com/"${vars.scala-refactoring-ref},
    extra: ${vars.base.extra} {
      directory: "org.scala-refactoring.library"
    }
  }

  //
  // Typesafe-developed projects: degvelopment branches / master / unstable releases
  //
  ${vars.base} {
    name: "async"
    uri: "https://github.com/"${vars.async-ref}
    extra.run-tests: false // ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  ${vars.base} {
    name: "slick"
    uri:  "https://github.com/"${vars.slick-ref}
  }

  ${vars.base} {
    name:   "browse",
    uri:    "https://github.com/"${vars.browse-ref}
    extra.commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
    extra.exclude: ["test", "testLink"]
  }

  ${vars.base} {
    name:   "sbt",
    uri:    "https://github.com/"${vars.sbt-ref}
    extra: ${vars.base.extra} {
      run-tests: false
      exclude: ["root","launch-test"]
    }
  }

  ${vars.base} {
    name:   "ensime",
    uri:    "https://github.com/"${vars.ensime-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // scaladoc fails with
    // [ensime] [info] Compiling 73 Scala sources to .../target/scala-2.11/classes...
    // [ensime] [info] Main Scala API documentation to .../target/scala-2.11/api...
    // [ensime] [error] .../src/main/scala/org/ensime/indexer/SourceResolver.scala:55: value toMultiMap is not a member of scala.collection.immutable.Set[(org.ensime.indexer.PackageName, org.apache.commons.vfs2.FileObject)]
    // [ensime] [error] possible cause: maybe a semicolon is missing before `value toMultiMap'?
    // [ensime] [error]   }.toMultiMap[Set]
    extra.commands: "set every sources in doc in Compile := List()"
  }

  ${vars.base} {
    name:   "pimpathon",
    uri:    "https://github.com/"${vars.pimpathon-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name:   "scalariform",
    uri:    "https://github.com/"${vars.scalariform-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // avoid building misc subproject that depends on Swing (and is not needed by any other project)
    extra.projects: ["scalariform"]
  }

  ${vars.base} {
    name:   "scalamock",
    uri:    "https://github.com/"${vars.scalamock-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/"${vars.scoverage-ref}
    extra: ${vars.base.extra} {
      run-tests: false // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

// scala-logging-slf4j is used by scoverage, but:
// - scala-logging-slf4j v2.1.2 won't compile (not found: value LoggerMacro)
// - and v3.0.0 changed the artifacts, so we grab v2.1.2 via Ivy instead.
//  ${vars.base} {
//    name: "scala-logging"
//    uri:  "https://github.com/typesafehub/scala-logging.git#v2.1.2"
//  }

  {
    name:   "scala-logging-slf4j"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2"
  }

  {
    name:   "scala-logging-api"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2"
  }

  ${vars.base} {
    name:   "zinc",
    uri:    "https://github.com/"${vars.zinc-ref}
  }

  ${vars.base} {
    name:   "sbt-republish",
    uri:    "http://github.com/"${vars.sbt-republish-ref}
    space: default // We don't compile plugins, for 0.12/2.9.x
  }

  ${vars.base} {
    name:   "scala-js",
    uri:    "http://github.com/"${vars.scala-js-ref}
    extra: {
      projects: [ tools, testSuite ]
      // - Disable compiler/test because it is very fragile.
      commands: ["set test in (Build.compiler, Test) := {}"]
    }
  }
]
}

// Not applied to ivy build system projects, if you try that you get
// "JsonMappingException: Property 'commands' is unknown at this position.""
vars.base210.extra.commands += ${vars.unbintrayCommandDef}
vars.base210.extra.commands += "unbintray"

// play-related sbt plugins, in a separate space
build += {

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: [ sbtplugins, sbtplugins ]
  space.to: sbtplugins
  sbt-version: ${vars.sbt-version-override}
  extraction-version: "2.10.4"

projects:[
{
  name:   scala-210
  system: scala
  uri:    "git://github.com/scala/scala.git#v2.10.4" // Was 2.10.x, but we have a problem with paradise-210 (see comments below)
}
${vars.base210} {
  name:   genjavadoc-210
  uri:    "git://github.com/typesafehub/genjavadoc.git#2.10.x"
  extra: {
    projects: genjavadoc-plugin
  }
}
{
  name: spray-json-210
  // The revision of sbt-js-engine that we currently build depends on this older version where JSArray takes a List (new version: a Vector)
  uri: "git://github.com/spray/spray-json.git#v1.2.6"
}
// compiling spray from source entails a few problems,
// so I am grabbing existing artifacts via Ivy, for now.
{
  name: spray-client
  system: ivy
  uri:    "ivy:io.spray#spray-client;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-io
  system: ivy
  uri:    "ivy:io.spray#spray-io;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-util
  system: ivy
  uri:    "ivy:io.spray#spray-util;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-http
  system: ivy
  uri:    "ivy:io.spray#spray-http;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-httpx
  system: ivy
  uri:    "ivy:io.spray#spray-httpx;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-can
  system: ivy
  uri:    "ivy:io.spray#spray-can;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}

{
  name:   paradise-210
  // macro-paradise is used by SPECS2-2.2.2
  //
  uri: "git://github.com/scalamacros/paradise.git#5308dad52bfedc6109f58460a3a71ec1b6a64eb4"
  // sbt 0.13.5 is needed here because paradise blows up incremental compiler in sbt 0.13.7
  extra.sbt-version: "0.13.5"
  // was #2.10.x, but recent changes to paradise now result in
  // 903a36eaa63ca388975b323aa079de30c8cb67f9/quasiquotes/target/scala-2.10.5-dbuildx96605c425eb3e786a0c5812d9145153138eb23bf/api...
  // [paradise-210] java.lang.AbstractMethodError
  // [paradise-210]  at scala.tools.nsc.typechecker.Macros$class.$init$(Macros.scala:911)
  // [paradise-210]  at org.scalamacros.paradise.Plugin$$anon$1.<init>(Plugin.scala:25)
}
{
  name: parboiled-210
  system: ivy
  uri:    "ivy:org.parboiled#parboiled-scala_2.10;1.1.6"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name:  akka-libs-210
  uri:    "git://github.com/"${vars.akka-ref}
  extra: {
  projects: [akka-actor,akka-contrib,akka-osgi]
  options: ["-Dakka.genjavadoc.enabled=true"]
  // one test failing?!?
  run-tests: false
  }
}
${vars.base210} {
    name:   "specs2-210",
    uri: "git://github.com/etorreborre/specs2.git#SPECS2-2.3.12"
    // one test is currently failing
    extra.run-tests: false
}
${vars.base210} {
    name:   "shapeless-210"
    uri:    "git://github.com/milessabin/shapeless.git#shapeless-2.0.0-scala-2.10.x"
}
${vars.base210} {
    name: scalatest-210

    // This was an older version known to compile with the tip of 2.10.x
    uri: "git://github.com/cunei/scalatest.git"
    // uri: "git://github.com/scalatest/scalatest.git"
    extra: {
      projects: scalatest
      run-tests: false
    }
}
${vars.base210} {
    name:   scalaz-210
    uri:    "git://github.com/scalaz/scalaz.git#series/7.0.x"
    extra.exclude: tests
}
${vars.base210} {
    name:   scalacheck-210
    // patched
    uri:    "git://github.com/cunei/scalacheck.git"
    // no:
    // uri:    "git://github.com/rickynils/scalacheck.git#1.11.4"
    extra: {
      run-tests: false // Avoiding https://github.com/rickynils/scalacheck/issues/106. Alternative would be to incorporate the fix (removing the timeout prone test) into our branch.
    }
}
${vars.base210} {
  name: sbt-web-build-base
  uri: "https://github.com/sbt/sbt-web-build-base"
}
${vars.base210} {
  name: sbt-web
  uri:  "https://github.com/sbt/sbt-web.git"
}
${vars.base210} {
  name: js-engine
  uri:  "https://github.com/typesafehub/js-engine.git#1.0.1"
}
${vars.base210} {
  name: npm
  uri:  "https://github.com/typesafehub/npm.git#1.0.0"
    extra.run-tests: false
}
${vars.base210} {
  name: webdriver
  uri:  "https://github.com/typesafehub/webdriver.git#1.0.0"
}
${vars.base210} {
  name: sbt-js-engine
  // the next revision adds the bintray publishing sbt plugin, which currently fails the community build. see
  // https://github.com/sbt/sbt-js-engine/commit/f28889c9c2a6581d1d7a1e530cb5cd71cb0e7d9c#commitcomment-10833306
  // Note: when switching to a newer revision, you also need to update the spray-json-210 dependency in this file,
  // the commit that adds the bintray plugin also switches to spray-json v1.3.
  uri:  "https://github.com/sbt/sbt-js-engine.git#bfca660fbe5e4a06667bae39577c71259399a678"
  // 0.13.8 breaks while building the sub-project "default-sbt-project" with: Modules were resolved with conflicting cross-version suffixes: org.scalamacros:quasiquotes <none>, _2.10
  extra.sbt-version: "0.13.7"
}
${vars.base210} {
  name: sbt-webdriver
  uri:  "https://github.com/sbt/sbt-webdriver.git#1.0.0"
}
${vars.base210} {
  name: sbt-coffeescript
  uri:  "https://github.com/sbt/sbt-coffeescript.git#1.0.0"
}
${vars.base210} {
  name: sbt-digest
  uri:  "https://github.com/sbt/sbt-digest.git#1.0.0"
}
${vars.base210} {
  name: sbt-gzip
  uri:  "https://github.com/sbt/sbt-gzip.git#1.0.0"
}
${vars.base210} {
  name: sbt-jshint
  uri:  "https://github.com/sbt/sbt-jshint.git#1.0.0"
}
${vars.base210} {
  name: sbt-less
  uri:  "https://github.com/sbt/sbt-less.git#1.0.0"
}
${vars.base210} {
  name: sbt-mocha
  uri:  "https://github.com/sbt/sbt-mocha.git#1.0.0"
}
${vars.base210} {
  name: sbt-rjs
  uri:  "https://github.com/sbt/sbt-rjs.git#1.0.0"
}
${vars.base210} {
  name: sbteclipse
  uri: "git://github.com/typesafehub/sbteclipse.git#v3.0.0" // master is not compatible with Play 2.3, see https://github.com/scala/community-builds/issues/96
}
${vars.base210} {
  name: sbt-twirl-210
// no: uri: "git://github.com/spray/twirl.git"
// yes, SBT-Plugin uses this:
  uri: "git://github.com/"${vars.play-twirl-ref}
  // The code makes assumptions on the scalaBinaryVersion, and
  // will not compiler unless it is set to "2.10". Hence:
  cross-version: standard
  // 0.13.8 breaks while building the sub-project "plugin" with: Modules were resolved with conflicting cross-version suffixes: org.scalamacros:quasiquotes <none>, _2.10
  extra.sbt-version: "0.13.7"
}

${vars.base210} {
  name: sbt-idea
  uri: "https://github.com/mpeltonen/sbt-idea.git#pull/327/head"
  space: sbtplugins // plugins not compiled for 2.9.x
  extra.commands: "set sources in doc in Compile := List()" // skip scaladoc, as it fails
}
${vars.base210} {
  name: android-sdk-plugin
  uri: "https://github.com/pfn/android-sdk-plugin.git#1.3.13"
  space: sbtplugins // plugins not compiled for 2.9.x
}
// and, finally, SBT-Plugin from Play, which according to Christopher Hunt
// should use sbt-js-engine and sbt-webdriver

{
    check-missing: false
    // this plugin needs sbt-idea, which needs android-sdk-plugin, which is apparently impossible to compile
    name: Play2-SBT-Plugin
    uri: "https://github.com/playframework/playframework.git#2.3.x"
    extra: {
      projects: SBT-Plugin
      directory: framework
      run-tests: false
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
      commands += "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
    }
}

${vars.base210} {
  name: sbt-pgp
  uri: "git://github.com/sbt/sbt-pgp.git#f657f3640e67913bec3f441e8c4e671cd3e9b511"
}
{
  name: dispatch-http-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-http_2.10;0.8.10"
}
{
  name: dispatch-core-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-core_2.10;0.8.10"
}
{
  name: dispatch-futures-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-futures_2.10;0.8.10"
}

]}
