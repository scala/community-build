// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
// A notification can automatically be sent (via email) to one or more
// project maintainers for each project or set or projects (see the
// "notifications" section, at the end of the file).
//
//
// This is the Typesafe development build file for the Scala 2.11.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.11.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: list the projects we're building, if not all of them
vars: {
  scala-ref                    : "scala/scala.git"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "retronym/browse.git#topic/2.11-compat"
  // forked to make build dbuild friendly (only building lift-json)
  lift-framework-ref           : "adriaanm/framework.git#scala-2.11"
  // forked to:
  // 1. disable building of scaladoc docs (due to regression in scaladoc)
  // 2. add dependency on scala-parser-combinators
  // 3. remove use of sbteclipse plugin that Artifactory cannot resolve
  scala-io-ref                 : "gkossakowski/scala-io.git#0.4.2-scala-2.11"
  // forked so I could upgrade to sbt 0.13.1 and remove problematic sbt plugins
  spray-json-ref               : "gkossakowski/spray-json.git#1.2.5-scala-2.11"
  // forked so I could remove problematic sbt plugins
  spray-ref                    : "gkossakowski/spray.git#1.3-scala-2.11"
  // only building project twirl-api
  twirl-ref                    : "gkossakowski/twirl.git#scala-2.11"

  // fixed sha from scala_2.10 branch that has Scala 2.11 compatiblity patches merged
  json4s-ref                   : "json4s/json4s.git#2de9633aae136a03f3f654db65e90c66d71826de"
  // fixed sha from master that has Scala 2.11 patches merged
  playframework-ref            : "playframework/playframework.git#3b63ece20430f202363dc025a36fd00ed5d0283f"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // fixed sha/tag (a compromise), the sha points at master that does support Scala 2.11
  // but haven't diverged from 1.3 release yet
  scala-arm-ref                : "jsuereth/scala-arm.git#9c5e817a88de804c82a6b2f1447ef6fed9a46a57"
  // fixed sha/tag (a compromise)
  slick-ref                    : "slick/slick.git#pull/686/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.1"
  scalatest-ref                : "scalatest/scalatest.git#scala-2.11-M8"
  // zeromq-scala-binding's master includes this fix (and others), which break akka-zeromq (?):
  // https://github.com/valotrading/zeromq-scala-binding/commit/c2a8a87673a1a3468486d1af9a6460bfed25c7a2
  // therefore (which has a broken libdep of scalatest, however (cross full)):
  zeromq-scala-binding-ref     : "valotrading/zeromq-scala-binding.git#062e9438e322ec29d75b9649cb2aafa6ba3198a6"

  // tracking upstream (the ideal)
  akka-ref                     : "akka/akka.git"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-xml-ref                : "scala/scala-xml.git"
  specs2-ref                   : "etorreborre/specs2.git"
  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "harrah/sbinary.git"
  sbt-full-library-ref         : "dragos/sbt-full-library.git"
  sbt-republish-ref            : "typesafehub/sbt-republish.git"
  sbt-ref                      : "sbt/sbt.git#0.13"
  scalaz-ref                   : "scalaz/scalaz.git#series/7.0.x"
  shapeless-ref                : "milessabin/shapeless.git#scala-2.11.x"

  // version settings
  sbt-version-override         : "0.13.1"
  sbt-version-override-prev    : "0.12.4"
  // needed for specs2 as they are using the withNameHashing option
  sbt-version-override-next    : "0.13.2-M2"
}

vars.ivyPat: ", [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  0: "local"
  1: "a7-maven: https://a7.typesafe.com:8082/artifactory/repo"
  2: "a7-ivy: https://a7.typesafe.com:8082/artifactory/repo"${vars.ivyPat}

//
// a7 is proxying:
//
// 01: "maven-central"
// 02: "sonatype-snapshots: https://oss.sonatype.org/content/repositories/snapshots"
// 03: "sonatype-releases: https://oss.sonatype.org/content/repositories/releases"
// 04: "java-annoying-cla-stuff: http://download.java.net/maven/2/"
// 05: "typesafe-releases: http://typesafe.artifactoryonline.com/typesafe/releases"
// 06: "typesafe-ivy-releases: http://typesafe.artifactoryonline.com/typesafe/ivy-releases"${vars.ivyPat}
// 07: "dbuild-snapshots: http://typesafe.artifactoryonline.com/typesafe/temp-distributed-build-snapshots"${vars.ivyPat}
// 08: "sbt-plugin-releases: http://scalasbt.artifactoryonline.com/scalasbt/sbt-plugin-releases"${vars.ivyPat}
// 09: "jgit-repo: http://download.eclipse.org/jgit/maven"
// 10: "spray-repo: http://repo.spray.io"
}

build.extraction-version: "2.11.0-M8"
build.cross-version: disabled

build.projects:[
  // Scala 2.11.x
  {
    name:  "scala",
    system: assemble
    extra.parts: {
      cross-version: standard
      sbt-version: ${vars.sbt-version-override}
    }
    extra.parts.projects: [
      {
        system: "scala",
        name:  "scala",
        uri:    "https://github.com/"${vars.scala-ref}
        extra.build-options: ["-Dlocker.skip=1", "-Ddocs.skip=1"] // speed things up a little
      }
      {
        name: "scala-xml",
        uri: "https://github.com/"${vars.scala-xml-ref}
        extra.sbt-version: ${vars.sbt-version-override}
      }
      {
        name: "scala-parser-combinators",
        uri: "https://github.com/"${vars.scala-parser-combinators-ref}
        extra.sbt-version: ${vars.sbt-version-override}
      }
    ]
  }

  {
    name: "scala-continuations"
    uri: "https://github.com/"${vars.scala-continuations-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // Trying to avoid unexplained error on Toolbox based tests: "bad option: -P:continuations:enable"
    // This is reproducible outside of dbuild, but hard to pin down.
    // Example: https://gist.github.com/retronym/9122414
    // Note the plugin JAR was rebuild on inspect `test:test`, even though there was no source change.
    // After that, the next `test` worked.
    extra.commands: ["clean", "plugin/compile:package"]
  }

  {
    name: "parboiled",
    uri: "https://github.com/"${vars.parboiled-ref},
    extra: {
      projects: ["parboiled-scala"]
      sbt-version: ${vars.sbt-version-override}
      // tests do not compile due to source incompatible change in scalatest
      // TestNGSuite became a class but was a trait
      run-tests: false
    }
  }

  {
    name: "json4s",
    uri: "https://github.com/"${vars.json4s-ref}
    extra.projects: ["json4s-native", "json4s-jackson"]
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: "lift-json",
    uri: "https://github.com/"${vars.lift-framework-ref}
    extra.projects: ["lift-json"]
    extra.sbt-version: ${vars.sbt-version-override}
    // test failure:
    //[info] [info] ! Either can't be deserialized with type hints
    //[info] [error]  ClassNotFoundException: : scala.util.Left  (Formats.scala:223)
    // !!!: probably we should investigate
    extra.run-tests: false
  }

  {
    name: "spray-twirl",
    uri: "https://github.com/"${vars.twirl-ref}
    extra.projects: ["twirl-api"]
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: "spray-json",
    uri: "https://github.com/"${vars.spray-json-ref},
    extra.sbt-version: ${vars.sbt-version-override-prev}
  }

  {
    name: "spray",
    uri: "https://github.com/"${vars.spray-ref},
    extra: {
      sbt-version: ${vars.sbt-version-override}
      commands: [
        // disable running sphinx, it would be great if dbuild
        // oferred a mechanism for excluding particular project (e.g. docs)
        "set SphinxSupport.sphinxCompile in docs := Seq.empty"
      ]
      // they fail to compile
      run-tests: false
    }
  }


  {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    extra: {
      projects: ["Play"]
      directory: "framework"
      run-tests: false
      commands: [
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
      ]
    }
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: "scala-io"
    uri: "https://github.com/"${vars.scala-io-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra: {
      projects: ["core", "file"]
      // one of the tests fail for some reason
      run-tests: false
    }
  }

  {
    name: "scala-arm"
    uri: "https://github.com/"${vars.scala-arm-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }  


  {
    name: "scala-partest",
    uri: "https://github.com/"${vars.scala-partest-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: "scala-partest-interface",
    uri: "https://github.com/"${vars.scala-partest-interface-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false
  }

  {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}
    extra.sbt-version: ${vars.sbt-version-override}

  }

  {
    name: specs2
    uri: "https://github.com/"${vars.specs2-ref}
    extra.sbt-version: ${vars.sbt-version-override-next}
    extra.run-tests: false // at least SnippetsTest is failing.
  }

  {
    name: scalacheck
    uri:    "https://github.com/"${vars.scalacheck-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.run-tests: false
  }

  {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name: "zeromq-scala-binding"
    uri: "https://github.com/"${vars.zeromq-scala-binding-ref}
    extra: {run-tests: false }
  }

  {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: {
      projects: ["scalatest"]
      commands: "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
      run-tests: false
    }
  }

  {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: {
      sbt-version: ${vars.sbt-version-override}
      projects: ["tests","javaOut"]
      run-tests: false
    }
  }

  {
    name:"akka"
    uri:    "https://github.com/"${vars.akka-ref}
    extra: {
      options: ["-Dakka.genjavadoc.enabled=true", "-Dakka.scaladoc.diagrams=false"]
      projects: ["akka-scala-nightly"]
      run-tests: false
    }
    extra.sbt-version: ${vars.sbt-version-override}
  }

  //
  // Typesafe-developed projects: degvelopment branches / master / unstable releases
  //
  {
    name: "async"
    uri: "https://github.com/"${vars.async-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.run-tests: false // ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  {
    name: "slick"
    uri:  "https://github.com/"${vars.slick-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  {
    name:   "browse",
    uri:    "https://github.com/"${vars.browse-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.commands: "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
    extra.exclude: ["test", "testLink"]
  }

  {
    name:   "sbt",
    uri:    "https://github.com/"${vars.sbt-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra: {
      run-tests: false
      exclude: ["launch-test"]
    }
  }

  {
    name:   "zinc",
    uri:    "https://github.com/"${vars.zinc-ref}
  }

  {
    name:   "sbt-full-library",
    uri:    "https://github.com/"${vars.sbt-full-library-ref}
  }

  {
    name:   "sbt-republish",
    uri:    "http://github.com/"${vars.sbt-republish-ref}
  }
]

options.notifications: {
  send:[{
    projects: "."
    kind: console
    when: always
  }]
  default: []
}
